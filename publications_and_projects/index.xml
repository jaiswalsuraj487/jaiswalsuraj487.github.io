<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Suraj Jaiswal</title>
<link>https://jaiswalsuraj487.github.io/publications_and_projects/</link>
<atom:link href="https://jaiswalsuraj487.github.io/publications_and_projects/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.7.33</generator>
<lastBuildDate>Fri, 24 May 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Eye in the Sky Detection and Compliance Monitoring of Brick</title>
  <dc:creator>Suraj Jaiswal</dc:creator>
  <link>https://jaiswalsuraj487.github.io/publications_and_projects/data/research_acm.html</link>
  <description><![CDATA[ 




<p><strong><a href="Eye_in_the_Sky_Detection_and_Compliance_Monitoring_of_ Brick_ACMCOMPASS_2024.pdf">Paper</a> accepted</strong> in <strong>ACM Compass (Conference on Computing and Sustainable Societies)</strong> 2024 Poster track.</p>
<p>Live Streamlit Demo App: <a href="https://brick-kilns-detector.streamlit.app/">link</a></p>
<p><img src="https://jaiswalsuraj487.github.io/publications_and_projects/images/research2/streamlit_demo_acm.png" width="800"> <img src="https://jaiswalsuraj487.github.io/publications_and_projects/images/research2/streamlit_demo_acm2.png" width="800"></p>
<section id="keywords" class="level3">
<h3 class="anchored" data-anchor-id="keywords">Keywords:</h3>
<p>Object Detection, Satellite Imagery, Deep Learning, Transfer Learning</p>
</section>
<section id="abstract" class="level3">
<h3 class="anchored" data-anchor-id="abstract">Abstract:</h3>
<ul>
<li><p>Air pollution kills 7 million people annually. The brick manufacturing industry accounts for 8%-14% of air pollution in the densely populated Indo-Gangetic plain.</p></li>
<li><p>Due to the unorganized nature of brick kilns, policy violation detection, such as proximity to human habitats, remains challenging. While previous studies have utilized computer vision-based machine learning methods for brick kiln detection from satellite imagery, they utilize proprietary satellite data and rarely focus on compliance with government policies.</p></li>
<li><p>In this research, we introduce a scalable framework for brick kiln detection and automatic compliance monitoring. We use Google Maps Static API to download the satellite imagery followed by the YOLOv8 model for detection.</p></li>
<li><p>We identified and hand-verified <strong>19579 new brick kilns across 9 states within the Indo-Gangetic plain</strong>.</p></li>
<li><p>Furthermore, we automate and test the compliance to the policies affecting human habitats, rivers and hospitals. Our results show that a substantial number of brick kilns do not meet the compliance requirements. Our framework offers a valuable tool for governments worldwide to automate and enforce policy regulations for brick kilns, addressing critical environmental and public health concerns.</p></li>
<li><p>In addition, we have deployed our model as a <a href="https://brick-kilns-detector.streamlit.app/">web application</a> for automatically identifying brick kilns given a specific area by the user.</p></li>
</ul>
<p>To know more check: <a href="Eye in the Sky Detection and Compliance Monitoring of Brick_ACMCOMPASS_2024.pdf">Paper</a></p>


</section>

 ]]></description>
  <category>Deep Learning</category>
  <category>Object Detection</category>
  <guid>https://jaiswalsuraj487.github.io/publications_and_projects/data/research_acm.html</guid>
  <pubDate>Fri, 24 May 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Retrieval-Augmented Generation(RAG) and Hypothetical Document Embeddings~(HyDE)</title>
  <dc:creator>Suraj Jaiswal</dc:creator>
  <link>https://jaiswalsuraj487.github.io/publications_and_projects/data/rag_hyde_huggingface.html</link>
  <description><![CDATA[ 




<section id="retrieval-augmented-generationrag-for-large-language-models" class="level1">
<h1>Retrieval-Augmented Generation(RAG) for Large Language Models</h1>
<p>Large Language Models (LLMs), such as those driving today’s most advanced AI chatbots and information retrieval systems, are incredibly powerful. However, they’re not without their issues. Here’s a brief overview of what RAG is, the problems it addresses, and how it enhances LLMs:</p>
<p><strong>Current Problems with LLMs</strong>:</p>
<ul>
<li>Inconsistency: LLMs can sometimes provide accurate answers, but other times they might produce irrelevant or incorrect information.</li>
<li>Outdated Knowledge: Since LLMs are trained on datasets that may not include the most recent information, their responses can be outdated.</li>
<li>Lack of Understanding: LLMs process information based on statistical relationships between words, not actual comprehension of content.</li>
</ul>
<p><b>What is RAG?</b></p>
<ul>
<li>Augmented Learning: RAG stands for Retrieval-Augmented Generation, an AI framework designed to supplement the internal knowledge of LLMs with external, up-to-date information from various sources.</li>
<li>Enhanced Accuracy: By grounding LLM responses in external data, RAG improves the relevance, timeliness, and accuracy of the information provided.</li>
</ul>
<p><b>How RAG Helps</b>:</p>
<ul>
<li>Current, Reliable Facts: RAG ensures LLMs have access to the latest information, making responses more accurate and reliable.</li>
<li>Transparency: Users can access the sources of information, enabling verification of the LLM’s responses for accuracy and trustworthiness.</li>
<li>Continuous Updates: The RAG framework allows for the integration of new, relevant data, ensuring LLMs remain up-to-date with the latest knowledge.</li>
</ul>
<p>By addressing the inherent limitations of LLMs through the integration of external data, RAG significantly enhances the quality and reliability of LLM-generated responses, making this technology a game-changer in the field of AI and machine learning.</p>
<p><a href="https://arxiv.org/abs/2312.10997">Paper link</a></p>
<p><img src="https://jaiswalsuraj487.github.io/publications_and_projects/images/rag_hyde_hugginface/rag_archi.jpeg" width="700"></p>
<p><img src="https://jaiswalsuraj487.github.io/publications_and_projects/images/rag_hyde_hugginface/rag_archi_2.png" width="700"></p>
<p><a href="https://colab.research.google.com/github/jaiswalsuraj487/jaiswalsuraj487.github.io/blob/main/publications_and_projects/data/rag_hyde_huggingface.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"></a></p>
<div id="cell-5" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="56b2fb37-1e3c-4be2-e8b3-31ea3c985400">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install required libraries</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install PyPDF2</span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install langchain</span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install pypdf</span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install sentence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>transformers</span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install faiss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cpu</span></code></pre></div>
</div>
<div id="cell-6" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PyPDF2 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PdfReader</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.text_splitter <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> CharacterTextSplitter</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.vectorstores <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FAISS</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.document_loaders <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Docx2txtLoader</span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.document_loaders <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TextLoader</span>
<span id="cb2-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.document_loaders <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PyPDFLoader</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> HuggingFaceHub</span>
<span id="cb2-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.embeddings <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> HuggingFaceEmbeddings</span>
<span id="cb2-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.chains.question_answering <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_qa_chain</span>
<span id="cb2-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-15">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HUGGINGFACEHUB_API_TOKEN"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"YOUR_API_TOKEN"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Login to https://huggingface.co/ go to settings &gt; Access Tokens &gt; create a new token</span></span></code></pre></div>
</div>
<p>Taking open source models from hugging face <a href="https://huggingface.co/models">link</a></p>
<div id="cell-8" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="a63568fe-d549-490a-80b2-658d5e02aefc" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">llm_small<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>HuggingFaceHub(</span>
<span id="cb3-2">    repo_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"google/flan-t5-small"</span>,</span>
<span id="cb3-3">    model_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temperature"</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_length"</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>}</span>
<span id="cb3-4">    )</span>
<span id="cb3-5">llm_qa<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>HuggingFaceHub(</span>
<span id="cb3-6">    repo_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ashishkat/questionAnswer"</span>,</span>
<span id="cb3-7">    model_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temperature"</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_length"</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>}</span>
<span id="cb3-8">    )</span>
<span id="cb3-9">llm_xxl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>HuggingFaceHub(</span>
<span id="cb3-10">    repo_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"google/flan-t5-xxl"</span>,</span>
<span id="cb3-11">    model_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temperature"</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_length"</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>}</span>
<span id="cb3-12">    )</span>
<span id="cb3-13">llm_mistral<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>HuggingFaceHub(</span>
<span id="cb3-14">    repo_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mistralai/Mistral-7B-Instruct-v0.1"</span>,</span>
<span id="cb3-15">    model_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temperature"</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_length"</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>}</span>
<span id="cb3-16">    )</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.10/dist-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The class `langchain_community.llms.huggingface_hub.HuggingFaceHub` was deprecated in langchain-community 0.0.21 and will be removed in 0.2.0. Use HuggingFaceEndpoint instead.
  warn_deprecated(</code></pre>
</div>
</div>
<section id="without-rag.-direct-query-to-llm" class="level2">
<h2 class="anchored" data-anchor-id="without-rag.-direct-query-to-llm">Without RAG. Direct query to LLM</h2>
<div id="cell-10" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="3c3cdb06-c930-4169-b36d-de119c64c8b3" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is performance of model on detecting brick kilns"</span></span>
<span id="cb5-2">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_qa_chain(llm_mistral, chain_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stuff"</span>)</span>
<span id="cb5-3">base_response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.run(input_documents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[], question<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>query)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.10/dist-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `run` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.
  warn_deprecated(</code></pre>
</div>
</div>
<div id="cell-11" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:91}}" data-outputid="c7d13cc0-9ec5-40b0-c8f1-d56bdc0d8201" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">base_response</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>"Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.\n\n\n\nQuestion: What is performance of modele on detecting brick kilns\nHelpful Answer: The performance of the model on detecting brick kilns can be evaluated by calculating the accuracy, precision, recall, and F1 score. These metrics can be calculated by comparing the predicted results of the model with the actual results. The accuracy measures the percentage of correct predictions, while the precision measures the percentage of true positive predictions among all positive predictions. The recall measures the percentage of true positive predictions among all actual positive cases. The F1 score is the harmonic mean of precision and recall,"</code></pre>
</div>
</div>
<div id="cell-12" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="b171b9d3-cf60-459a-cd55-e87bd3c0fbf0" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">split_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base_response.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Question:"</span>)</span>
<span id="cb9-2">question_part <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split_text[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Helpful Answer:"</span>)</span>
<span id="cb9-3"></span>
<span id="cb9-4">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> question_part[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].strip()</span>
<span id="cb9-5">base_answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> question_part[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].strip()</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Question:"</span>, question)</span>
<span id="cb9-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Helpful Answer:"</span>, base_answer)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Question: What is performance of modele on detecting brick kilns
Helpful Answer: The performance of the model on detecting brick kilns can be evaluated by calculating the accuracy, precision, recall, and F1 score. These metrics can be calculated by comparing the predicted results of the model with the actual results. The accuracy measures the percentage of correct predictions, while the precision measures the percentage of true positive predictions among all positive predictions. The recall measures the percentage of true positive predictions among all actual positive cases. The F1 score is the harmonic mean of precision and recall,</code></pre>
</div>
</div>
</section>
<section id="with-rag.-query-to-llm-with-retrieval" class="level2">
<h2 class="anchored" data-anchor-id="with-rag.-query-to-llm-with-retrieval">With RAG. Query to LLM with retrieval</h2>
<div id="cell-14" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="e6c6b36d-3614-4f98-9206-197dc9c01016" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> google.colab <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> drive</span>
<span id="cb11-2">drive.mount(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/drive'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount("/content/drive", force_remount=True).</code></pre>
</div>
</div>
<div id="cell-15" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # Path to the database 'docs' directory in your Google Drive</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># docs_path = '/content/drive/MyDrive/Colab Notebooks/langchain/docs/'</span></span></code></pre></div>
</div>
<div id="cell-16" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># documents = []</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for file in os.listdir(docs_path):</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     if file.endswith('.pdf'):</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         pdf_path = docs_path + file</span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         loader = PyPDFLoader(pdf_path)</span></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         documents.extend(loader.load())</span></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     elif file.endswith('.docx') or file.endswith('.doc'):</span></span>
<span id="cb14-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         doc_path = docs_path + file</span></span>
<span id="cb14-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         loader = Docx2txtLoader(doc_path)</span></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         documents.extend(loader.load())</span></span>
<span id="cb14-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     elif file.endswith('.txt'):</span></span>
<span id="cb14-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         text_path = docs_path + file</span></span>
<span id="cb14-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         loader = TextLoader(text_path)</span></span>
<span id="cb14-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         documents.extend(loader.load())</span></span>
<span id="cb14-15"></span>
<span id="cb14-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># len(documents)</span></span></code></pre></div>
</div>
<p>Doing for single pdf</p>
<div id="cell-18" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="c310edf6-73f9-42cf-840c-5256a40df2ba" data-execution_count="9">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">documents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-2">loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PyPDFLoader(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/drive/MyDrive/Colab Notebooks/langchain/docs/NeurIPS23_Workshop_Accepted_BrickKilns.pdf'</span>)</span>
<span id="cb15-3">documents.extend(loader.load())</span>
<span id="cb15-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(documents)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>11</code></pre>
</div>
</div>
<div id="cell-19" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="49938467-0713-497f-f720-082ff456face" data-execution_count="10">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">documents[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>Document(page_content='NeurIPS 2023 Workshop on Adaptive Experimental Design and Active Learning in the Real World\nTowards Scalable Identification of Brick Kilns from Satellite\nImagery with Active Learning\nAditi Agarwal, Suraj Jaiswal, Madhav Kanda, Dhruv Patel, Rishabh Mondal,\nVannsh Jani, Zeel B Patel, Nipun Batra\nIndian Institute of Technology, Gandhinagar\nSarath Guttikunda\nUrban EmissionsAbstract\nAir pollution is a leading cause of death globally, especially in south-east Asia. Brick 1\nproduction contributes significantly to air pollution. However, unlike other sources such 2\nas power plants, brick production is unregulated and thus hard to monitor. Traditional 3\nsurvey-based methods for kiln identification are time and resource-intensive. Similarly, it 4\nis time-consuming for air quality experts to annotate satellite imagery manually. Recently, 5\ncomputer vision machine learning models have helped reduce labeling costs, but they need 6\nsufficiently large labeled imagery. In this paper, we propose scalable methods using active 7\nlearning to accurately detect brick kilns with minimal manual labeling effort. Through this 8\nwork, we have identified more than 700 new brick kilns across the Indo-Gangetic region: 9\na highly populous and polluted region spanning 0.4 million square kilometers in India. In 10\naddition, we have deployed our model as a web application for automatically identifying 11\nbrick kilns given a specific area by the user. 12\nKeywords: Active Learning, Satellite Imagery, Sustainable Development, Air Pollution 13\n(a)\n (b)\n (c)\n (d)\nFigure 1: Screenshots from our web application that help detect brick kilns (a) Selecting the\ncoordinates of the bounding box (red rectangle) (b) Markers in the bounding box where the\nmodel predicts the existence of a brick kiln (c) Statistics of number of brick kilns detected,\ntheir coordinates and model’s predicted probabilities (d) Grad-CAM (Selvaraju et al., 2019)\nvisual showing where our model focuses on predicted brick kiln image (Best viewed in color)\n1. Introduction 14\nAir pollution kills seven million people worldwide, and 22% of casualties are only from 15\nIndia (UNEP, 2019). Annual average PM 2.5(Particulate matter of size ≤2.5µm) of 16\nIndia was 24 µg/m3in 2020, which is significantly higher than the annual WHO limit 17\nof 5 µg/m3(Guttikunda and Nishadh, 2022). Air quality researchers use physics-based 18\nsimulators such as CAMx1to model the air quality (Guttikunda et al., 2019) using an 19\ninventory of major sources. 20\n1.https://www.camx.com/\n1', metadata={'source': '/content/drive/MyDrive/Colab Notebooks/langchain/docs/NeurIPS23_Workshop_Accepted_BrickKilns.pdf', 'page': 0})</code></pre>
</div>
</div>
<div id="cell-20" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="8d84abba-a0f6-4491-9fd9-230a17b3aa5d" data-execution_count="11">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">text_splitter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CharacterTextSplitter(</span>
<span id="cb19-2">    separator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb19-3">    chunk_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb19-4">    chunk_overlap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>,</span>
<span id="cb19-5">    length_function <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>,</span>
<span id="cb19-6"></span>
<span id="cb19-7">)</span>
<span id="cb19-8">chunked_documents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_splitter.split_documents(documents)</span>
<span id="cb19-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(chunked_documents)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>37</code></pre>
</div>
</div>
<p>Creating the embeddings for the database</p>
<div id="cell-22" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="3d64cf7b-ef9e-4281-8c27-41461a7e5d2c" data-execution_count="12">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HuggingFaceEmbeddings()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_token.py:88: UserWarning: 
The secret `HF_TOKEN` does not exist in your Colab secrets.
To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.
You will be able to reuse this secret in all of your notebooks.
Please note that authentication is recommended but still optional to access public models or datasets.
  warnings.warn(
/usr/local/lib/python3.10/dist-packages/torch/_utils.py:831: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  return self.fget.__get__(instance, owner)()</code></pre>
</div>
</div>
<div id="cell-23" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># directly load if you have saved db</span></span>
<span id="cb23-2">db_hf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FAISS.from_documents(chunked_documents, embeddings)</span></code></pre></div>
</div>
<div id="cell-24" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.faiss.FAISS.html#langchain.vectorstores.faiss.FAISS.from_documents</span></span>
<span id="cb24-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># db_hf.save_local('/content/drive/MyDrive/Colab Notebooks/langchain/faiss_index_docstore_mapping_hf')  # Save FAISS index, docstore, and index_to_docstore_id to disk.</span></span></code></pre></div>
</div>
<div id="cell-25" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HuggingFaceEmbeddings()</span>
<span id="cb25-2">db_hf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FAISS.load_local(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/drive/MyDrive/Colab Notebooks/langchain/faiss_index_docstore_mapping_hf'</span>, embeddings)</span></code></pre></div>
</div>
<p>Performing the retrieval via semantic search in the vector database</p>
<div id="cell-27" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="0b74b87c-4e2c-4146-b8fc-d615d7b6146c" data-execution_count="15">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">top_docs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db_hf.similarity_search(query, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb26-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> top_docs:</span>
<span id="cb26-3">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(i,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>page_content='1000 images, and after manual inspection, we found 996 of them to be correctly classified. 281\nThus through our approach we were able to reduce the annotation 282\nBrick Kilns\nIndia\nFigure A: We initially manually located approximately 189 brick kilns in the Indo-Gangetic\nplain. Subsequently, our model automatically detected an additional 704 new brick kilns in\nthe vicinity of the manually identified ones, as illustrated in the figure\nA.4 Deployment 283\nWe deploy a web application on Streamlit, as depicted in Figure 1, offering users an acces- 284\nsible and interactive interface for brick kiln detection in a given area of interest. Once the 285\nbounding box is defined, our model identifies brick kilns within this area and provides the 286\ncoordinates of the brick kilns. Grad-CAM (Selvaraju et al., 2019) visuals accompany these 287\non the original brick kiln image to highlight the areas where the model focuses. 288\n11' metadata={'source': '/content/drive/MyDrive/Colab Notebooks/langchain/docs/NeurIPS23_Workshop_Accepted_BrickKilns.pdf', 'page': 10} 


page_content='We show that using our methods, we need to annotate only a small number of images to 39\nobtain brick kiln locations in a new region. On performing active learning on the Indian 40\ndataset, we concluded that we needed 70% fewer samples than random to achieve a similar 41\nF1 score. We also find that we could reach 97% of optimal F1 score with active learning, 42\nwhereas random could reach only 90% with the same number of samples labeled. 43\nFinally, we have developed a web application2offering users an accessible and interactive 44\ninterface for brick kiln detection in a given region of interest. Figure 1 shows our web 45\napplication which takes in bounding boxes of the area of interest and detects the kilns 46\npresent in the region while also showing Grad-CAM (Selvaraju et al., 2019) visuals to 47\nhighlight the focus area of the model. Our work is fully reproducible, and we intend to 48\nrelease the scripts and data upon acceptance. 49\n2. Dataset 50' metadata={'source': '/content/drive/MyDrive/Colab Notebooks/langchain/docs/NeurIPS23_Workshop_Accepted_BrickKilns.pdf', 'page': 1} 


page_content='highly populous region characterised with alarming levels of air pollution. Additionally, this 58\nregion is located in the highly fertile Indo-Gangetic plain which it a hotspot for production 59\nof bricks. The dataset also contains 2000 non-brick kiln images from structures visually 60\nsimilar to brick kilns to make the dataset more challenging and our model robust. These 61\n2.https://brick-kilns-detector.streamlit.app/\n2' metadata={'source': '/content/drive/MyDrive/Colab Notebooks/langchain/docs/NeurIPS23_Workshop_Accepted_BrickKilns.pdf', 'page': 1} 


page_content='•In our current work, we only looked at the binary classification task. Drawing inspiration 155\nfrom (Lee et al., 2021), we plan to additionally localize the kilns in the image and extend 156\nour active learning pipeline towards multiple objectives: localization and classification. 157\n•Our current work treated the classification problem as a binary classification task. In the 158\nfuture, we plan to study this formulation as a one-class task. Correspondingly, we also 159\nplan to look at specialized losses such as the focal losses (Lin et al., 2017). 160\n6. Conclusion 161\nOur goal was to develop a scalable method to detect brick kilns. We conclude from our 162\nresults that satellite data can be used to detect brick kilns accurately. Further, we conclude 163\nthat we can develop accurate models by actively annotating images from the target region. 164\nWe believe that our work will likely benefit key stakeholders such as scientists building 165' metadata={'source': '/content/drive/MyDrive/Colab Notebooks/langchain/docs/NeurIPS23_Workshop_Accepted_BrickKilns.pdf', 'page': 5} 


page_content='NeurIPS 2023 Workshop on Adaptive Experimental Design and Active Learning in the Real World\nTowards Scalable Identification of Brick Kilns from Satellite\nImagery with Active Learning\nAditi Agarwal, Suraj Jaiswal, Madhav Kanda, Dhruv Patel, Rishabh Mondal,\nVannsh Jani, Zeel B Patel, Nipun Batra\nIndian Institute of Technology, Gandhinagar\nSarath Guttikunda\nUrban EmissionsAbstract\nAir pollution is a leading cause of death globally, especially in south-east Asia. Brick 1\nproduction contributes significantly to air pollution. However, unlike other sources such 2\nas power plants, brick production is unregulated and thus hard to monitor. Traditional 3\nsurvey-based methods for kiln identification are time and resource-intensive. Similarly, it 4\nis time-consuming for air quality experts to annotate satellite imagery manually. Recently, 5\ncomputer vision machine learning models have helped reduce labeling costs, but they need 6' metadata={'source': '/content/drive/MyDrive/Colab Notebooks/langchain/docs/NeurIPS23_Workshop_Accepted_BrickKilns.pdf', 'page': 0} 

</code></pre>
</div>
</div>
<div id="cell-28" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_qa_chain(llm_mistral, chain_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stuff"</span>)</span>
<span id="cb28-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.run(input_documents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>top_docs, question<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>query)</span></code></pre></div>
</div>
<div id="cell-29" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:109}}" data-outputid="fa88821f-7845-41c5-cef1-9fbd2ee5ce0a" data-execution_count="17">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">response</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>"Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.\n\n1000 images, and after manual inspection, we found 996 of them to be correctly classified. 281\nThus through our approach we were able to reduce the annotation 282\nBrick Kilns\nIndia\nFigure A: We initially manually located approximately 189 brick kilns in the Indo-Gangetic\nplain. Subsequently, our model automatically detected an additional 704 new brick kilns in\nthe vicinity of the manually identified ones, as illustrated in the figure\nA.4 Deployment 283\nWe deploy a web application on Streamlit, as depicted in Figure 1, offering users an acces- 284\nsible and interactive interface for brick kiln detection in a given area of interest. Once the 285\nbounding box is defined, our model identifies brick kilns within this area and provides the 286\ncoordinates of the brick kilns. Grad-CAM (Selvaraju et al., 2019) visuals accompany these 287\non the original brick kiln image to highlight the areas where the model focuses. 288\n11\n\nWe show that using our methods, we need to annotate only a small number of images to 39\nobtain brick kiln locations in a new region. On performing active learning on the Indian 40\ndataset, we concluded that we needed 70% fewer samples than random to achieve a similar 41\nF1 score. We also find that we could reach 97% of optimal F1 score with active learning, 42\nwhereas random could reach only 90% with the same number of samples labeled. 43\nFinally, we have developed a web application2offering users an accessible and interactive 44\ninterface for brick kiln detection in a given region of interest. Figure 1 shows our web 45\napplication which takes in bounding boxes of the area of interest and detects the kilns 46\npresent in the region while also showing Grad-CAM (Selvaraju et al., 2019) visuals to 47\nhighlight the focus area of the model. Our work is fully reproducible, and we intend to 48\nrelease the scripts and data upon acceptance. 49\n2. Dataset 50\n\nhighly populous region characterised with alarming levels of air pollution. Additionally, this 58\nregion is located in the highly fertile Indo-Gangetic plain which it a hotspot for production 59\nof bricks. The dataset also contains 2000 non-brick kiln images from structures visually 60\nsimilar to brick kilns to make the dataset more challenging and our model robust. These 61\n2.https://brick-kilns-detector.streamlit.app/\n2\n\n•In our current work, we only looked at the binary classification task. Drawing inspiration 155\nfrom (Lee et al., 2021), we plan to additionally localize the kilns in the image and extend 156\nour active learning pipeline towards multiple objectives: localization and classification. 157\n•Our current work treated the classification problem as a binary classification task. In the 158\nfuture, we plan to study this formulation as a one-class task. Correspondingly, we also 159\nplan to look at specialized losses such as the focal losses (Lin et al., 2017). 160\n6. Conclusion 161\nOur goal was to develop a scalable method to detect brick kilns. We conclude from our 162\nresults that satellite data can be used to detect brick kilns accurately. Further, we conclude 163\nthat we can develop accurate models by actively annotating images from the target region. 164\nWe believe that our work will likely benefit key stakeholders such as scientists building 165\n\nNeurIPS 2023 Workshop on Adaptive Experimental Design and Active Learning in the Real World\nTowards Scalable Identification of Brick Kilns from Satellite\nImagery with Active Learning\nAditi Agarwal, Suraj Jaiswal, Madhav Kanda, Dhruv Patel, Rishabh Mondal,\nVannsh Jani, Zeel B Patel, Nipun Batra\nIndian Institute of Technology, Gandhinagar\nSarath Guttikunda\nUrban EmissionsAbstract\nAir pollution is a leading cause of death globally, especially in south-east Asia. Brick 1\nproduction contributes significantly to air pollution. However, unlike other sources such 2\nas power plants, brick production is unregulated and thus hard to monitor. Traditional 3\nsurvey-based methods for kiln identification are time and resource-intensive. Similarly, it 4\nis time-consuming for air quality experts to annotate satellite imagery manually. Recently, 5\ncomputer vision machine learning models have helped reduce labeling costs, but they need 6\n\nQuestion: What is performance of modele on detecting brick kilns\nHelpful Answer: The model was able to reduce the annotation of 281 images to 282."</code></pre>
</div>
</div>
<div id="cell-30" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="5786e44f-0559-4545-a422-aab19a06c9db" data-execution_count="18">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">split_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Question:"</span>)</span>
<span id="cb31-2">question_part <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split_text[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Helpful Answer:"</span>)</span>
<span id="cb31-3"></span>
<span id="cb31-4">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> question_part[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].strip()</span>
<span id="cb31-5">helpful_answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> question_part[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].strip()</span>
<span id="cb31-6"></span>
<span id="cb31-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Question:"</span>, question)</span>
<span id="cb31-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Helpful Answer:"</span>, helpful_answer)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Question: What is performance of modele on detecting brick kilns
Helpful Answer: The model was able to reduce the annotation of 281 images to 282.</code></pre>
</div>
</div>
</section>
</section>
<section id="hypothetical-document-embeddingshyde" class="level1">
<h1>Hypothetical Document Embeddings~(HyDE)</h1>
<p>While the Retrieval-Augmented Generation (RAG) framework significantly enhances the capabilities of Large Language Models (LLMs) by integrating external knowledge sources, it has certain limitations that the Hypothetical Document Embeddings (HyDE) approach aims to address. Here are the key shortcomings of RAG that HyDE seeks to overcome:</p>
<p><strong>Dependence on Existing Knowledge Repositories</strong>:</p>
<ul>
<li>RAG relies on external databases or knowledge sources to augment its responses. This dependency means RAG’s effectiveness is limited by the availability, quality, and currency of these external sources. HyDE, on the other hand, generates hypothetical documents based on the query itself, allowing for more flexible and creative retrieval that doesn’t directly rely on pre-existing databases.</li>
</ul>
<p><strong>Challenges with Zero-Shot Learning</strong>:</p>
<ul>
<li>RAG’s performance can be hindered in zero-shot scenarios where it has to deal with queries or subjects not well-represented in its training data or external databases. HyDE addresses this by generating relevant content on-the-fly, which is then used to retrieve real documents, effectively bypassing the need for direct relevance labels or prior examples.</li>
</ul>
<p><strong>Updating and Maintenance of Knowledge Sources</strong>:</p>
<ul>
<li>For RAG to remain effective, the external databases it relies on must be continually updated and maintained. This can be resource-intensive and may still result in gaps in knowledge. HyDE’s approach of generating hypothetical documents sidesteps the need for maintaining vast, up-to-date knowledge repositories, as it dynamically creates the content needed for effective retrieval.</li>
</ul>
<p><strong>Handling of Novel and Niche Queries</strong>:</p>
<ul>
<li>RAG might struggle with highly novel or niche queries that require specialized knowledge not widely available in external sources. HyDE’s methodology of creating hypothetical documents tailored to each query allows for better handling of such cases, as it constructs a contextually relevant document that can then be used to identify similar real-world documents.</li>
</ul>
<p><a href="https://arxiv.org/abs/2212.10496">Paper link</a></p>
<p><img src="https://jaiswalsuraj487.github.io/publications_and_projects/images/rag_hyde_hugginface/hyde_architecture.png" width="900"></p>
<div id="cell-34" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="53f68d8d-2bea-4bcc-cac0-e417efc6016f" data-execution_count="19">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">query, base_answer</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>('What is performance of modele on detecting brick kilns',
 'The performance of the model on detecting brick kilns can be evaluated by calculating the accuracy, precision, recall, and F1 score. These metrics can be calculated by comparing the predicted results of the model with the actual results. The accuracy measures the percentage of correct predictions, while the precision measures the percentage of true positive predictions among all positive predictions. The recall measures the percentage of true positive predictions among all actual positive cases. The F1 score is the harmonic mean of precision and recall,')</code></pre>
</div>
</div>
<div id="cell-35" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="fafce7da-0ec3-46bb-c560-7bdaddf140df" data-execution_count="20">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">top_docs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db_hf.similarity_search(query<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>base_answer, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb35-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> top_docs:</span>
<span id="cb35-3">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(i,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>page_content='We show that using our methods, we need to annotate only a small number of images to 39\nobtain brick kiln locations in a new region. On performing active learning on the Indian 40\ndataset, we concluded that we needed 70% fewer samples than random to achieve a similar 41\nF1 score. We also find that we could reach 97% of optimal F1 score with active learning, 42\nwhereas random could reach only 90% with the same number of samples labeled. 43\nFinally, we have developed a web application2offering users an accessible and interactive 44\ninterface for brick kiln detection in a given region of interest. Figure 1 shows our web 45\napplication which takes in bounding boxes of the area of interest and detects the kilns 46\npresent in the region while also showing Grad-CAM (Selvaraju et al., 2019) visuals to 47\nhighlight the focus area of the model. Our work is fully reproducible, and we intend to 48\nrelease the scripts and data upon acceptance. 49\n2. Dataset 50' metadata={'source': '/content/drive/MyDrive/Colab Notebooks/langchain/docs/NeurIPS23_Workshop_Accepted_BrickKilns.pdf', 'page': 1} 


page_content='1000 images, and after manual inspection, we found 996 of them to be correctly classified. 281\nThus through our approach we were able to reduce the annotation 282\nBrick Kilns\nIndia\nFigure A: We initially manually located approximately 189 brick kilns in the Indo-Gangetic\nplain. Subsequently, our model automatically detected an additional 704 new brick kilns in\nthe vicinity of the manually identified ones, as illustrated in the figure\nA.4 Deployment 283\nWe deploy a web application on Streamlit, as depicted in Figure 1, offering users an acces- 284\nsible and interactive interface for brick kiln detection in a given area of interest. Once the 285\nbounding box is defined, our model identifies brick kilns within this area and provides the 286\ncoordinates of the brick kilns. Grad-CAM (Selvaraju et al., 2019) visuals accompany these 287\non the original brick kiln image to highlight the areas where the model focuses. 288\n11' metadata={'source': '/content/drive/MyDrive/Colab Notebooks/langchain/docs/NeurIPS23_Workshop_Accepted_BrickKilns.pdf', 'page': 10} 


page_content='(b)\n (c)\n (d)\nFigure 1: Screenshots from our web application that help detect brick kilns (a) Selecting the\ncoordinates of the bounding box (red rectangle) (b) Markers in the bounding box where the\nmodel predicts the existence of a brick kiln (c) Statistics of number of brick kilns detected,\ntheir coordinates and model’s predicted probabilities (d) Grad-CAM (Selvaraju et al., 2019)\nvisual showing where our model focuses on predicted brick kiln image (Best viewed in color)\n1. Introduction 14\nAir pollution kills seven million people worldwide, and 22% of casualties are only from 15\nIndia (UNEP, 2019). Annual average PM 2.5(Particulate matter of size ≤2.5µm) of 16\nIndia was 24 µg/m3in 2020, which is significantly higher than the annual WHO limit 17\nof 5 µg/m3(Guttikunda and Nishadh, 2022). Air quality researchers use physics-based 18\nsimulators such as CAMx1to model the air quality (Guttikunda et al., 2019) using an 19\ninventory of major sources. 20\n1.https://www.camx.com/\n1' metadata={'source': '/content/drive/MyDrive/Colab Notebooks/langchain/docs/NeurIPS23_Workshop_Accepted_BrickKilns.pdf', 'page': 0} 


page_content='maximise the information gained about the model parameters, i.e. maximise the mutual 97\ninformation between predictions and model posterior.It is mathematically defined as: 98\nI[y,θ|x,Dtrain] =H[y|x,Dtrain]−Ep(θ|Dtrain)[H[y|x,θ]]\nwith θthe model parameters and H[y|x,θ] is the entropy of ygiven model weights θ. 99\n3.Subset Scoring : We propose a new acquisition function to explicitly select the subset 100\nof images classified as brick kilns in each iteration. The intuition is to select the points 101\nthat are predicted as positive, but the model is not confident about them. Including 102\nsuch points may boost model’s performance for the positive class especially in case of 103\nclass imbalance. The function is defined as follows: 104\nS[y|x,Dtrain] =I(ˆy=c)·α[y|x,Dtrain] (2)\nwhere αcan be one of the acquisition functions discussed earlier. 105\n4.Random : This acquisition function is equivalent to choosing an image uniformly at 106' metadata={'source': '/content/drive/MyDrive/Colab Notebooks/langchain/docs/NeurIPS23_Workshop_Accepted_BrickKilns.pdf', 'page': 3} 


page_content='•In our current work, we only looked at the binary classification task. Drawing inspiration 155\nfrom (Lee et al., 2021), we plan to additionally localize the kilns in the image and extend 156\nour active learning pipeline towards multiple objectives: localization and classification. 157\n•Our current work treated the classification problem as a binary classification task. In the 158\nfuture, we plan to study this formulation as a one-class task. Correspondingly, we also 159\nplan to look at specialized losses such as the focal losses (Lin et al., 2017). 160\n6. Conclusion 161\nOur goal was to develop a scalable method to detect brick kilns. We conclude from our 162\nresults that satellite data can be used to detect brick kilns accurately. Further, we conclude 163\nthat we can develop accurate models by actively annotating images from the target region. 164\nWe believe that our work will likely benefit key stakeholders such as scientists building 165' metadata={'source': '/content/drive/MyDrive/Colab Notebooks/langchain/docs/NeurIPS23_Workshop_Accepted_BrickKilns.pdf', 'page': 5} 

</code></pre>
</div>
</div>
<div id="cell-36" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_qa_chain(llm_mistral, chain_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stuff"</span>)</span>
<span id="cb37-2">response_hyde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chain.run(input_documents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>top_docs, question<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>query)</span></code></pre></div>
</div>
<div id="cell-37" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:109}}" data-outputid="7df8ee0a-16f0-4411-8102-5f4905ebf6f1" data-execution_count="22">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">response_hyde</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>"Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.\n\nWe show that using our methods, we need to annotate only a small number of images to 39\nobtain brick kiln locations in a new region. On performing active learning on the Indian 40\ndataset, we concluded that we needed 70% fewer samples than random to achieve a similar 41\nF1 score. We also find that we could reach 97% of optimal F1 score with active learning, 42\nwhereas random could reach only 90% with the same number of samples labeled. 43\nFinally, we have developed a web application2offering users an accessible and interactive 44\ninterface for brick kiln detection in a given region of interest. Figure 1 shows our web 45\napplication which takes in bounding boxes of the area of interest and detects the kilns 46\npresent in the region while also showing Grad-CAM (Selvaraju et al., 2019) visuals to 47\nhighlight the focus area of the model. Our work is fully reproducible, and we intend to 48\nrelease the scripts and data upon acceptance. 49\n2. Dataset 50\n\n1000 images, and after manual inspection, we found 996 of them to be correctly classified. 281\nThus through our approach we were able to reduce the annotation 282\nBrick Kilns\nIndia\nFigure A: We initially manually located approximately 189 brick kilns in the Indo-Gangetic\nplain. Subsequently, our model automatically detected an additional 704 new brick kilns in\nthe vicinity of the manually identified ones, as illustrated in the figure\nA.4 Deployment 283\nWe deploy a web application on Streamlit, as depicted in Figure 1, offering users an acces- 284\nsible and interactive interface for brick kiln detection in a given area of interest. Once the 285\nbounding box is defined, our model identifies brick kilns within this area and provides the 286\ncoordinates of the brick kilns. Grad-CAM (Selvaraju et al., 2019) visuals accompany these 287\non the original brick kiln image to highlight the areas where the model focuses. 288\n11\n\n(b)\n (c)\n (d)\nFigure 1: Screenshots from our web application that help detect brick kilns (a) Selecting the\ncoordinates of the bounding box (red rectangle) (b) Markers in the bounding box where the\nmodel predicts the existence of a brick kiln (c) Statistics of number of brick kilns detected,\ntheir coordinates and model’s predicted probabilities (d) Grad-CAM (Selvaraju et al., 2019)\nvisual showing where our model focuses on predicted brick kiln image (Best viewed in color)\n1. Introduction 14\nAir pollution kills seven million people worldwide, and 22% of casualties are only from 15\nIndia (UNEP, 2019). Annual average PM 2.5(Particulate matter of size ≤2.5µm) of 16\nIndia was 24 µg/m3in 2020, which is significantly higher than the annual WHO limit 17\nof 5 µg/m3(Guttikunda and Nishadh, 2022). Air quality researchers use physics-based 18\nsimulators such as CAMx1to model the air quality (Guttikunda et al., 2019) using an 19\ninventory of major sources. 20\n1.https://www.camx.com/\n1\n\nmaximise the information gained about the model parameters, i.e. maximise the mutual 97\ninformation between predictions and model posterior.It is mathematically defined as: 98\nI[y,θ|x,Dtrain] =H[y|x,Dtrain]−Ep(θ|Dtrain)[H[y|x,θ]]\nwith θthe model parameters and H[y|x,θ] is the entropy of ygiven model weights θ. 99\n3.Subset Scoring : We propose a new acquisition function to explicitly select the subset 100\nof images classified as brick kilns in each iteration. The intuition is to select the points 101\nthat are predicted as positive, but the model is not confident about them. Including 102\nsuch points may boost model’s performance for the positive class especially in case of 103\nclass imbalance. The function is defined as follows: 104\nS[y|x,Dtrain] =I(ˆy=c)·α[y|x,Dtrain] (2)\nwhere αcan be one of the acquisition functions discussed earlier. 105\n4.Random : This acquisition function is equivalent to choosing an image uniformly at 106\n\n•In our current work, we only looked at the binary classification task. Drawing inspiration 155\nfrom (Lee et al., 2021), we plan to additionally localize the kilns in the image and extend 156\nour active learning pipeline towards multiple objectives: localization and classification. 157\n•Our current work treated the classification problem as a binary classification task. In the 158\nfuture, we plan to study this formulation as a one-class task. Correspondingly, we also 159\nplan to look at specialized losses such as the focal losses (Lin et al., 2017). 160\n6. Conclusion 161\nOur goal was to develop a scalable method to detect brick kilns. We conclude from our 162\nresults that satellite data can be used to detect brick kilns accurately. Further, we conclude 163\nthat we can develop accurate models by actively annotating images from the target region. 164\nWe believe that our work will likely benefit key stakeholders such as scientists building 165\n\nQuestion: What is performance of modele on detecting brick kilns\nHelpful Answer: The model was able to reduce the annotation of brick kilns from 189 to 704 through active learning, achieving a similar F1 score with 70% fewer samples. The model was able to reach 97% of optimal F1 score with active learning, whereas random could reach only 90% with the same number of samples labeled. The model was also able to detect brick kilns in a new region with only a small number of annotated"</code></pre>
</div>
</div>
<div id="cell-38" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="0d866bee-a10a-4067-cd64-8293d038b68b" data-execution_count="23">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">split_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response_hyde.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Question:"</span>)</span>
<span id="cb40-2">question_part <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split_text[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Helpful Answer:"</span>)</span>
<span id="cb40-3"></span>
<span id="cb40-4">question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> question_part[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].strip()</span>
<span id="cb40-5">helpful_answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> question_part[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].strip()</span>
<span id="cb40-6"></span>
<span id="cb40-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Question:"</span>, question)</span>
<span id="cb40-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Helpful Answer:"</span>, helpful_answer)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Question: What is performance of modele on detecting brick kilns
Helpful Answer: The model was able to reduce the annotation of brick kilns from 189 to 704 through active learning, achieving a similar F1 score with 70% fewer samples. The model was able to reach 97% of optimal F1 score with active learning, whereas random could reach only 90% with the same number of samples labeled. The model was also able to detect brick kilns in a new region with only a small number of annotated</code></pre>
</div>
</div>
</section>
<section id="comparison-of-without-rag-rag-and-hyde" class="level1">
<h1>Comparison of without RAG, RAG and HyDE</h1>
<p><em>Question</em>: What is performance of modele on detecting brick kilns</p>
<p><strong>Without RAG</strong>:</p>
<ul>
<li><em>Helpful Answer</em>: The performance of the model on detecting brick kilns can be evaluated by calculating the accuracy, precision, recall, and F1 score. These metrics can be calculated by comparing the predicted results of the model with the actual results. The accuracy measures the percentage of correct predictions, while the precision measures the percentage of true positive predictions among all positive predictions. The recall measures the percentage of true positive predictions among all actual positive cases. The F1 score is the harmonic mean of precision and recall,</li>
<li><em>Observation</em>: The response offers a general explanation of performance metrics (accuracy, precision, recall, F1 score) without directly addressing the specific query</li>
</ul>
<p><strong>With RAG</strong>:</p>
<ul>
<li><em>Helpful Answer</em>: The model was able to reduce the annotation of 281 images to 282.</li>
<li><em>Observation</em>: This approach yields a more specific answer by touching on the reduction of annotation effort, indicating an improvement. However, the response lacks comprehensive details</li>
</ul>
<p><strong>With HyDE</strong>:</p>
<ul>
<li><em>Helpful Answer</em>: The model was able to reduce the annotation of brick kilns from 189 to 704 through active learning, achieving a similar F1 score with 70% fewer samples. The model was able to reach 97% of optimal F1 score with active learning, whereas random could reach only 90% with the same number of samples labeled. The model was also able to detect brick kilns in a new region with only a small number of annotated</li>
<li><em>Observation</em>: The response from the HyDE-enhanced model is notably more detailed, providing concrete numbers, percentages, and a comparison of effectiveness through active learning.</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The development and integration of Retrieval-Augmented Generation (RAG) and Hypothetical Document Embeddings (HyDE) represent pivotal advancements in enhancing Large Language Models (LLMs). RAG addresses the challenges of accuracy and currency in LLM responses by grounding them in external knowledge, making it invaluable for tasks requiring up-to-date and verifiable information. Conversely, HyDE offers an ingenious solution to zero-shot learning challenges by generating hypothetical documents to facilitate the retrieval of relevant real-world documents, ideal for novel or niche queries.</p>


</section>

 ]]></description>
  <category>NLP</category>
  <guid>https://jaiswalsuraj487.github.io/publications_and_projects/data/rag_hyde_huggingface.html</guid>
  <pubDate>Mon, 26 Feb 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Image-to-Image for Climate Modelling using Auto-Encoders</title>
  <dc:creator>Suraj Jaiswal</dc:creator>
  <link>https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder.html</link>
  <description><![CDATA[ 




<p><img src="https://jaiswalsuraj487.github.io/publications_and_projects/images/autoencoder/camx.png" width="800"></p>
<p><a href="https://colab.research.google.com/github/jaiswalsuraj487/Climax_project_autoencoder/blob/main/Autoencoder.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"></a></p>
<p>We have implemented MLP autoencoder, CNN autoencoder, and UNET autoencoder for image to image prediction on Camx dataset.</p>
<p>Go through the <a href="https://github.com/jaiswalsuraj487/Climax_project_autoencoder/blob/main/Presentation.pdf">link</a> to see the presentation of the project to get the flow.</p>
<p>Git Repo: <a href="https://github.com/jaiswalsuraj487/Climax_project_autoencoder">link</a></p>
<div id="cell-3" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> xarray <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> xr</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch </span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> data</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> glob </span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from torchsummary import summary</span></span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchinfo <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> summary</span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> trange</span></code></pre></div>
</div>
<div id="cell-4" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span>)</span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># device = torch.device("cuda:2")</span></span>
<span id="cb2-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(device)</span>
<span id="cb2-4">current_device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> device <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#torch.cuda.current_device()</span></span>
<span id="cb2-5">device_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cuda.get_device_name(current_device)</span>
<span id="cb2-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Current GPU assigned: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>current_device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>cuda
Current GPU assigned: cuda, Name: Quadro RTX 5000</code></pre>
</div>
</div>
<p>Consider it a prediction task, use any channel like pressure and/or wind speed inputs to start with, because they are the indicators of horizontal movement of air pollution. Multiple inputs can go as multiple channels of images similar to RGB. Output can be P25 or P10 in cam 120hr files.</p>
<div id="cell-6" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_latitudes():</span>
<span id="cb4-2">    lat_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">76.8499984741211</span></span>
<span id="cb4-3">    lat_step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.009999999776482582</span></span>
<span id="cb4-4"></span>
<span id="cb4-5">    latitudes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]</span>
<span id="cb4-6"></span>
<span id="cb4-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>):</span>
<span id="cb4-8">        latitudes.append(lat_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>lat_step)</span>
<span id="cb4-9">    </span>
<span id="cb4-10">    latitudes.reverse()</span>
<span id="cb4-11"></span>
<span id="cb4-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> latitudes</span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_longitudes():</span>
<span id="cb4-15">    long_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">28.200000762939453</span></span>
<span id="cb4-16">    long_step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.009999999776482582</span></span>
<span id="cb4-17"></span>
<span id="cb4-18">    longitudes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]</span>
<span id="cb4-19"></span>
<span id="cb4-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>):</span>
<span id="cb4-21">        longitudes.append(long_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>long_step)</span>
<span id="cb4-22">    </span>
<span id="cb4-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># longitudes.reverse()</span></span>
<span id="cb4-24"></span>
<span id="cb4-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> longitudes</span>
<span id="cb4-26"></span>
<span id="cb4-27">latitudes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_latitudes()</span>
<span id="cb4-28">longitudes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_longitudes()</span>
<span id="cb4-29"></span>
<span id="cb4-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> create_plot(data,hour,var_name):</span>
<span id="cb4-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(data[var_name].shape) #shape (120, 1, 80, 80)</span></span>
<span id="cb4-32">    p10_hour<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data[var_name][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TSTEP'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>hour] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape (1, 80, 80)</span></span>
<span id="cb4-33">    p10_hour<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>p10_hour[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:,:] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape (80, 80)</span></span>
<span id="cb4-34">    plt.imshow(p10_hour)</span>
<span id="cb4-35">    plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>var_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> at hour '</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(hour))</span>
<span id="cb4-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.colorbar()</span></span>
<span id="cb4-37"></span>
<span id="cb4-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only show every latitude and longitude of end points</span></span>
<span id="cb4-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># round to 2 decimal places</span></span>
<span id="cb4-40">    top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>latitudes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-41">    top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(top,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) </span>
<span id="cb4-42">    bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>latitudes[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb4-43">    bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(bottom,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-44">    left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>longitudes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-45">    left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(left,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-46">    right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>longitudes[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb4-47">    right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(right,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-48"></span>
<span id="cb4-49">    plt.xticks([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">79</span>],[left,right])</span>
<span id="cb4-50">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Longitude'</span>)</span>
<span id="cb4-51">    plt.yticks([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">79</span>],[top,bottom])</span>
<span id="cb4-52">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Latitude'</span>)</span>
<span id="cb4-53">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.savefig(f'plots/120/{var_name}_{day}.png')</span></span>
<span id="cb4-54">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.close()</span></span></code></pre></div>
</div>
<section id="exploratory-data-analysis" class="level1">
<h1>Exploratory Data Analysis</h1>
<section id="visualizing-96-hr-files" class="level2">
<h2 class="anchored" data-anchor-id="visualizing-96-hr-files">Visualizing 96 hr files</h2>
<div id="cell-9" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">data_96 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xr.open_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/camxmet2d.delhi.20230717.96hours.nc'</span>)</span>
<span id="cb5-2">data_96_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data_96.to_dataframe().reset_index()</span></code></pre></div>
</div>
<div id="cell-10" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">data_96</span></code></pre></div>
<div class="cell-output cell-output-display">
<div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
<defs>
<symbol id="icon-database" viewbox="0 0 32 32">
<path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
<path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
<path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
</symbol>
<symbol id="icon-file-text2" viewbox="0 0 32 32">
<path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
<path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
</symbol>
</defs>
</svg>
<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
 *
 */

:root {
  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
  --xr-border-color: var(--jp-border-color2, #e0e0e0);
  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
  --xr-background-color: var(--jp-layout-color0, white);
  --xr-background-color-row-even: var(--jp-layout-color1, white);
  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
}

html[theme=dark],
body[data-theme=dark],
body.vscode-dark {
  --xr-font-color0: rgba(255, 255, 255, 1);
  --xr-font-color2: rgba(255, 255, 255, 0.54);
  --xr-font-color3: rgba(255, 255, 255, 0.38);
  --xr-border-color: #1F1F1F;
  --xr-disabled-color: #515151;
  --xr-background-color: #111111;
  --xr-background-color-row-even: #111111;
  --xr-background-color-row-odd: #313131;
}

.xr-wrap {
  display: block !important;
  min-width: 300px;
  max-width: 700px;
}

.xr-text-repr-fallback {
  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
  display: none;
}

.xr-header {
  padding-top: 6px;
  padding-bottom: 6px;
  margin-bottom: 4px;
  border-bottom: solid 1px var(--xr-border-color);
}

.xr-header > div,
.xr-header > ul {
  display: inline;
  margin-top: 0;
  margin-bottom: 0;
}

.xr-obj-type,
.xr-array-name {
  margin-left: 2px;
  margin-right: 10px;
}

.xr-obj-type {
  color: var(--xr-font-color2);
}

.xr-sections {
  padding-left: 0 !important;
  display: grid;
  grid-template-columns: 150px auto auto 1fr 20px 20px;
}

.xr-section-item {
  display: contents;
}

.xr-section-item input {
  display: none;
}

.xr-section-item input + label {
  color: var(--xr-disabled-color);
}

.xr-section-item input:enabled + label {
  cursor: pointer;
  color: var(--xr-font-color2);
}

.xr-section-item input:enabled + label:hover {
  color: var(--xr-font-color0);
}

.xr-section-summary {
  grid-column: 1;
  color: var(--xr-font-color2);
  font-weight: 500;
}

.xr-section-summary > span {
  display: inline-block;
  padding-left: 0.5em;
}

.xr-section-summary-in:disabled + label {
  color: var(--xr-font-color2);
}

.xr-section-summary-in + label:before {
  display: inline-block;
  content: '►';
  font-size: 11px;
  width: 15px;
  text-align: center;
}

.xr-section-summary-in:disabled + label:before {
  color: var(--xr-disabled-color);
}

.xr-section-summary-in:checked + label:before {
  content: '▼';
}

.xr-section-summary-in:checked + label > span {
  display: none;
}

.xr-section-summary,
.xr-section-inline-details {
  padding-top: 4px;
  padding-bottom: 4px;
}

.xr-section-inline-details {
  grid-column: 2 / -1;
}

.xr-section-details {
  display: none;
  grid-column: 1 / -1;
  margin-bottom: 5px;
}

.xr-section-summary-in:checked ~ .xr-section-details {
  display: contents;
}

.xr-array-wrap {
  grid-column: 1 / -1;
  display: grid;
  grid-template-columns: 20px auto;
}

.xr-array-wrap > label {
  grid-column: 1;
  vertical-align: top;
}

.xr-preview {
  color: var(--xr-font-color3);
}

.xr-array-preview,
.xr-array-data {
  padding: 0 5px !important;
  grid-column: 2;
}

.xr-array-data,
.xr-array-in:checked ~ .xr-array-preview {
  display: none;
}

.xr-array-in:checked ~ .xr-array-data,
.xr-array-preview {
  display: inline-block;
}

.xr-dim-list {
  display: inline-block !important;
  list-style: none;
  padding: 0 !important;
  margin: 0;
}

.xr-dim-list li {
  display: inline-block;
  padding: 0;
  margin: 0;
}

.xr-dim-list:before {
  content: '(';
}

.xr-dim-list:after {
  content: ')';
}

.xr-dim-list li:not(:last-child):after {
  content: ',';
  padding-right: 5px;
}

.xr-has-index {
  font-weight: bold;
}

.xr-var-list,
.xr-var-item {
  display: contents;
}

.xr-var-item > div,
.xr-var-item label,
.xr-var-item > .xr-var-name span {
  background-color: var(--xr-background-color-row-even);
  margin-bottom: 0;
}

.xr-var-item > .xr-var-name:hover span {
  padding-right: 5px;
}

.xr-var-list > li:nth-child(odd) > div,
.xr-var-list > li:nth-child(odd) > label,
.xr-var-list > li:nth-child(odd) > .xr-var-name span {
  background-color: var(--xr-background-color-row-odd);
}

.xr-var-name {
  grid-column: 1;
}

.xr-var-dims {
  grid-column: 2;
}

.xr-var-dtype {
  grid-column: 3;
  text-align: right;
  color: var(--xr-font-color2);
}

.xr-var-preview {
  grid-column: 4;
}

.xr-index-preview {
  grid-column: 2 / 5;
  color: var(--xr-font-color2);
}

.xr-var-name,
.xr-var-dims,
.xr-var-dtype,
.xr-preview,
.xr-attrs dt {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  padding-right: 10px;
}

.xr-var-name:hover,
.xr-var-dims:hover,
.xr-var-dtype:hover,
.xr-attrs dt:hover {
  overflow: visible;
  width: auto;
  z-index: 1;
}

.xr-var-attrs,
.xr-var-data,
.xr-index-data {
  display: none;
  background-color: var(--xr-background-color) !important;
  padding-bottom: 5px !important;
}

.xr-var-attrs-in:checked ~ .xr-var-attrs,
.xr-var-data-in:checked ~ .xr-var-data,
.xr-index-data-in:checked ~ .xr-index-data {
  display: block;
}

.xr-var-data > table {
  float: right;
}

.xr-var-name span,
.xr-var-data,
.xr-index-name div,
.xr-index-data,
.xr-attrs {
  padding-left: 25px !important;
}

.xr-attrs,
.xr-var-attrs,
.xr-var-data,
.xr-index-data {
  grid-column: 1 / -1;
}

dl.xr-attrs {
  padding: 0;
  margin: 0;
  display: grid;
  grid-template-columns: 125px auto;
}

.xr-attrs dt,
.xr-attrs dd {
  padding: 0;
  margin: 0;
  float: left;
  padding-right: 10px;
  width: auto;
}

.xr-attrs dt {
  font-weight: normal;
  grid-column: 1;
}

.xr-attrs dt:hover span {
  display: inline-block;
  background: var(--xr-background-color);
  padding-right: 10px;
}

.xr-attrs dd {
  grid-column: 2;
  white-space: pre-wrap;
  word-break: break-all;
}

.xr-icon-database,
.xr-icon-file-text2,
.xr-no-icon {
  display: inline-block;
  vertical-align: middle;
  width: 1em;
  height: 1.5em !important;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
}
</style><pre class="xr-text-repr-fallback">&lt;xarray.Dataset&gt;
Dimensions:     (TSTEP: 96, VAR: 14, DATE-TIME: 2, LAY: 1, ROW: 80, COL: 80)
Dimensions without coordinates: TSTEP, VAR, DATE-TIME, LAY, ROW, COL
Data variables: (12/15)
    TFLAG       (TSTEP, VAR, DATE-TIME) int32 2023198 0 ... 2023201 230000
    TSURF_K     (TSTEP, LAY, ROW, COL) float32 302.3 302.3 302.3 ... 300.6 301.2
    SNOWEW_M    (TSTEP, LAY, ROW, COL) float32 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0
    SNOWAGE_HR  (TSTEP, LAY, ROW, COL) float32 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0
    PRATE_MMpH  (TSTEP, LAY, ROW, COL) float32 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0
    CLOUD_OD    (TSTEP, LAY, ROW, COL) float32 62.24 61.67 61.1 ... 37.1 36.78
    ...          ...
    SWSFC_WpM2  (TSTEP, LAY, ROW, COL) float32 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0
    SOLM_M3pM3  (TSTEP, LAY, ROW, COL) float32 0.3131 0.3114 ... 0.3278 0.3292
    CLDTOP_KM   (TSTEP, LAY, ROW, COL) float32 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0
    CAPE        (TSTEP, LAY, ROW, COL) float32 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0
    PBL_WRF_M   (TSTEP, LAY, ROW, COL) float32 17.21 17.21 17.21 ... 94.4 120.0
    PBL_YSU_M   (TSTEP, LAY, ROW, COL) float32 17.21 17.21 17.21 ... 64.43 94.71
Attributes: (12/33)
    IOAPI_VERSION:  $Id: @(#) ioapi library version 3.0 $                    ...
    EXEC_ID:        ????????????????                                         ...
    FTYPE:          1
    CDATE:          2023198
    CTIME:          73941
    WDATE:          2023198
    ...             ...
    VGLVLS:         [0. 0.]
    GDNAM:          ????????????????
    UPNAM:          CAMx2IOAPI      
    VAR-LIST:       TSURF_K         SNOWEW_M        SNOWAGE_HR      PRATE_MMp...
    FILEDESC:       I/O API formatted CAMx AVRG output                       ...
    HISTORY:        </pre><div class="xr-wrap" style="display:none"><div class="xr-header"><div class="xr-obj-type">xarray.Dataset</div></div><ul class="xr-sections"><li class="xr-section-item"><input id="section-18efa3c0-582b-4ecd-9fa8-10e5a242d197" class="xr-section-summary-in" type="checkbox" disabled=""><label for="section-18efa3c0-582b-4ecd-9fa8-10e5a242d197" class="xr-section-summary" title="Expand/collapse section">Dimensions:</label><div class="xr-section-inline-details"><ul class="xr-dim-list"><li><span>TSTEP</span>: 96</li><li><span>VAR</span>: 14</li><li><span>DATE-TIME</span>: 2</li><li><span>LAY</span>: 1</li><li><span>ROW</span>: 80</li><li><span>COL</span>: 80</li></ul></div><div class="xr-section-details"></div></li><li class="xr-section-item"><input id="section-cd67a78f-c112-4829-bd09-e15d76b399d2" class="xr-section-summary-in" type="checkbox" disabled=""><label for="section-cd67a78f-c112-4829-bd09-e15d76b399d2" class="xr-section-summary" title="Expand/collapse section">Coordinates: <span>(0)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><ul class="xr-var-list"></ul></div></li><li class="xr-section-item"><input id="section-898e5c1a-c6b8-4a43-8fe1-afc1d605d8be" class="xr-section-summary-in" type="checkbox"><label for="section-898e5c1a-c6b8-4a43-8fe1-afc1d605d8be" class="xr-section-summary">Data variables: <span>(15)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><ul class="xr-var-list"><li class="xr-var-item"><div class="xr-var-name"><span>TFLAG</span></div><div class="xr-var-dims">(TSTEP, VAR, DATE-TIME)</div><div class="xr-var-dtype">int32</div><div class="xr-var-preview xr-preview">2023198 0 ... 2023201 230000</div><input id="attrs-5b5c8f8e-4ad1-4ff2-be46-ae8c9f1d8ab9" class="xr-var-attrs-in" type="checkbox"><label for="attrs-5b5c8f8e-4ad1-4ff2-be46-ae8c9f1d8ab9" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-d4722ae2-6905-4a71-a5b1-3d67a6979563" class="xr-var-data-in" type="checkbox"><label for="data-d4722ae2-6905-4a71-a5b1-3d67a6979563" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"><dt><span>units :</span></dt><dd>&lt;YYYYDDD,HHMMSS&gt;</dd><dt><span>long_name :</span></dt><dd>TFLAG           </dd><dt><span>var_desc :</span></dt><dd>Timestep-valid flags:  (1) YYYYDDD or (2) HHMMSS                                </dd></dl></div><div class="xr-var-data"><pre>array([[[2023198,       0],
        [2023198,       0],
        ...,
        [2023198,       0],
        [2023198,       0]],

       [[2023198,   10000],
        [2023198,   10000],
        ...,
        [2023198,   10000],
        [2023198,   10000]],

       ...,

       [[2023201,  220000],
        [2023201,  220000],
        ...,
        [2023201,  220000],
        [2023201,  220000]],

       [[2023201,  230000],
        [2023201,  230000],
        ...,
        [2023201,  230000],
        [2023201,  230000]]], dtype=int32)</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span>TSURF_K</span></div><div class="xr-var-dims">(TSTEP, LAY, ROW, COL)</div><div class="xr-var-dtype">float32</div><div class="xr-var-preview xr-preview">302.3 302.3 302.3 ... 300.6 301.2</div><input id="attrs-dd1f4ed6-b0d0-48f6-ba94-e44794c999f2" class="xr-var-attrs-in" type="checkbox"><label for="attrs-dd1f4ed6-b0d0-48f6-ba94-e44794c999f2" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-3f3bc55f-c6d2-4914-acb3-66a64fca9f40" class="xr-var-data-in" type="checkbox"><label for="data-3f3bc55f-c6d2-4914-acb3-66a64fca9f40" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"><dt><span>long_name :</span></dt><dd>TSURF_K         </dd><dt><span>units :</span></dt><dd>ppmV            </dd><dt><span>var_desc :</span></dt><dd>VARIABLE TSURF_K                                                                </dd></dl></div><div class="xr-var-data"><pre>array([[[[302.31464, ..., 301.9288 ],
         ...,
         [301.28806, ..., 301.65118]]],


       ...,


       [[[299.001  , ..., 299.86826],
         ...,
         [299.08127, ..., 301.1575 ]]]], dtype=float32)</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span>SNOWEW_M</span></div><div class="xr-var-dims">(TSTEP, LAY, ROW, COL)</div><div class="xr-var-dtype">float32</div><div class="xr-var-preview xr-preview">0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0</div><input id="attrs-077a61d6-d268-4e78-9c51-c32a80316f72" class="xr-var-attrs-in" type="checkbox"><label for="attrs-077a61d6-d268-4e78-9c51-c32a80316f72" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-fb990580-7fc9-4209-b7ff-172a52ec7534" class="xr-var-data-in" type="checkbox"><label for="data-fb990580-7fc9-4209-b7ff-172a52ec7534" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"><dt><span>long_name :</span></dt><dd>SNOWEW_M        </dd><dt><span>units :</span></dt><dd>ppmV            </dd><dt><span>var_desc :</span></dt><dd>VARIABLE SNOWEW_M                                                               </dd></dl></div><div class="xr-var-data"><pre>array([[[[0., ..., 0.],
         ...,
         [0., ..., 0.]]],


       ...,


       [[[0., ..., 0.],
         ...,
         [0., ..., 0.]]]], dtype=float32)</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span>SNOWAGE_HR</span></div><div class="xr-var-dims">(TSTEP, LAY, ROW, COL)</div><div class="xr-var-dtype">float32</div><div class="xr-var-preview xr-preview">0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0</div><input id="attrs-8c7cc109-5432-47ad-b527-cb57765f344f" class="xr-var-attrs-in" type="checkbox"><label for="attrs-8c7cc109-5432-47ad-b527-cb57765f344f" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-ebbb7f10-d6ac-4122-99cd-5b5b0d64ee8f" class="xr-var-data-in" type="checkbox"><label for="data-ebbb7f10-d6ac-4122-99cd-5b5b0d64ee8f" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"><dt><span>long_name :</span></dt><dd>SNOWAGE_HR      </dd><dt><span>units :</span></dt><dd>ppmV            </dd><dt><span>var_desc :</span></dt><dd>VARIABLE SNOWAGE_HR                                                             </dd></dl></div><div class="xr-var-data"><pre>array([[[[0., ..., 0.],
         ...,
         [0., ..., 0.]]],


       ...,


       [[[0., ..., 0.],
         ...,
         [0., ..., 0.]]]], dtype=float32)</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span>PRATE_MMpH</span></div><div class="xr-var-dims">(TSTEP, LAY, ROW, COL)</div><div class="xr-var-dtype">float32</div><div class="xr-var-preview xr-preview">0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0</div><input id="attrs-f4ce6126-e130-48c7-b48a-667a9cfeeff5" class="xr-var-attrs-in" type="checkbox"><label for="attrs-f4ce6126-e130-48c7-b48a-667a9cfeeff5" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-2541ecc1-ab12-4c2f-9c29-b0d9845314e3" class="xr-var-data-in" type="checkbox"><label for="data-2541ecc1-ab12-4c2f-9c29-b0d9845314e3" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"><dt><span>long_name :</span></dt><dd>PRATE_MMpH      </dd><dt><span>units :</span></dt><dd>ppmV            </dd><dt><span>var_desc :</span></dt><dd>VARIABLE PRATE_MMpH                                                             </dd></dl></div><div class="xr-var-data"><pre>array([[[[0., ..., 0.],
         ...,
         [0., ..., 0.]]],


       ...,


       [[[0., ..., 0.],
         ...,
         [0., ..., 0.]]]], dtype=float32)</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span>CLOUD_OD</span></div><div class="xr-var-dims">(TSTEP, LAY, ROW, COL)</div><div class="xr-var-dtype">float32</div><div class="xr-var-preview xr-preview">62.24 61.67 61.1 ... 37.1 36.78</div><input id="attrs-7d5afbd7-676c-42fa-8439-febf3a13b2e2" class="xr-var-attrs-in" type="checkbox"><label for="attrs-7d5afbd7-676c-42fa-8439-febf3a13b2e2" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-5c96eb9e-a444-4d76-9b20-541046eaf3b7" class="xr-var-data-in" type="checkbox"><label for="data-5c96eb9e-a444-4d76-9b20-541046eaf3b7" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"><dt><span>long_name :</span></dt><dd>CLOUD_OD        </dd><dt><span>units :</span></dt><dd>ppmV            </dd><dt><span>var_desc :</span></dt><dd>VARIABLE CLOUD_OD                                                               </dd></dl></div><div class="xr-var-data"><pre>array([[[[62.239326, ..., 30.003962],
         ...,
         [54.13987 , ..., 43.78004 ]]],


       ...,


       [[[29.166183, ..., 58.07322 ],
         ...,
         [32.563763, ..., 36.776646]]]], dtype=float32)</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span>U10_MpS</span></div><div class="xr-var-dims">(TSTEP, LAY, ROW, COL)</div><div class="xr-var-dtype">float32</div><div class="xr-var-preview xr-preview">1.63 1.585 1.54 ... 0.8064 0.8805</div><input id="attrs-468a3206-2b3e-48d8-afa4-ae18bcd19d54" class="xr-var-attrs-in" type="checkbox"><label for="attrs-468a3206-2b3e-48d8-afa4-ae18bcd19d54" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-4e5f7f83-771d-426e-8803-5b2c79adfcab" class="xr-var-data-in" type="checkbox"><label for="data-4e5f7f83-771d-426e-8803-5b2c79adfcab" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"><dt><span>long_name :</span></dt><dd>U10_MpS         </dd><dt><span>units :</span></dt><dd>ppmV            </dd><dt><span>var_desc :</span></dt><dd>VARIABLE U10_MpS                                                                </dd></dl></div><div class="xr-var-data"><pre>array([[[[ 1.630373, ..., -0.434344],
         ...,
         [-0.544169, ..., -2.070899]]],


       ...,


       [[[ 0.569056, ...,  0.423629],
         ...,
         [ 0.774855, ...,  0.880477]]]], dtype=float32)</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span>V10_MpS</span></div><div class="xr-var-dims">(TSTEP, LAY, ROW, COL)</div><div class="xr-var-dtype">float32</div><div class="xr-var-preview xr-preview">0.1487 0.158 ... -1.202 -1.152</div><input id="attrs-16dc3216-e129-459c-832f-8c35c018ab29" class="xr-var-attrs-in" type="checkbox"><label for="attrs-16dc3216-e129-459c-832f-8c35c018ab29" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-b27b7742-99b5-4549-b303-780abae2ce46" class="xr-var-data-in" type="checkbox"><label for="data-b27b7742-99b5-4549-b303-780abae2ce46" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"><dt><span>long_name :</span></dt><dd>V10_MpS         </dd><dt><span>units :</span></dt><dd>ppmV            </dd><dt><span>var_desc :</span></dt><dd>VARIABLE V10_MpS                                                                </dd></dl></div><div class="xr-var-data"><pre>array([[[[ 0.148722, ...,  0.630212],
         ...,
         [-0.328182, ...,  0.625002]]],


       ...,


       [[[ 0.040896, ..., -1.492097],
         ...,
         [-0.365465, ..., -1.152316]]]], dtype=float32)</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span>T2_K</span></div><div class="xr-var-dims">(TSTEP, LAY, ROW, COL)</div><div class="xr-var-dtype">float32</div><div class="xr-var-preview xr-preview">302.6 302.6 302.6 ... 300.4 300.8</div><input id="attrs-847006e0-bcf3-4767-a309-6800dabbbdc2" class="xr-var-attrs-in" type="checkbox"><label for="attrs-847006e0-bcf3-4767-a309-6800dabbbdc2" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-b44cbe17-765f-43fd-97e9-43d0830aa3ba" class="xr-var-data-in" type="checkbox"><label for="data-b44cbe17-765f-43fd-97e9-43d0830aa3ba" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"><dt><span>long_name :</span></dt><dd>T2_K            </dd><dt><span>units :</span></dt><dd>ppmV            </dd><dt><span>var_desc :</span></dt><dd>VARIABLE T2_K                                                                   </dd></dl></div><div class="xr-var-data"><pre>array([[[[302.57184, ..., 302.88318],
         ...,
         [301.1836 , ..., 302.19128]]],


       ...,


       [[[299.17767, ..., 300.1615 ],
         ...,
         [299.30466, ..., 300.77878]]]], dtype=float32)</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span>SWSFC_WpM2</span></div><div class="xr-var-dims">(TSTEP, LAY, ROW, COL)</div><div class="xr-var-dtype">float32</div><div class="xr-var-preview xr-preview">0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0</div><input id="attrs-a14407c4-0b55-4673-a7c7-1689050a2cc5" class="xr-var-attrs-in" type="checkbox"><label for="attrs-a14407c4-0b55-4673-a7c7-1689050a2cc5" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-df9f3217-4a6b-4d9f-90c0-a7bd1b2694d3" class="xr-var-data-in" type="checkbox"><label for="data-df9f3217-4a6b-4d9f-90c0-a7bd1b2694d3" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"><dt><span>long_name :</span></dt><dd>SWSFC_WpM2      </dd><dt><span>units :</span></dt><dd>ppmV            </dd><dt><span>var_desc :</span></dt><dd>VARIABLE SWSFC_WpM2                                                             </dd></dl></div><div class="xr-var-data"><pre>array([[[[0., ..., 0.],
         ...,
         [0., ..., 0.]]],


       ...,


       [[[0., ..., 0.],
         ...,
         [0., ..., 0.]]]], dtype=float32)</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span>SOLM_M3pM3</span></div><div class="xr-var-dims">(TSTEP, LAY, ROW, COL)</div><div class="xr-var-dtype">float32</div><div class="xr-var-preview xr-preview">0.3131 0.3114 ... 0.3278 0.3292</div><input id="attrs-bb30f667-16ab-4af2-a23b-babc62bf2db3" class="xr-var-attrs-in" type="checkbox"><label for="attrs-bb30f667-16ab-4af2-a23b-babc62bf2db3" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-3c860109-d9ac-4b25-852d-2ea228add1df" class="xr-var-data-in" type="checkbox"><label for="data-3c860109-d9ac-4b25-852d-2ea228add1df" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"><dt><span>long_name :</span></dt><dd>SOLM_M3pM3      </dd><dt><span>units :</span></dt><dd>ppmV            </dd><dt><span>var_desc :</span></dt><dd>VARIABLE SOLM_M3pM3                                                             </dd></dl></div><div class="xr-var-data"><pre>array([[[[0.313128, ..., 0.271955],
         ...,
         [0.306425, ..., 0.287092]]],


       ...,


       [[[0.312972, ..., 0.263079],
         ...,
         [0.29241 , ..., 0.32918 ]]]], dtype=float32)</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span>CLDTOP_KM</span></div><div class="xr-var-dims">(TSTEP, LAY, ROW, COL)</div><div class="xr-var-dtype">float32</div><div class="xr-var-preview xr-preview">0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0</div><input id="attrs-3d05e78f-7042-400d-83d1-dc5053845837" class="xr-var-attrs-in" type="checkbox"><label for="attrs-3d05e78f-7042-400d-83d1-dc5053845837" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-01fbebc1-21c4-419d-b9b6-77657bc94e72" class="xr-var-data-in" type="checkbox"><label for="data-01fbebc1-21c4-419d-b9b6-77657bc94e72" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"><dt><span>long_name :</span></dt><dd>CLDTOP_KM       </dd><dt><span>units :</span></dt><dd>ppmV            </dd><dt><span>var_desc :</span></dt><dd>VARIABLE CLDTOP_KM                                                              </dd></dl></div><div class="xr-var-data"><pre>array([[[[0., ..., 0.],
         ...,
         [0., ..., 0.]]],


       ...,


       [[[0., ..., 0.],
         ...,
         [0., ..., 0.]]]], dtype=float32)</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span>CAPE</span></div><div class="xr-var-dims">(TSTEP, LAY, ROW, COL)</div><div class="xr-var-dtype">float32</div><div class="xr-var-preview xr-preview">0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0</div><input id="attrs-f15642b5-e840-49af-9852-7a85a5192908" class="xr-var-attrs-in" type="checkbox"><label for="attrs-f15642b5-e840-49af-9852-7a85a5192908" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-110bf01d-b159-4125-8be3-0cce91506a4d" class="xr-var-data-in" type="checkbox"><label for="data-110bf01d-b159-4125-8be3-0cce91506a4d" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"><dt><span>long_name :</span></dt><dd>CAPE            </dd><dt><span>units :</span></dt><dd>ppmV            </dd><dt><span>var_desc :</span></dt><dd>VARIABLE CAPE                                                                   </dd></dl></div><div class="xr-var-data"><pre>array([[[[0., ..., 0.],
         ...,
         [0., ..., 0.]]],


       ...,


       [[[0., ..., 0.],
         ...,
         [0., ..., 0.]]]], dtype=float32)</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span>PBL_WRF_M</span></div><div class="xr-var-dims">(TSTEP, LAY, ROW, COL)</div><div class="xr-var-dtype">float32</div><div class="xr-var-preview xr-preview">17.21 17.21 17.21 ... 94.4 120.0</div><input id="attrs-fc80f450-69e8-4656-8020-b169af29f6c7" class="xr-var-attrs-in" type="checkbox"><label for="attrs-fc80f450-69e8-4656-8020-b169af29f6c7" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-8d6709fe-c0e5-4195-b74f-148ea917e4c6" class="xr-var-data-in" type="checkbox"><label for="data-8d6709fe-c0e5-4195-b74f-148ea917e4c6" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"><dt><span>long_name :</span></dt><dd>PBL_WRF_M       </dd><dt><span>units :</span></dt><dd>ppmV            </dd><dt><span>var_desc :</span></dt><dd>VARIABLE PBL_WRF_M                                                              </dd></dl></div><div class="xr-var-data"><pre>array([[[[ 17.212452, ...,  17.253763],
         ...,
         [ 17.153704, ...,  17.189987]]],


       ...,


       [[[ 33.101303, ...,  30.475212],
         ...,
         [ 24.450672, ..., 120.012794]]]], dtype=float32)</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span>PBL_YSU_M</span></div><div class="xr-var-dims">(TSTEP, LAY, ROW, COL)</div><div class="xr-var-dtype">float32</div><div class="xr-var-preview xr-preview">17.21 17.21 17.21 ... 64.43 94.71</div><input id="attrs-a0f2fbf6-1e83-4f7d-a9e7-ccb0be57a3ad" class="xr-var-attrs-in" type="checkbox"><label for="attrs-a0f2fbf6-1e83-4f7d-a9e7-ccb0be57a3ad" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-6524361e-f709-4afd-85de-c648f1b46ec5" class="xr-var-data-in" type="checkbox"><label for="data-6524361e-f709-4afd-85de-c648f1b46ec5" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"><dt><span>long_name :</span></dt><dd>PBL_YSU_M       </dd><dt><span>units :</span></dt><dd>ppmV            </dd><dt><span>var_desc :</span></dt><dd>VARIABLE PBL_YSU_M                                                              </dd></dl></div><div class="xr-var-data"><pre>array([[[[17.212452, ..., 17.253763],
         ...,
         [17.153704, ..., 17.189987]]],


       ...,


       [[[17.060207, ..., 17.152937],
         ...,
         [17.07223 , ..., 94.71051 ]]]], dtype=float32)</pre></div></li></ul></div></li><li class="xr-section-item"><input id="section-52017f9e-61ef-4b3f-b821-96b88dbb719b" class="xr-section-summary-in" type="checkbox" disabled=""><label for="section-52017f9e-61ef-4b3f-b821-96b88dbb719b" class="xr-section-summary" title="Expand/collapse section">Indexes: <span>(0)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><ul class="xr-var-list"></ul></div></li><li class="xr-section-item"><input id="section-eca7ea67-f310-41a6-914f-bffc8d7b1293" class="xr-section-summary-in" type="checkbox"><label for="section-eca7ea67-f310-41a6-914f-bffc8d7b1293" class="xr-section-summary">Attributes: <span>(33)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><dl class="xr-attrs"><dt><span>IOAPI_VERSION :</span></dt><dd>$Id: @(#) ioapi library version 3.0 $                                           </dd><dt><span>EXEC_ID :</span></dt><dd>????????????????                                                                </dd><dt><span>FTYPE :</span></dt><dd>1</dd><dt><span>CDATE :</span></dt><dd>2023198</dd><dt><span>CTIME :</span></dt><dd>73941</dd><dt><span>WDATE :</span></dt><dd>2023198</dd><dt><span>WTIME :</span></dt><dd>73941</dd><dt><span>SDATE :</span></dt><dd>2023198</dd><dt><span>STIME :</span></dt><dd>0</dd><dt><span>TSTEP :</span></dt><dd>10000</dd><dt><span>NTHIK :</span></dt><dd>1</dd><dt><span>NCOLS :</span></dt><dd>80</dd><dt><span>NROWS :</span></dt><dd>80</dd><dt><span>NLAYS :</span></dt><dd>1</dd><dt><span>NVARS :</span></dt><dd>14</dd><dt><span>GDTYP :</span></dt><dd>1</dd><dt><span>P_ALP :</span></dt><dd>0.0</dd><dt><span>P_BET :</span></dt><dd>0.0</dd><dt><span>P_GAM :</span></dt><dd>0.0</dd><dt><span>XCENT :</span></dt><dd>0.0</dd><dt><span>YCENT :</span></dt><dd>0.0</dd><dt><span>XORIG :</span></dt><dd>76.8499984741211</dd><dt><span>YORIG :</span></dt><dd>28.200000762939453</dd><dt><span>XCELL :</span></dt><dd>0.009999999776482582</dd><dt><span>YCELL :</span></dt><dd>0.009999999776482582</dd><dt><span>VGTYP :</span></dt><dd>-9999</dd><dt><span>VGTOP :</span></dt><dd>-9.999e+36</dd><dt><span>VGLVLS :</span></dt><dd>[0. 0.]</dd><dt><span>GDNAM :</span></dt><dd>????????????????</dd><dt><span>UPNAM :</span></dt><dd>CAMx2IOAPI      </dd><dt><span>VAR-LIST :</span></dt><dd>TSURF_K         SNOWEW_M        SNOWAGE_HR      PRATE_MMpH      CLOUD_OD        U10_MpS         V10_MpS         T2_K            SWSFC_WpM2      SOLM_M3pM3      CLDTOP_KM       CAPE            PBL_WRF_M       PBL_YSU_M       </dd><dt><span>FILEDESC :</span></dt><dd>I/O API formatted CAMx AVRG output                                              </dd><dt><span>HISTORY :</span></dt><dd></dd></dl></div></li></ul></div></div>
</div>
</div>
<div id="cell-11" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">data_96_df</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">TSTEP</th>
<th data-quarto-table-cell-role="th">VAR</th>
<th data-quarto-table-cell-role="th">DATE-TIME</th>
<th data-quarto-table-cell-role="th">LAY</th>
<th data-quarto-table-cell-role="th">ROW</th>
<th data-quarto-table-cell-role="th">COL</th>
<th data-quarto-table-cell-role="th">TFLAG</th>
<th data-quarto-table-cell-role="th">TSURF_K</th>
<th data-quarto-table-cell-role="th">SNOWEW_M</th>
<th data-quarto-table-cell-role="th">SNOWAGE_HR</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">CLOUD_OD</th>
<th data-quarto-table-cell-role="th">U10_MpS</th>
<th data-quarto-table-cell-role="th">V10_MpS</th>
<th data-quarto-table-cell-role="th">T2_K</th>
<th data-quarto-table-cell-role="th">SWSFC_WpM2</th>
<th data-quarto-table-cell-role="th">SOLM_M3pM3</th>
<th data-quarto-table-cell-role="th">CLDTOP_KM</th>
<th data-quarto-table-cell-role="th">CAPE</th>
<th data-quarto-table-cell-role="th">PBL_WRF_M</th>
<th data-quarto-table-cell-role="th">PBL_YSU_M</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2023198</td>
<td>302.314636</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>62.239326</td>
<td>1.630373</td>
<td>0.148722</td>
<td>302.571838</td>
<td>0.0</td>
<td>0.313128</td>
<td>0.0</td>
<td>0.0</td>
<td>17.212452</td>
<td>17.212452</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>2023198</td>
<td>302.312042</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>61.671093</td>
<td>1.585281</td>
<td>0.158011</td>
<td>302.584351</td>
<td>0.0</td>
<td>0.311416</td>
<td>0.0</td>
<td>0.0</td>
<td>17.212652</td>
<td>17.212652</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>2023198</td>
<td>302.309479</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>61.102859</td>
<td>1.540188</td>
<td>0.167299</td>
<td>302.596832</td>
<td>0.0</td>
<td>0.309703</td>
<td>0.0</td>
<td>0.0</td>
<td>17.212852</td>
<td>17.212852</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>2023198</td>
<td>302.306885</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>60.534630</td>
<td>1.495095</td>
<td>0.176587</td>
<td>302.609344</td>
<td>0.0</td>
<td>0.307990</td>
<td>0.0</td>
<td>0.0</td>
<td>17.213055</td>
<td>17.213055</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>2023198</td>
<td>302.303558</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>59.912636</td>
<td>1.450304</td>
<td>0.184773</td>
<td>302.621948</td>
<td>0.0</td>
<td>0.306286</td>
<td>0.0</td>
<td>0.0</td>
<td>17.213356</td>
<td>17.213356</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">17203195</td>
<td>95</td>
<td>13</td>
<td>1</td>
<td>0</td>
<td>79</td>
<td>75</td>
<td>230000</td>
<td>298.979095</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>37.972748</td>
<td>0.600130</td>
<td>-1.341342</td>
<td>299.389465</td>
<td>0.0</td>
<td>0.324286</td>
<td>0.0</td>
<td>0.0</td>
<td>26.661556</td>
<td>17.082989</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">17203196</td>
<td>95</td>
<td>13</td>
<td>1</td>
<td>0</td>
<td>79</td>
<td>76</td>
<td>230000</td>
<td>299.372223</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>37.747482</td>
<td>0.658128</td>
<td>-1.301898</td>
<td>299.638062</td>
<td>0.0</td>
<td>0.324927</td>
<td>0.0</td>
<td>0.0</td>
<td>43.123440</td>
<td>17.094244</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">17203197</td>
<td>95</td>
<td>13</td>
<td>1</td>
<td>0</td>
<td>79</td>
<td>77</td>
<td>230000</td>
<td>299.967468</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>37.423786</td>
<td>0.732263</td>
<td>-1.252025</td>
<td>300.018402</td>
<td>0.0</td>
<td>0.326345</td>
<td>0.0</td>
<td>0.0</td>
<td>68.759804</td>
<td>17.112419</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">17203198</td>
<td>95</td>
<td>13</td>
<td>1</td>
<td>0</td>
<td>79</td>
<td>78</td>
<td>230000</td>
<td>300.562744</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>37.100090</td>
<td>0.806398</td>
<td>-1.202152</td>
<td>300.398743</td>
<td>0.0</td>
<td>0.327763</td>
<td>0.0</td>
<td>0.0</td>
<td>94.396065</td>
<td>64.426094</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">17203199</td>
<td>95</td>
<td>13</td>
<td>1</td>
<td>0</td>
<td>79</td>
<td>79</td>
<td>230000</td>
<td>301.157501</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>36.776646</td>
<td>0.880477</td>
<td>-1.152316</td>
<td>300.778778</td>
<td>0.0</td>
<td>0.329180</td>
<td>0.0</td>
<td>0.0</td>
<td>120.012794</td>
<td>94.710510</td>
</tr>
</tbody>
</table>

<p>17203200 rows × 21 columns</p>
</div>
</div>
</div>
<div id="cell-12" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">data_96_df.columns</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Index(['TSTEP', 'VAR', 'DATE-TIME', 'LAY', 'ROW', 'COL', 'TFLAG', 'TSURF_K',
       'SNOWEW_M', 'SNOWAGE_HR', 'PRATE_MMpH', 'CLOUD_OD', 'U10_MpS',
       'V10_MpS', 'T2_K', 'SWSFC_WpM2', 'SOLM_M3pM3', 'CLDTOP_KM', 'CAPE',
       'PBL_WRF_M', 'PBL_YSU_M'],
      dtype='object')</code></pre>
</div>
</div>
<div id="cell-13" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">data_96[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'U10_MpS'</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#shape (96, 1, 80, 80)</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
<defs>
<symbol id="icon-database" viewbox="0 0 32 32">
<path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
<path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
<path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
</symbol>
<symbol id="icon-file-text2" viewbox="0 0 32 32">
<path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
<path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
</symbol>
</defs>
</svg>
<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
 *
 */

:root {
  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
  --xr-border-color: var(--jp-border-color2, #e0e0e0);
  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
  --xr-background-color: var(--jp-layout-color0, white);
  --xr-background-color-row-even: var(--jp-layout-color1, white);
  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
}

html[theme=dark],
body[data-theme=dark],
body.vscode-dark {
  --xr-font-color0: rgba(255, 255, 255, 1);
  --xr-font-color2: rgba(255, 255, 255, 0.54);
  --xr-font-color3: rgba(255, 255, 255, 0.38);
  --xr-border-color: #1F1F1F;
  --xr-disabled-color: #515151;
  --xr-background-color: #111111;
  --xr-background-color-row-even: #111111;
  --xr-background-color-row-odd: #313131;
}

.xr-wrap {
  display: block !important;
  min-width: 300px;
  max-width: 700px;
}

.xr-text-repr-fallback {
  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
  display: none;
}

.xr-header {
  padding-top: 6px;
  padding-bottom: 6px;
  margin-bottom: 4px;
  border-bottom: solid 1px var(--xr-border-color);
}

.xr-header > div,
.xr-header > ul {
  display: inline;
  margin-top: 0;
  margin-bottom: 0;
}

.xr-obj-type,
.xr-array-name {
  margin-left: 2px;
  margin-right: 10px;
}

.xr-obj-type {
  color: var(--xr-font-color2);
}

.xr-sections {
  padding-left: 0 !important;
  display: grid;
  grid-template-columns: 150px auto auto 1fr 20px 20px;
}

.xr-section-item {
  display: contents;
}

.xr-section-item input {
  display: none;
}

.xr-section-item input + label {
  color: var(--xr-disabled-color);
}

.xr-section-item input:enabled + label {
  cursor: pointer;
  color: var(--xr-font-color2);
}

.xr-section-item input:enabled + label:hover {
  color: var(--xr-font-color0);
}

.xr-section-summary {
  grid-column: 1;
  color: var(--xr-font-color2);
  font-weight: 500;
}

.xr-section-summary > span {
  display: inline-block;
  padding-left: 0.5em;
}

.xr-section-summary-in:disabled + label {
  color: var(--xr-font-color2);
}

.xr-section-summary-in + label:before {
  display: inline-block;
  content: '►';
  font-size: 11px;
  width: 15px;
  text-align: center;
}

.xr-section-summary-in:disabled + label:before {
  color: var(--xr-disabled-color);
}

.xr-section-summary-in:checked + label:before {
  content: '▼';
}

.xr-section-summary-in:checked + label > span {
  display: none;
}

.xr-section-summary,
.xr-section-inline-details {
  padding-top: 4px;
  padding-bottom: 4px;
}

.xr-section-inline-details {
  grid-column: 2 / -1;
}

.xr-section-details {
  display: none;
  grid-column: 1 / -1;
  margin-bottom: 5px;
}

.xr-section-summary-in:checked ~ .xr-section-details {
  display: contents;
}

.xr-array-wrap {
  grid-column: 1 / -1;
  display: grid;
  grid-template-columns: 20px auto;
}

.xr-array-wrap > label {
  grid-column: 1;
  vertical-align: top;
}

.xr-preview {
  color: var(--xr-font-color3);
}

.xr-array-preview,
.xr-array-data {
  padding: 0 5px !important;
  grid-column: 2;
}

.xr-array-data,
.xr-array-in:checked ~ .xr-array-preview {
  display: none;
}

.xr-array-in:checked ~ .xr-array-data,
.xr-array-preview {
  display: inline-block;
}

.xr-dim-list {
  display: inline-block !important;
  list-style: none;
  padding: 0 !important;
  margin: 0;
}

.xr-dim-list li {
  display: inline-block;
  padding: 0;
  margin: 0;
}

.xr-dim-list:before {
  content: '(';
}

.xr-dim-list:after {
  content: ')';
}

.xr-dim-list li:not(:last-child):after {
  content: ',';
  padding-right: 5px;
}

.xr-has-index {
  font-weight: bold;
}

.xr-var-list,
.xr-var-item {
  display: contents;
}

.xr-var-item > div,
.xr-var-item label,
.xr-var-item > .xr-var-name span {
  background-color: var(--xr-background-color-row-even);
  margin-bottom: 0;
}

.xr-var-item > .xr-var-name:hover span {
  padding-right: 5px;
}

.xr-var-list > li:nth-child(odd) > div,
.xr-var-list > li:nth-child(odd) > label,
.xr-var-list > li:nth-child(odd) > .xr-var-name span {
  background-color: var(--xr-background-color-row-odd);
}

.xr-var-name {
  grid-column: 1;
}

.xr-var-dims {
  grid-column: 2;
}

.xr-var-dtype {
  grid-column: 3;
  text-align: right;
  color: var(--xr-font-color2);
}

.xr-var-preview {
  grid-column: 4;
}

.xr-index-preview {
  grid-column: 2 / 5;
  color: var(--xr-font-color2);
}

.xr-var-name,
.xr-var-dims,
.xr-var-dtype,
.xr-preview,
.xr-attrs dt {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  padding-right: 10px;
}

.xr-var-name:hover,
.xr-var-dims:hover,
.xr-var-dtype:hover,
.xr-attrs dt:hover {
  overflow: visible;
  width: auto;
  z-index: 1;
}

.xr-var-attrs,
.xr-var-data,
.xr-index-data {
  display: none;
  background-color: var(--xr-background-color) !important;
  padding-bottom: 5px !important;
}

.xr-var-attrs-in:checked ~ .xr-var-attrs,
.xr-var-data-in:checked ~ .xr-var-data,
.xr-index-data-in:checked ~ .xr-index-data {
  display: block;
}

.xr-var-data > table {
  float: right;
}

.xr-var-name span,
.xr-var-data,
.xr-index-name div,
.xr-index-data,
.xr-attrs {
  padding-left: 25px !important;
}

.xr-attrs,
.xr-var-attrs,
.xr-var-data,
.xr-index-data {
  grid-column: 1 / -1;
}

dl.xr-attrs {
  padding: 0;
  margin: 0;
  display: grid;
  grid-template-columns: 125px auto;
}

.xr-attrs dt,
.xr-attrs dd {
  padding: 0;
  margin: 0;
  float: left;
  padding-right: 10px;
  width: auto;
}

.xr-attrs dt {
  font-weight: normal;
  grid-column: 1;
}

.xr-attrs dt:hover span {
  display: inline-block;
  background: var(--xr-background-color);
  padding-right: 10px;
}

.xr-attrs dd {
  grid-column: 2;
  white-space: pre-wrap;
  word-break: break-all;
}

.xr-icon-database,
.xr-icon-file-text2,
.xr-no-icon {
  display: inline-block;
  vertical-align: middle;
  width: 1em;
  height: 1.5em !important;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
}
</style><pre class="xr-text-repr-fallback">&lt;xarray.DataArray 'U10_MpS' (TSTEP: 96, LAY: 1, ROW: 80, COL: 80)&gt;
array([[[[ 1.630373, ..., -0.434344],
         ...,
         [-0.544169, ..., -2.070899]]],


       ...,


       [[[ 0.569056, ...,  0.423629],
         ...,
         [ 0.774855, ...,  0.880477]]]], dtype=float32)
Dimensions without coordinates: TSTEP, LAY, ROW, COL
Attributes:
    long_name:  U10_MpS         
    units:      ppmV            
    var_desc:   VARIABLE U10_MpS                                             ...</pre><div class="xr-wrap" style="display:none"><div class="xr-header"><div class="xr-obj-type">xarray.DataArray</div><div class="xr-array-name">'U10_MpS'</div><ul class="xr-dim-list"><li><span>TSTEP</span>: 96</li><li><span>LAY</span>: 1</li><li><span>ROW</span>: 80</li><li><span>COL</span>: 80</li></ul></div><ul class="xr-sections"><li class="xr-section-item"><div class="xr-array-wrap"><input id="section-085cc97d-6f7a-4496-b28e-7eb2f5cf5e4b" class="xr-array-in" type="checkbox" checked=""><label for="section-085cc97d-6f7a-4496-b28e-7eb2f5cf5e4b" title="Show/hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-array-preview xr-preview"><span>1.63 1.585 1.54 1.495 1.45 ... 0.6001 0.6581 0.7323 0.8064 0.8805</span></div><div class="xr-array-data"><pre>array([[[[ 1.630373, ..., -0.434344],
         ...,
         [-0.544169, ..., -2.070899]]],


       ...,


       [[[ 0.569056, ...,  0.423629],
         ...,
         [ 0.774855, ...,  0.880477]]]], dtype=float32)</pre></div></div></li><li class="xr-section-item"><input id="section-a9c67cc9-f0ab-45d1-a319-1270ba210638" class="xr-section-summary-in" type="checkbox" disabled=""><label for="section-a9c67cc9-f0ab-45d1-a319-1270ba210638" class="xr-section-summary" title="Expand/collapse section">Coordinates: <span>(0)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><ul class="xr-var-list"></ul></div></li><li class="xr-section-item"><input id="section-08116eee-4b1f-4da7-a683-184b1ea0796d" class="xr-section-summary-in" type="checkbox" disabled=""><label for="section-08116eee-4b1f-4da7-a683-184b1ea0796d" class="xr-section-summary" title="Expand/collapse section">Indexes: <span>(0)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><ul class="xr-var-list"></ul></div></li><li class="xr-section-item"><input id="section-2946039e-2dab-4633-9b78-1324a5ef09da" class="xr-section-summary-in" type="checkbox" checked=""><label for="section-2946039e-2dab-4633-9b78-1324a5ef09da" class="xr-section-summary">Attributes: <span>(3)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><dl class="xr-attrs"><dt><span>long_name :</span></dt><dd>U10_MpS         </dd><dt><span>units :</span></dt><dd>ppmV            </dd><dt><span>var_desc :</span></dt><dd>VARIABLE U10_MpS                                                                </dd></dl></div></li></ul></div></div>
</div>
</div>
<div id="cell-14" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">data_96[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'U10_MpS'</span>].shape , data_96[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'U10_MpS'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TSTEP'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].shape, data_96[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'U10_MpS'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TSTEP'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>((96, 1, 80, 80), (1, 80, 80), (80, 80))</code></pre>
</div>
</div>
<div id="cell-15" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">plt.imshow(data_96[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'U10_MpS'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TSTEP'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#shape (80, 80)</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f76abc7cf70&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-11-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-11-output-2.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-16" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">create_plot(data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data_96, hour <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, var_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'U10_MpS'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-12-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="visualizing-120-hr-files" class="level2">
<h2 class="anchored" data-anchor-id="visualizing-120-hr-files">Visualizing 120 hr files</h2>
<div id="cell-18" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">data_120 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xr.open_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/camx120hr_merged_20230717.nc'</span>)</span>
<span id="cb16-2">data_120_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data_120.to_dataframe().reset_index() </span></code></pre></div>
</div>
<div id="cell-19" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">data_120 </span></code></pre></div>
<div class="cell-output cell-output-display">
<div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
<defs>
<symbol id="icon-database" viewbox="0 0 32 32">
<path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
<path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
<path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
</symbol>
<symbol id="icon-file-text2" viewbox="0 0 32 32">
<path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
<path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
</symbol>
</defs>
</svg>
<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
 *
 */

:root {
  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
  --xr-border-color: var(--jp-border-color2, #e0e0e0);
  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
  --xr-background-color: var(--jp-layout-color0, white);
  --xr-background-color-row-even: var(--jp-layout-color1, white);
  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
}

html[theme=dark],
body[data-theme=dark],
body.vscode-dark {
  --xr-font-color0: rgba(255, 255, 255, 1);
  --xr-font-color2: rgba(255, 255, 255, 0.54);
  --xr-font-color3: rgba(255, 255, 255, 0.38);
  --xr-border-color: #1F1F1F;
  --xr-disabled-color: #515151;
  --xr-background-color: #111111;
  --xr-background-color-row-even: #111111;
  --xr-background-color-row-odd: #313131;
}

.xr-wrap {
  display: block !important;
  min-width: 300px;
  max-width: 700px;
}

.xr-text-repr-fallback {
  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
  display: none;
}

.xr-header {
  padding-top: 6px;
  padding-bottom: 6px;
  margin-bottom: 4px;
  border-bottom: solid 1px var(--xr-border-color);
}

.xr-header > div,
.xr-header > ul {
  display: inline;
  margin-top: 0;
  margin-bottom: 0;
}

.xr-obj-type,
.xr-array-name {
  margin-left: 2px;
  margin-right: 10px;
}

.xr-obj-type {
  color: var(--xr-font-color2);
}

.xr-sections {
  padding-left: 0 !important;
  display: grid;
  grid-template-columns: 150px auto auto 1fr 20px 20px;
}

.xr-section-item {
  display: contents;
}

.xr-section-item input {
  display: none;
}

.xr-section-item input + label {
  color: var(--xr-disabled-color);
}

.xr-section-item input:enabled + label {
  cursor: pointer;
  color: var(--xr-font-color2);
}

.xr-section-item input:enabled + label:hover {
  color: var(--xr-font-color0);
}

.xr-section-summary {
  grid-column: 1;
  color: var(--xr-font-color2);
  font-weight: 500;
}

.xr-section-summary > span {
  display: inline-block;
  padding-left: 0.5em;
}

.xr-section-summary-in:disabled + label {
  color: var(--xr-font-color2);
}

.xr-section-summary-in + label:before {
  display: inline-block;
  content: '►';
  font-size: 11px;
  width: 15px;
  text-align: center;
}

.xr-section-summary-in:disabled + label:before {
  color: var(--xr-disabled-color);
}

.xr-section-summary-in:checked + label:before {
  content: '▼';
}

.xr-section-summary-in:checked + label > span {
  display: none;
}

.xr-section-summary,
.xr-section-inline-details {
  padding-top: 4px;
  padding-bottom: 4px;
}

.xr-section-inline-details {
  grid-column: 2 / -1;
}

.xr-section-details {
  display: none;
  grid-column: 1 / -1;
  margin-bottom: 5px;
}

.xr-section-summary-in:checked ~ .xr-section-details {
  display: contents;
}

.xr-array-wrap {
  grid-column: 1 / -1;
  display: grid;
  grid-template-columns: 20px auto;
}

.xr-array-wrap > label {
  grid-column: 1;
  vertical-align: top;
}

.xr-preview {
  color: var(--xr-font-color3);
}

.xr-array-preview,
.xr-array-data {
  padding: 0 5px !important;
  grid-column: 2;
}

.xr-array-data,
.xr-array-in:checked ~ .xr-array-preview {
  display: none;
}

.xr-array-in:checked ~ .xr-array-data,
.xr-array-preview {
  display: inline-block;
}

.xr-dim-list {
  display: inline-block !important;
  list-style: none;
  padding: 0 !important;
  margin: 0;
}

.xr-dim-list li {
  display: inline-block;
  padding: 0;
  margin: 0;
}

.xr-dim-list:before {
  content: '(';
}

.xr-dim-list:after {
  content: ')';
}

.xr-dim-list li:not(:last-child):after {
  content: ',';
  padding-right: 5px;
}

.xr-has-index {
  font-weight: bold;
}

.xr-var-list,
.xr-var-item {
  display: contents;
}

.xr-var-item > div,
.xr-var-item label,
.xr-var-item > .xr-var-name span {
  background-color: var(--xr-background-color-row-even);
  margin-bottom: 0;
}

.xr-var-item > .xr-var-name:hover span {
  padding-right: 5px;
}

.xr-var-list > li:nth-child(odd) > div,
.xr-var-list > li:nth-child(odd) > label,
.xr-var-list > li:nth-child(odd) > .xr-var-name span {
  background-color: var(--xr-background-color-row-odd);
}

.xr-var-name {
  grid-column: 1;
}

.xr-var-dims {
  grid-column: 2;
}

.xr-var-dtype {
  grid-column: 3;
  text-align: right;
  color: var(--xr-font-color2);
}

.xr-var-preview {
  grid-column: 4;
}

.xr-index-preview {
  grid-column: 2 / 5;
  color: var(--xr-font-color2);
}

.xr-var-name,
.xr-var-dims,
.xr-var-dtype,
.xr-preview,
.xr-attrs dt {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  padding-right: 10px;
}

.xr-var-name:hover,
.xr-var-dims:hover,
.xr-var-dtype:hover,
.xr-attrs dt:hover {
  overflow: visible;
  width: auto;
  z-index: 1;
}

.xr-var-attrs,
.xr-var-data,
.xr-index-data {
  display: none;
  background-color: var(--xr-background-color) !important;
  padding-bottom: 5px !important;
}

.xr-var-attrs-in:checked ~ .xr-var-attrs,
.xr-var-data-in:checked ~ .xr-var-data,
.xr-index-data-in:checked ~ .xr-index-data {
  display: block;
}

.xr-var-data > table {
  float: right;
}

.xr-var-name span,
.xr-var-data,
.xr-index-name div,
.xr-index-data,
.xr-attrs {
  padding-left: 25px !important;
}

.xr-attrs,
.xr-var-attrs,
.xr-var-data,
.xr-index-data {
  grid-column: 1 / -1;
}

dl.xr-attrs {
  padding: 0;
  margin: 0;
  display: grid;
  grid-template-columns: 125px auto;
}

.xr-attrs dt,
.xr-attrs dd {
  padding: 0;
  margin: 0;
  float: left;
  padding-right: 10px;
  width: auto;
}

.xr-attrs dt {
  font-weight: normal;
  grid-column: 1;
}

.xr-attrs dt:hover span {
  display: inline-block;
  background: var(--xr-background-color);
  padding-right: 10px;
}

.xr-attrs dd {
  grid-column: 2;
  white-space: pre-wrap;
  word-break: break-all;
}

.xr-icon-database,
.xr-icon-file-text2,
.xr-no-icon {
  display: inline-block;
  vertical-align: middle;
  width: 1em;
  height: 1.5em !important;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
}
</style><pre class="xr-text-repr-fallback">&lt;xarray.Dataset&gt;
Dimensions:  (TSTEP: 120, LAY: 1, ROW: 80, COL: 80, VAR: 9, DATE-TIME: 2)
Dimensions without coordinates: TSTEP, LAY, ROW, COL, VAR, DATE-TIME
Data variables:
    P10      (TSTEP, LAY, ROW, COL) float32 23.86 23.86 24.07 ... 10.1 10.1
    P25      (TSTEP, LAY, ROW, COL) float32 19.24 19.24 19.62 ... 9.63 9.63
    TFLAG    (TSTEP, VAR, DATE-TIME) int32 2023197 0 2023197 ... 2023201 230000
Attributes: (12/34)
    IOAPI_VERSION:  $Id: @(#) ioapi library version 3.0 $                    ...
    EXEC_ID:        ????????????????                                         ...
    FTYPE:          1
    CDATE:          2023197
    CTIME:          83911
    WDATE:          2023197
    ...             ...
    GDNAM:          ????????????????
    UPNAM:          CAMXMETOU       
    VAR-LIST:       P10             P25             
    FILEDESC:       I/O API formatted CAMx AVRG output                       ...
    HISTORY:        Mon Jul 17 08:45:22 2023: ncrcat camxout.2023.07.16.nc ca...
    NCO:            netCDF Operators version 4.9.1 (Homepage = http://nco.sf....</pre><div class="xr-wrap" style="display:none"><div class="xr-header"><div class="xr-obj-type">xarray.Dataset</div></div><ul class="xr-sections"><li class="xr-section-item"><input id="section-740e5d34-011a-4d63-aa2a-691931ebb3e8" class="xr-section-summary-in" type="checkbox" disabled=""><label for="section-740e5d34-011a-4d63-aa2a-691931ebb3e8" class="xr-section-summary" title="Expand/collapse section">Dimensions:</label><div class="xr-section-inline-details"><ul class="xr-dim-list"><li><span>TSTEP</span>: 120</li><li><span>LAY</span>: 1</li><li><span>ROW</span>: 80</li><li><span>COL</span>: 80</li><li><span>VAR</span>: 9</li><li><span>DATE-TIME</span>: 2</li></ul></div><div class="xr-section-details"></div></li><li class="xr-section-item"><input id="section-7c3a8202-9fdd-4104-9ec0-b4326966912e" class="xr-section-summary-in" type="checkbox" disabled=""><label for="section-7c3a8202-9fdd-4104-9ec0-b4326966912e" class="xr-section-summary" title="Expand/collapse section">Coordinates: <span>(0)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><ul class="xr-var-list"></ul></div></li><li class="xr-section-item"><input id="section-019325b9-c458-4610-a473-67963dfc2aa5" class="xr-section-summary-in" type="checkbox" checked=""><label for="section-019325b9-c458-4610-a473-67963dfc2aa5" class="xr-section-summary">Data variables: <span>(3)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><ul class="xr-var-list"><li class="xr-var-item"><div class="xr-var-name"><span>P10</span></div><div class="xr-var-dims">(TSTEP, LAY, ROW, COL)</div><div class="xr-var-dtype">float32</div><div class="xr-var-preview xr-preview">23.86 23.86 24.07 ... 10.1 10.1</div><input id="attrs-7ab4d7f0-d464-4fc0-981b-b40d84cf5198" class="xr-var-attrs-in" type="checkbox"><label for="attrs-7ab4d7f0-d464-4fc0-981b-b40d84cf5198" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-fef3217d-c771-471b-a095-2dfcc689b7de" class="xr-var-data-in" type="checkbox"><label for="data-fef3217d-c771-471b-a095-2dfcc689b7de" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"><dt><span>long_name :</span></dt><dd>CPRM            </dd><dt><span>units :</span></dt><dd>micrograms/m**3 </dd><dt><span>var_desc :</span></dt><dd>VARIABLE CPRM                                                                   </dd></dl></div><div class="xr-var-data"><pre>array([[[[23.857107, ..., 28.82367 ],
         ...,
         [34.902046, ..., 18.506985]]],


       ...,


       [[[38.434433, ..., 22.536842],
         ...,
         [20.921093, ..., 10.097546]]]], dtype=float32)</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span>P25</span></div><div class="xr-var-dims">(TSTEP, LAY, ROW, COL)</div><div class="xr-var-dtype">float32</div><div class="xr-var-preview xr-preview">19.24 19.24 19.62 ... 9.63 9.63</div><input id="attrs-d2787dcf-2123-4b35-bbb0-57bb3968eda5" class="xr-var-attrs-in" type="checkbox"><label for="attrs-d2787dcf-2123-4b35-bbb0-57bb3968eda5" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-7e5743ed-6da0-4ac3-ac63-89f842737dab" class="xr-var-data-in" type="checkbox"><label for="data-7e5743ed-6da0-4ac3-ac63-89f842737dab" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"><dt><span>long_name :</span></dt><dd>FPRM            </dd><dt><span>units :</span></dt><dd>micrograms/m**3 </dd><dt><span>var_desc :</span></dt><dd>VARIABLE FPRM                                                                   </dd></dl></div><div class="xr-var-data"><pre>array([[[[19.240587, ..., 26.00578 ],
         ...,
         [31.570122, ..., 17.510971]]],


       ...,


       [[[22.36091 , ..., 16.678066],
         ...,
         [18.63693 , ...,  9.629862]]]], dtype=float32)</pre></div></li><li class="xr-var-item"><div class="xr-var-name"><span>TFLAG</span></div><div class="xr-var-dims">(TSTEP, VAR, DATE-TIME)</div><div class="xr-var-dtype">int32</div><div class="xr-var-preview xr-preview">2023197 0 ... 2023201 230000</div><input id="attrs-4172f445-f206-4a6a-9d18-01b3545bf806" class="xr-var-attrs-in" type="checkbox"><label for="attrs-4172f445-f206-4a6a-9d18-01b3545bf806" title="Show/Hide attributes"><svg class="icon xr-icon-file-text2"><use href="#icon-file-text2"></use></svg></label><input id="data-e257699f-5785-465f-b12d-33f6defe64a8" class="xr-var-data-in" type="checkbox"><label for="data-e257699f-5785-465f-b12d-33f6defe64a8" title="Show/Hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-var-attrs"><dl class="xr-attrs"><dt><span>units :</span></dt><dd>&lt;YYYYDDD,HHMMSS&gt;</dd><dt><span>long_name :</span></dt><dd>TFLAG           </dd><dt><span>var_desc :</span></dt><dd>Timestep-valid flags:  (1) YYYYDDD or (2) HHMMSS                                </dd></dl></div><div class="xr-var-data"><pre>array([[[2023197,       0],
        [2023197,       0],
        ...,
        [2023197,       0],
        [2023197,       0]],

       [[2023197,   10000],
        [2023197,   10000],
        ...,
        [2023197,   10000],
        [2023197,   10000]],

       ...,

       [[2023201,  220000],
        [2023201,  220000],
        ...,
        [2023201,  220000],
        [2023201,  220000]],

       [[2023201,  230000],
        [2023201,  230000],
        ...,
        [2023201,  230000],
        [2023201,  230000]]], dtype=int32)</pre></div></li></ul></div></li><li class="xr-section-item"><input id="section-2aa6ad5a-5536-40b1-bf53-4ca9d61c2b33" class="xr-section-summary-in" type="checkbox" disabled=""><label for="section-2aa6ad5a-5536-40b1-bf53-4ca9d61c2b33" class="xr-section-summary" title="Expand/collapse section">Indexes: <span>(0)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><ul class="xr-var-list"></ul></div></li><li class="xr-section-item"><input id="section-4f1e8eb1-930e-4a6e-9d7a-a95d55f17bd2" class="xr-section-summary-in" type="checkbox"><label for="section-4f1e8eb1-930e-4a6e-9d7a-a95d55f17bd2" class="xr-section-summary">Attributes: <span>(34)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><dl class="xr-attrs"><dt><span>IOAPI_VERSION :</span></dt><dd>$Id: @(#) ioapi library version 3.0 $                                           </dd><dt><span>EXEC_ID :</span></dt><dd>????????????????                                                                </dd><dt><span>FTYPE :</span></dt><dd>1</dd><dt><span>CDATE :</span></dt><dd>2023197</dd><dt><span>CTIME :</span></dt><dd>83911</dd><dt><span>WDATE :</span></dt><dd>2023197</dd><dt><span>WTIME :</span></dt><dd>83911</dd><dt><span>SDATE :</span></dt><dd>2023197</dd><dt><span>STIME :</span></dt><dd>0</dd><dt><span>TSTEP :</span></dt><dd>10000</dd><dt><span>NTHIK :</span></dt><dd>1</dd><dt><span>NCOLS :</span></dt><dd>80</dd><dt><span>NROWS :</span></dt><dd>80</dd><dt><span>NLAYS :</span></dt><dd>1</dd><dt><span>NVARS :</span></dt><dd>2</dd><dt><span>GDTYP :</span></dt><dd>1</dd><dt><span>P_ALP :</span></dt><dd>0.0</dd><dt><span>P_BET :</span></dt><dd>0.0</dd><dt><span>P_GAM :</span></dt><dd>0.0</dd><dt><span>XCENT :</span></dt><dd>0.0</dd><dt><span>YCENT :</span></dt><dd>0.0</dd><dt><span>XORIG :</span></dt><dd>76.8499984741211</dd><dt><span>YORIG :</span></dt><dd>28.200000762939453</dd><dt><span>XCELL :</span></dt><dd>0.009999999776482582</dd><dt><span>YCELL :</span></dt><dd>0.009999999776482582</dd><dt><span>VGTYP :</span></dt><dd>-9999</dd><dt><span>VGTOP :</span></dt><dd>-9.999e+36</dd><dt><span>VGLVLS :</span></dt><dd>[0. 0.]</dd><dt><span>GDNAM :</span></dt><dd>????????????????</dd><dt><span>UPNAM :</span></dt><dd>CAMXMETOU       </dd><dt><span>VAR-LIST :</span></dt><dd>P10             P25             </dd><dt><span>FILEDESC :</span></dt><dd>I/O API formatted CAMx AVRG output                                              </dd><dt><span>HISTORY :</span></dt><dd>Mon Jul 17 08:45:22 2023: ncrcat camxout.2023.07.16.nc camxout.2023.07.17.nc camxout.2023.07.18.nc camxout.2023.07.19.nc camxout.2023.07.20.nc camx120hr.nc
</dd><dt><span>NCO :</span></dt><dd>netCDF Operators version 4.9.1 (Homepage = http://nco.sf.net, Code = http://github.com/nco/nco)</dd></dl></div></li></ul></div></div>
</div>
</div>
<div id="cell-20" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">data_120_df</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">TSTEP</th>
<th data-quarto-table-cell-role="th">LAY</th>
<th data-quarto-table-cell-role="th">ROW</th>
<th data-quarto-table-cell-role="th">COL</th>
<th data-quarto-table-cell-role="th">VAR</th>
<th data-quarto-table-cell-role="th">DATE-TIME</th>
<th data-quarto-table-cell-role="th">P10</th>
<th data-quarto-table-cell-role="th">P25</th>
<th data-quarto-table-cell-role="th">TFLAG</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>23.857107</td>
<td>19.240587</td>
<td>2023197</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>23.857107</td>
<td>19.240587</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>23.857107</td>
<td>19.240587</td>
<td>2023197</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>23.857107</td>
<td>19.240587</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>23.857107</td>
<td>19.240587</td>
<td>2023197</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">13823995</td>
<td>119</td>
<td>0</td>
<td>79</td>
<td>79</td>
<td>6</td>
<td>1</td>
<td>10.097546</td>
<td>9.629862</td>
<td>230000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13823996</td>
<td>119</td>
<td>0</td>
<td>79</td>
<td>79</td>
<td>7</td>
<td>0</td>
<td>10.097546</td>
<td>9.629862</td>
<td>2023201</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">13823997</td>
<td>119</td>
<td>0</td>
<td>79</td>
<td>79</td>
<td>7</td>
<td>1</td>
<td>10.097546</td>
<td>9.629862</td>
<td>230000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13823998</td>
<td>119</td>
<td>0</td>
<td>79</td>
<td>79</td>
<td>8</td>
<td>0</td>
<td>10.097546</td>
<td>9.629862</td>
<td>2023201</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">13823999</td>
<td>119</td>
<td>0</td>
<td>79</td>
<td>79</td>
<td>8</td>
<td>1</td>
<td>10.097546</td>
<td>9.629862</td>
<td>230000</td>
</tr>
</tbody>
</table>

<p>13824000 rows × 9 columns</p>
</div>
</div>
</div>
<div id="cell-21" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">data_120_df.describe()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">TSTEP</th>
<th data-quarto-table-cell-role="th">LAY</th>
<th data-quarto-table-cell-role="th">ROW</th>
<th data-quarto-table-cell-role="th">COL</th>
<th data-quarto-table-cell-role="th">VAR</th>
<th data-quarto-table-cell-role="th">DATE-TIME</th>
<th data-quarto-table-cell-role="th">P10</th>
<th data-quarto-table-cell-role="th">P25</th>
<th data-quarto-table-cell-role="th">TFLAG</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">count</td>
<td>1.382400e+07</td>
<td>13824000.0</td>
<td>1.382400e+07</td>
<td>1.382400e+07</td>
<td>1.382400e+07</td>
<td>13824000.0</td>
<td>1.382400e+07</td>
<td>1.382400e+07</td>
<td>1.382400e+07</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mean</td>
<td>5.950000e+01</td>
<td>0.0</td>
<td>3.950000e+01</td>
<td>3.950000e+01</td>
<td>4.000000e+00</td>
<td>0.5</td>
<td>4.101470e+01</td>
<td>2.856279e+01</td>
<td>1.069100e+06</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">std</td>
<td>3.463981e+01</td>
<td>0.0</td>
<td>2.309221e+01</td>
<td>2.309221e+01</td>
<td>2.581989e+00</td>
<td>0.5</td>
<td>2.361775e+01</td>
<td>1.582030e+01</td>
<td>9.553543e+05</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">min</td>
<td>0.000000e+00</td>
<td>0.0</td>
<td>0.000000e+00</td>
<td>0.000000e+00</td>
<td>0.000000e+00</td>
<td>0.0</td>
<td>1.111396e+00</td>
<td>8.114247e-01</td>
<td>0.000000e+00</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">25%</td>
<td>2.975000e+01</td>
<td>0.0</td>
<td>1.975000e+01</td>
<td>1.975000e+01</td>
<td>2.000000e+00</td>
<td>0.0</td>
<td>2.546643e+01</td>
<td>1.880392e+01</td>
<td>1.175000e+05</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">50%</td>
<td>5.950000e+01</td>
<td>0.0</td>
<td>3.950000e+01</td>
<td>3.950000e+01</td>
<td>4.000000e+00</td>
<td>0.5</td>
<td>3.590978e+01</td>
<td>2.589731e+01</td>
<td>1.126598e+06</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">75%</td>
<td>8.925000e+01</td>
<td>0.0</td>
<td>5.925000e+01</td>
<td>5.925000e+01</td>
<td>6.000000e+00</td>
<td>1.0</td>
<td>5.103806e+01</td>
<td>3.433007e+01</td>
<td>2.023199e+06</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">max</td>
<td>1.190000e+02</td>
<td>0.0</td>
<td>7.900000e+01</td>
<td>7.900000e+01</td>
<td>8.000000e+00</td>
<td>1.0</td>
<td>6.492913e+02</td>
<td>6.130998e+02</td>
<td>2.023201e+06</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-22" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">data_120[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'COL'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
<defs>
<symbol id="icon-database" viewbox="0 0 32 32">
<path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
<path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
<path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
</symbol>
<symbol id="icon-file-text2" viewbox="0 0 32 32">
<path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
<path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
</symbol>
</defs>
</svg>
<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
 *
 */

:root {
  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
  --xr-border-color: var(--jp-border-color2, #e0e0e0);
  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
  --xr-background-color: var(--jp-layout-color0, white);
  --xr-background-color-row-even: var(--jp-layout-color1, white);
  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
}

html[theme=dark],
body[data-theme=dark],
body.vscode-dark {
  --xr-font-color0: rgba(255, 255, 255, 1);
  --xr-font-color2: rgba(255, 255, 255, 0.54);
  --xr-font-color3: rgba(255, 255, 255, 0.38);
  --xr-border-color: #1F1F1F;
  --xr-disabled-color: #515151;
  --xr-background-color: #111111;
  --xr-background-color-row-even: #111111;
  --xr-background-color-row-odd: #313131;
}

.xr-wrap {
  display: block !important;
  min-width: 300px;
  max-width: 700px;
}

.xr-text-repr-fallback {
  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
  display: none;
}

.xr-header {
  padding-top: 6px;
  padding-bottom: 6px;
  margin-bottom: 4px;
  border-bottom: solid 1px var(--xr-border-color);
}

.xr-header > div,
.xr-header > ul {
  display: inline;
  margin-top: 0;
  margin-bottom: 0;
}

.xr-obj-type,
.xr-array-name {
  margin-left: 2px;
  margin-right: 10px;
}

.xr-obj-type {
  color: var(--xr-font-color2);
}

.xr-sections {
  padding-left: 0 !important;
  display: grid;
  grid-template-columns: 150px auto auto 1fr 20px 20px;
}

.xr-section-item {
  display: contents;
}

.xr-section-item input {
  display: none;
}

.xr-section-item input + label {
  color: var(--xr-disabled-color);
}

.xr-section-item input:enabled + label {
  cursor: pointer;
  color: var(--xr-font-color2);
}

.xr-section-item input:enabled + label:hover {
  color: var(--xr-font-color0);
}

.xr-section-summary {
  grid-column: 1;
  color: var(--xr-font-color2);
  font-weight: 500;
}

.xr-section-summary > span {
  display: inline-block;
  padding-left: 0.5em;
}

.xr-section-summary-in:disabled + label {
  color: var(--xr-font-color2);
}

.xr-section-summary-in + label:before {
  display: inline-block;
  content: '►';
  font-size: 11px;
  width: 15px;
  text-align: center;
}

.xr-section-summary-in:disabled + label:before {
  color: var(--xr-disabled-color);
}

.xr-section-summary-in:checked + label:before {
  content: '▼';
}

.xr-section-summary-in:checked + label > span {
  display: none;
}

.xr-section-summary,
.xr-section-inline-details {
  padding-top: 4px;
  padding-bottom: 4px;
}

.xr-section-inline-details {
  grid-column: 2 / -1;
}

.xr-section-details {
  display: none;
  grid-column: 1 / -1;
  margin-bottom: 5px;
}

.xr-section-summary-in:checked ~ .xr-section-details {
  display: contents;
}

.xr-array-wrap {
  grid-column: 1 / -1;
  display: grid;
  grid-template-columns: 20px auto;
}

.xr-array-wrap > label {
  grid-column: 1;
  vertical-align: top;
}

.xr-preview {
  color: var(--xr-font-color3);
}

.xr-array-preview,
.xr-array-data {
  padding: 0 5px !important;
  grid-column: 2;
}

.xr-array-data,
.xr-array-in:checked ~ .xr-array-preview {
  display: none;
}

.xr-array-in:checked ~ .xr-array-data,
.xr-array-preview {
  display: inline-block;
}

.xr-dim-list {
  display: inline-block !important;
  list-style: none;
  padding: 0 !important;
  margin: 0;
}

.xr-dim-list li {
  display: inline-block;
  padding: 0;
  margin: 0;
}

.xr-dim-list:before {
  content: '(';
}

.xr-dim-list:after {
  content: ')';
}

.xr-dim-list li:not(:last-child):after {
  content: ',';
  padding-right: 5px;
}

.xr-has-index {
  font-weight: bold;
}

.xr-var-list,
.xr-var-item {
  display: contents;
}

.xr-var-item > div,
.xr-var-item label,
.xr-var-item > .xr-var-name span {
  background-color: var(--xr-background-color-row-even);
  margin-bottom: 0;
}

.xr-var-item > .xr-var-name:hover span {
  padding-right: 5px;
}

.xr-var-list > li:nth-child(odd) > div,
.xr-var-list > li:nth-child(odd) > label,
.xr-var-list > li:nth-child(odd) > .xr-var-name span {
  background-color: var(--xr-background-color-row-odd);
}

.xr-var-name {
  grid-column: 1;
}

.xr-var-dims {
  grid-column: 2;
}

.xr-var-dtype {
  grid-column: 3;
  text-align: right;
  color: var(--xr-font-color2);
}

.xr-var-preview {
  grid-column: 4;
}

.xr-index-preview {
  grid-column: 2 / 5;
  color: var(--xr-font-color2);
}

.xr-var-name,
.xr-var-dims,
.xr-var-dtype,
.xr-preview,
.xr-attrs dt {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  padding-right: 10px;
}

.xr-var-name:hover,
.xr-var-dims:hover,
.xr-var-dtype:hover,
.xr-attrs dt:hover {
  overflow: visible;
  width: auto;
  z-index: 1;
}

.xr-var-attrs,
.xr-var-data,
.xr-index-data {
  display: none;
  background-color: var(--xr-background-color) !important;
  padding-bottom: 5px !important;
}

.xr-var-attrs-in:checked ~ .xr-var-attrs,
.xr-var-data-in:checked ~ .xr-var-data,
.xr-index-data-in:checked ~ .xr-index-data {
  display: block;
}

.xr-var-data > table {
  float: right;
}

.xr-var-name span,
.xr-var-data,
.xr-index-name div,
.xr-index-data,
.xr-attrs {
  padding-left: 25px !important;
}

.xr-attrs,
.xr-var-attrs,
.xr-var-data,
.xr-index-data {
  grid-column: 1 / -1;
}

dl.xr-attrs {
  padding: 0;
  margin: 0;
  display: grid;
  grid-template-columns: 125px auto;
}

.xr-attrs dt,
.xr-attrs dd {
  padding: 0;
  margin: 0;
  float: left;
  padding-right: 10px;
  width: auto;
}

.xr-attrs dt {
  font-weight: normal;
  grid-column: 1;
}

.xr-attrs dt:hover span {
  display: inline-block;
  background: var(--xr-background-color);
  padding-right: 10px;
}

.xr-attrs dd {
  grid-column: 2;
  white-space: pre-wrap;
  word-break: break-all;
}

.xr-icon-database,
.xr-icon-file-text2,
.xr-no-icon {
  display: inline-block;
  vertical-align: middle;
  width: 1em;
  height: 1.5em !important;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
}
</style><pre class="xr-text-repr-fallback">&lt;xarray.DataArray 'COL' (COL: 80)&gt;
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,
       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
       54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
       72, 73, 74, 75, 76, 77, 78, 79])
Dimensions without coordinates: COL</pre><div class="xr-wrap" style="display:none"><div class="xr-header"><div class="xr-obj-type">xarray.DataArray</div><div class="xr-array-name">'COL'</div><ul class="xr-dim-list"><li><span>COL</span>: 80</li></ul></div><ul class="xr-sections"><li class="xr-section-item"><div class="xr-array-wrap"><input id="section-a3266fcd-3fd4-46f7-be05-e3e92458b8a0" class="xr-array-in" type="checkbox" checked=""><label for="section-a3266fcd-3fd4-46f7-be05-e3e92458b8a0" title="Show/hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-array-preview xr-preview"><span>0 1 2 3 4 5 6 7 8 9 10 11 12 ... 68 69 70 71 72 73 74 75 76 77 78 79</span></div><div class="xr-array-data"><pre>array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,
       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
       54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
       72, 73, 74, 75, 76, 77, 78, 79])</pre></div></div></li><li class="xr-section-item"><input id="section-ca95894f-b1f4-4815-b0dc-9f7b68437e6a" class="xr-section-summary-in" type="checkbox" disabled=""><label for="section-ca95894f-b1f4-4815-b0dc-9f7b68437e6a" class="xr-section-summary" title="Expand/collapse section">Coordinates: <span>(0)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><ul class="xr-var-list"></ul></div></li><li class="xr-section-item"><input id="section-318f7394-d62f-4c1a-9f07-fa1d1cf76b7a" class="xr-section-summary-in" type="checkbox" disabled=""><label for="section-318f7394-d62f-4c1a-9f07-fa1d1cf76b7a" class="xr-section-summary" title="Expand/collapse section">Indexes: <span>(0)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><ul class="xr-var-list"></ul></div></li><li class="xr-section-item"><input id="section-64667dc3-b506-436a-9c57-4aa25edcca30" class="xr-section-summary-in" type="checkbox" disabled=""><label for="section-64667dc3-b506-436a-9c57-4aa25edcca30" class="xr-section-summary" title="Expand/collapse section">Attributes: <span>(0)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><dl class="xr-attrs"></dl></div></li></ul></div></div>
</div>
</div>
<div id="cell-23" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">data_120[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P10'</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#shape (120, 1, 80, 80)</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
<defs>
<symbol id="icon-database" viewbox="0 0 32 32">
<path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
<path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
<path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
</symbol>
<symbol id="icon-file-text2" viewbox="0 0 32 32">
<path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
<path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
</symbol>
</defs>
</svg>
<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
 *
 */

:root {
  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
  --xr-border-color: var(--jp-border-color2, #e0e0e0);
  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
  --xr-background-color: var(--jp-layout-color0, white);
  --xr-background-color-row-even: var(--jp-layout-color1, white);
  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
}

html[theme=dark],
body[data-theme=dark],
body.vscode-dark {
  --xr-font-color0: rgba(255, 255, 255, 1);
  --xr-font-color2: rgba(255, 255, 255, 0.54);
  --xr-font-color3: rgba(255, 255, 255, 0.38);
  --xr-border-color: #1F1F1F;
  --xr-disabled-color: #515151;
  --xr-background-color: #111111;
  --xr-background-color-row-even: #111111;
  --xr-background-color-row-odd: #313131;
}

.xr-wrap {
  display: block !important;
  min-width: 300px;
  max-width: 700px;
}

.xr-text-repr-fallback {
  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
  display: none;
}

.xr-header {
  padding-top: 6px;
  padding-bottom: 6px;
  margin-bottom: 4px;
  border-bottom: solid 1px var(--xr-border-color);
}

.xr-header > div,
.xr-header > ul {
  display: inline;
  margin-top: 0;
  margin-bottom: 0;
}

.xr-obj-type,
.xr-array-name {
  margin-left: 2px;
  margin-right: 10px;
}

.xr-obj-type {
  color: var(--xr-font-color2);
}

.xr-sections {
  padding-left: 0 !important;
  display: grid;
  grid-template-columns: 150px auto auto 1fr 20px 20px;
}

.xr-section-item {
  display: contents;
}

.xr-section-item input {
  display: none;
}

.xr-section-item input + label {
  color: var(--xr-disabled-color);
}

.xr-section-item input:enabled + label {
  cursor: pointer;
  color: var(--xr-font-color2);
}

.xr-section-item input:enabled + label:hover {
  color: var(--xr-font-color0);
}

.xr-section-summary {
  grid-column: 1;
  color: var(--xr-font-color2);
  font-weight: 500;
}

.xr-section-summary > span {
  display: inline-block;
  padding-left: 0.5em;
}

.xr-section-summary-in:disabled + label {
  color: var(--xr-font-color2);
}

.xr-section-summary-in + label:before {
  display: inline-block;
  content: '►';
  font-size: 11px;
  width: 15px;
  text-align: center;
}

.xr-section-summary-in:disabled + label:before {
  color: var(--xr-disabled-color);
}

.xr-section-summary-in:checked + label:before {
  content: '▼';
}

.xr-section-summary-in:checked + label > span {
  display: none;
}

.xr-section-summary,
.xr-section-inline-details {
  padding-top: 4px;
  padding-bottom: 4px;
}

.xr-section-inline-details {
  grid-column: 2 / -1;
}

.xr-section-details {
  display: none;
  grid-column: 1 / -1;
  margin-bottom: 5px;
}

.xr-section-summary-in:checked ~ .xr-section-details {
  display: contents;
}

.xr-array-wrap {
  grid-column: 1 / -1;
  display: grid;
  grid-template-columns: 20px auto;
}

.xr-array-wrap > label {
  grid-column: 1;
  vertical-align: top;
}

.xr-preview {
  color: var(--xr-font-color3);
}

.xr-array-preview,
.xr-array-data {
  padding: 0 5px !important;
  grid-column: 2;
}

.xr-array-data,
.xr-array-in:checked ~ .xr-array-preview {
  display: none;
}

.xr-array-in:checked ~ .xr-array-data,
.xr-array-preview {
  display: inline-block;
}

.xr-dim-list {
  display: inline-block !important;
  list-style: none;
  padding: 0 !important;
  margin: 0;
}

.xr-dim-list li {
  display: inline-block;
  padding: 0;
  margin: 0;
}

.xr-dim-list:before {
  content: '(';
}

.xr-dim-list:after {
  content: ')';
}

.xr-dim-list li:not(:last-child):after {
  content: ',';
  padding-right: 5px;
}

.xr-has-index {
  font-weight: bold;
}

.xr-var-list,
.xr-var-item {
  display: contents;
}

.xr-var-item > div,
.xr-var-item label,
.xr-var-item > .xr-var-name span {
  background-color: var(--xr-background-color-row-even);
  margin-bottom: 0;
}

.xr-var-item > .xr-var-name:hover span {
  padding-right: 5px;
}

.xr-var-list > li:nth-child(odd) > div,
.xr-var-list > li:nth-child(odd) > label,
.xr-var-list > li:nth-child(odd) > .xr-var-name span {
  background-color: var(--xr-background-color-row-odd);
}

.xr-var-name {
  grid-column: 1;
}

.xr-var-dims {
  grid-column: 2;
}

.xr-var-dtype {
  grid-column: 3;
  text-align: right;
  color: var(--xr-font-color2);
}

.xr-var-preview {
  grid-column: 4;
}

.xr-index-preview {
  grid-column: 2 / 5;
  color: var(--xr-font-color2);
}

.xr-var-name,
.xr-var-dims,
.xr-var-dtype,
.xr-preview,
.xr-attrs dt {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  padding-right: 10px;
}

.xr-var-name:hover,
.xr-var-dims:hover,
.xr-var-dtype:hover,
.xr-attrs dt:hover {
  overflow: visible;
  width: auto;
  z-index: 1;
}

.xr-var-attrs,
.xr-var-data,
.xr-index-data {
  display: none;
  background-color: var(--xr-background-color) !important;
  padding-bottom: 5px !important;
}

.xr-var-attrs-in:checked ~ .xr-var-attrs,
.xr-var-data-in:checked ~ .xr-var-data,
.xr-index-data-in:checked ~ .xr-index-data {
  display: block;
}

.xr-var-data > table {
  float: right;
}

.xr-var-name span,
.xr-var-data,
.xr-index-name div,
.xr-index-data,
.xr-attrs {
  padding-left: 25px !important;
}

.xr-attrs,
.xr-var-attrs,
.xr-var-data,
.xr-index-data {
  grid-column: 1 / -1;
}

dl.xr-attrs {
  padding: 0;
  margin: 0;
  display: grid;
  grid-template-columns: 125px auto;
}

.xr-attrs dt,
.xr-attrs dd {
  padding: 0;
  margin: 0;
  float: left;
  padding-right: 10px;
  width: auto;
}

.xr-attrs dt {
  font-weight: normal;
  grid-column: 1;
}

.xr-attrs dt:hover span {
  display: inline-block;
  background: var(--xr-background-color);
  padding-right: 10px;
}

.xr-attrs dd {
  grid-column: 2;
  white-space: pre-wrap;
  word-break: break-all;
}

.xr-icon-database,
.xr-icon-file-text2,
.xr-no-icon {
  display: inline-block;
  vertical-align: middle;
  width: 1em;
  height: 1.5em !important;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
}
</style><pre class="xr-text-repr-fallback">&lt;xarray.DataArray 'P10' (TSTEP: 120, LAY: 1, ROW: 80, COL: 80)&gt;
array([[[[23.857107, ..., 28.82367 ],
         ...,
         [34.902046, ..., 18.506985]]],


       ...,


       [[[38.434433, ..., 22.536842],
         ...,
         [20.921093, ..., 10.097546]]]], dtype=float32)
Dimensions without coordinates: TSTEP, LAY, ROW, COL
Attributes:
    long_name:  CPRM            
    units:      micrograms/m**3 
    var_desc:   VARIABLE CPRM                                                ...</pre><div class="xr-wrap" style="display:none"><div class="xr-header"><div class="xr-obj-type">xarray.DataArray</div><div class="xr-array-name">'P10'</div><ul class="xr-dim-list"><li><span>TSTEP</span>: 120</li><li><span>LAY</span>: 1</li><li><span>ROW</span>: 80</li><li><span>COL</span>: 80</li></ul></div><ul class="xr-sections"><li class="xr-section-item"><div class="xr-array-wrap"><input id="section-1b7bf7b7-1a85-47aa-8744-45074d2b30f0" class="xr-array-in" type="checkbox" checked=""><label for="section-1b7bf7b7-1a85-47aa-8744-45074d2b30f0" title="Show/hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-array-preview xr-preview"><span>23.86 23.86 24.07 23.42 22.83 22.56 ... 9.551 9.664 9.808 10.1 10.1</span></div><div class="xr-array-data"><pre>array([[[[23.857107, ..., 28.82367 ],
         ...,
         [34.902046, ..., 18.506985]]],


       ...,


       [[[38.434433, ..., 22.536842],
         ...,
         [20.921093, ..., 10.097546]]]], dtype=float32)</pre></div></div></li><li class="xr-section-item"><input id="section-7e5f5f25-2ebb-42b1-a018-7d164a823429" class="xr-section-summary-in" type="checkbox" disabled=""><label for="section-7e5f5f25-2ebb-42b1-a018-7d164a823429" class="xr-section-summary" title="Expand/collapse section">Coordinates: <span>(0)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><ul class="xr-var-list"></ul></div></li><li class="xr-section-item"><input id="section-e53cea0f-57dd-4ef2-a105-b11af196c5cf" class="xr-section-summary-in" type="checkbox" disabled=""><label for="section-e53cea0f-57dd-4ef2-a105-b11af196c5cf" class="xr-section-summary" title="Expand/collapse section">Indexes: <span>(0)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><ul class="xr-var-list"></ul></div></li><li class="xr-section-item"><input id="section-eeeb8b84-8f1f-412d-a0a7-cb5e296c9cca" class="xr-section-summary-in" type="checkbox" checked=""><label for="section-eeeb8b84-8f1f-412d-a0a7-cb5e296c9cca" class="xr-section-summary">Attributes: <span>(3)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><dl class="xr-attrs"><dt><span>long_name :</span></dt><dd>CPRM            </dd><dt><span>units :</span></dt><dd>micrograms/m**3 </dd><dt><span>var_desc :</span></dt><dd>VARIABLE CPRM                                                                   </dd></dl></div></li></ul></div></div>
</div>
</div>
<div id="cell-24" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">data_120[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P10'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TSTEP'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape 1x80x80</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
<defs>
<symbol id="icon-database" viewbox="0 0 32 32">
<path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
<path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
<path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
</symbol>
<symbol id="icon-file-text2" viewbox="0 0 32 32">
<path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
<path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
</symbol>
</defs>
</svg>
<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
 *
 */

:root {
  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
  --xr-border-color: var(--jp-border-color2, #e0e0e0);
  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
  --xr-background-color: var(--jp-layout-color0, white);
  --xr-background-color-row-even: var(--jp-layout-color1, white);
  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
}

html[theme=dark],
body[data-theme=dark],
body.vscode-dark {
  --xr-font-color0: rgba(255, 255, 255, 1);
  --xr-font-color2: rgba(255, 255, 255, 0.54);
  --xr-font-color3: rgba(255, 255, 255, 0.38);
  --xr-border-color: #1F1F1F;
  --xr-disabled-color: #515151;
  --xr-background-color: #111111;
  --xr-background-color-row-even: #111111;
  --xr-background-color-row-odd: #313131;
}

.xr-wrap {
  display: block !important;
  min-width: 300px;
  max-width: 700px;
}

.xr-text-repr-fallback {
  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
  display: none;
}

.xr-header {
  padding-top: 6px;
  padding-bottom: 6px;
  margin-bottom: 4px;
  border-bottom: solid 1px var(--xr-border-color);
}

.xr-header > div,
.xr-header > ul {
  display: inline;
  margin-top: 0;
  margin-bottom: 0;
}

.xr-obj-type,
.xr-array-name {
  margin-left: 2px;
  margin-right: 10px;
}

.xr-obj-type {
  color: var(--xr-font-color2);
}

.xr-sections {
  padding-left: 0 !important;
  display: grid;
  grid-template-columns: 150px auto auto 1fr 20px 20px;
}

.xr-section-item {
  display: contents;
}

.xr-section-item input {
  display: none;
}

.xr-section-item input + label {
  color: var(--xr-disabled-color);
}

.xr-section-item input:enabled + label {
  cursor: pointer;
  color: var(--xr-font-color2);
}

.xr-section-item input:enabled + label:hover {
  color: var(--xr-font-color0);
}

.xr-section-summary {
  grid-column: 1;
  color: var(--xr-font-color2);
  font-weight: 500;
}

.xr-section-summary > span {
  display: inline-block;
  padding-left: 0.5em;
}

.xr-section-summary-in:disabled + label {
  color: var(--xr-font-color2);
}

.xr-section-summary-in + label:before {
  display: inline-block;
  content: '►';
  font-size: 11px;
  width: 15px;
  text-align: center;
}

.xr-section-summary-in:disabled + label:before {
  color: var(--xr-disabled-color);
}

.xr-section-summary-in:checked + label:before {
  content: '▼';
}

.xr-section-summary-in:checked + label > span {
  display: none;
}

.xr-section-summary,
.xr-section-inline-details {
  padding-top: 4px;
  padding-bottom: 4px;
}

.xr-section-inline-details {
  grid-column: 2 / -1;
}

.xr-section-details {
  display: none;
  grid-column: 1 / -1;
  margin-bottom: 5px;
}

.xr-section-summary-in:checked ~ .xr-section-details {
  display: contents;
}

.xr-array-wrap {
  grid-column: 1 / -1;
  display: grid;
  grid-template-columns: 20px auto;
}

.xr-array-wrap > label {
  grid-column: 1;
  vertical-align: top;
}

.xr-preview {
  color: var(--xr-font-color3);
}

.xr-array-preview,
.xr-array-data {
  padding: 0 5px !important;
  grid-column: 2;
}

.xr-array-data,
.xr-array-in:checked ~ .xr-array-preview {
  display: none;
}

.xr-array-in:checked ~ .xr-array-data,
.xr-array-preview {
  display: inline-block;
}

.xr-dim-list {
  display: inline-block !important;
  list-style: none;
  padding: 0 !important;
  margin: 0;
}

.xr-dim-list li {
  display: inline-block;
  padding: 0;
  margin: 0;
}

.xr-dim-list:before {
  content: '(';
}

.xr-dim-list:after {
  content: ')';
}

.xr-dim-list li:not(:last-child):after {
  content: ',';
  padding-right: 5px;
}

.xr-has-index {
  font-weight: bold;
}

.xr-var-list,
.xr-var-item {
  display: contents;
}

.xr-var-item > div,
.xr-var-item label,
.xr-var-item > .xr-var-name span {
  background-color: var(--xr-background-color-row-even);
  margin-bottom: 0;
}

.xr-var-item > .xr-var-name:hover span {
  padding-right: 5px;
}

.xr-var-list > li:nth-child(odd) > div,
.xr-var-list > li:nth-child(odd) > label,
.xr-var-list > li:nth-child(odd) > .xr-var-name span {
  background-color: var(--xr-background-color-row-odd);
}

.xr-var-name {
  grid-column: 1;
}

.xr-var-dims {
  grid-column: 2;
}

.xr-var-dtype {
  grid-column: 3;
  text-align: right;
  color: var(--xr-font-color2);
}

.xr-var-preview {
  grid-column: 4;
}

.xr-index-preview {
  grid-column: 2 / 5;
  color: var(--xr-font-color2);
}

.xr-var-name,
.xr-var-dims,
.xr-var-dtype,
.xr-preview,
.xr-attrs dt {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  padding-right: 10px;
}

.xr-var-name:hover,
.xr-var-dims:hover,
.xr-var-dtype:hover,
.xr-attrs dt:hover {
  overflow: visible;
  width: auto;
  z-index: 1;
}

.xr-var-attrs,
.xr-var-data,
.xr-index-data {
  display: none;
  background-color: var(--xr-background-color) !important;
  padding-bottom: 5px !important;
}

.xr-var-attrs-in:checked ~ .xr-var-attrs,
.xr-var-data-in:checked ~ .xr-var-data,
.xr-index-data-in:checked ~ .xr-index-data {
  display: block;
}

.xr-var-data > table {
  float: right;
}

.xr-var-name span,
.xr-var-data,
.xr-index-name div,
.xr-index-data,
.xr-attrs {
  padding-left: 25px !important;
}

.xr-attrs,
.xr-var-attrs,
.xr-var-data,
.xr-index-data {
  grid-column: 1 / -1;
}

dl.xr-attrs {
  padding: 0;
  margin: 0;
  display: grid;
  grid-template-columns: 125px auto;
}

.xr-attrs dt,
.xr-attrs dd {
  padding: 0;
  margin: 0;
  float: left;
  padding-right: 10px;
  width: auto;
}

.xr-attrs dt {
  font-weight: normal;
  grid-column: 1;
}

.xr-attrs dt:hover span {
  display: inline-block;
  background: var(--xr-background-color);
  padding-right: 10px;
}

.xr-attrs dd {
  grid-column: 2;
  white-space: pre-wrap;
  word-break: break-all;
}

.xr-icon-database,
.xr-icon-file-text2,
.xr-no-icon {
  display: inline-block;
  vertical-align: middle;
  width: 1em;
  height: 1.5em !important;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
}
</style><pre class="xr-text-repr-fallback">&lt;xarray.DataArray 'P10' (LAY: 1, ROW: 80, COL: 80)&gt;
array([[[23.857107, 23.857107, ..., 28.82367 , 28.82367 ],
        [23.857107, 23.857107, ..., 28.82367 , 28.82367 ],
        ...,
        [34.902046, 34.902046, ..., 18.506985, 18.506985],
        [34.902046, 34.902046, ..., 18.506985, 18.506985]]], dtype=float32)
Dimensions without coordinates: LAY, ROW, COL
Attributes:
    long_name:  CPRM            
    units:      micrograms/m**3 
    var_desc:   VARIABLE CPRM                                                ...</pre><div class="xr-wrap" style="display:none"><div class="xr-header"><div class="xr-obj-type">xarray.DataArray</div><div class="xr-array-name">'P10'</div><ul class="xr-dim-list"><li><span>LAY</span>: 1</li><li><span>ROW</span>: 80</li><li><span>COL</span>: 80</li></ul></div><ul class="xr-sections"><li class="xr-section-item"><div class="xr-array-wrap"><input id="section-172d2e68-f2f1-4fdc-acdb-ad2d94dd023d" class="xr-array-in" type="checkbox" checked=""><label for="section-172d2e68-f2f1-4fdc-acdb-ad2d94dd023d" title="Show/hide data repr"><svg class="icon xr-icon-database"><use href="#icon-database"></use></svg></label><div class="xr-array-preview xr-preview"><span>23.86 23.86 24.07 23.42 22.83 22.56 ... 18.47 18.77 18.69 18.51 18.51</span></div><div class="xr-array-data"><pre>array([[[23.857107, 23.857107, ..., 28.82367 , 28.82367 ],
        [23.857107, 23.857107, ..., 28.82367 , 28.82367 ],
        ...,
        [34.902046, 34.902046, ..., 18.506985, 18.506985],
        [34.902046, 34.902046, ..., 18.506985, 18.506985]]], dtype=float32)</pre></div></div></li><li class="xr-section-item"><input id="section-e4284734-ce26-4acb-9412-914aef79d70a" class="xr-section-summary-in" type="checkbox" disabled=""><label for="section-e4284734-ce26-4acb-9412-914aef79d70a" class="xr-section-summary" title="Expand/collapse section">Coordinates: <span>(0)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><ul class="xr-var-list"></ul></div></li><li class="xr-section-item"><input id="section-265595d1-8e6c-407f-9c9c-6f4f36baffd0" class="xr-section-summary-in" type="checkbox" disabled=""><label for="section-265595d1-8e6c-407f-9c9c-6f4f36baffd0" class="xr-section-summary" title="Expand/collapse section">Indexes: <span>(0)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><ul class="xr-var-list"></ul></div></li><li class="xr-section-item"><input id="section-6b52bd03-6e10-45cc-bcdc-3772aa8356ea" class="xr-section-summary-in" type="checkbox" checked=""><label for="section-6b52bd03-6e10-45cc-bcdc-3772aa8356ea" class="xr-section-summary">Attributes: <span>(3)</span></label><div class="xr-section-inline-details"></div><div class="xr-section-details"><dl class="xr-attrs"><dt><span>long_name :</span></dt><dd>CPRM            </dd><dt><span>units :</span></dt><dd>micrograms/m**3 </dd><dt><span>var_desc :</span></dt><dd>VARIABLE CPRM                                                                   </dd></dl></div></li></ul></div></div>
</div>
</div>
<div id="cell-25" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">data_120[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P10'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TSTEP'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape 80x80</span></span>
<span id="cb23-2">plt.imshow(data_120[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P25'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TSTEP'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#, vmin=0, vmax=100)</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f190d573e80&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-20-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-20-output-2.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-26" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">create_plot(data_120,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P25'</span>) </span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-21-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-21-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="constructing-data" class="level1">
<h1>Constructing data</h1>
<div id="cell-28" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the folder path where your files are located</span></span>
<span id="cb26-2">folder_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/'</span></span>
<span id="cb26-3"></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use glob to retrieve all netCDF files in the folder</span></span>
<span id="cb26-5">file_pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'camx120*.nc'</span></span>
<span id="cb26-6">files_120 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> glob.glob(folder_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> file_pattern)</span>
<span id="cb26-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># files_120</span></span>
<span id="cb26-8"></span>
<span id="cb26-9">file_pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*96hours.nc'</span></span>
<span id="cb26-10">files_96 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> glob.glob(folder_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> file_pattern)</span>
<span id="cb26-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># files_96</span></span></code></pre></div>
</div>
<div id="cell-29" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(files_120))</span>
<span id="cb27-2">files_120.sort()</span>
<span id="cb27-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(files_120[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], files_120[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>70
data/camx120hr_merged_20230717.nc data/camx120hr_merged_20230924.nc</code></pre>
</div>
</div>
<div id="cell-30" class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(files_96))</span>
<span id="cb29-2">files_96.sort()</span>
<span id="cb29-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(files_96[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], files_96[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>69
data/camxmet2d.delhi.20230717.96hours.nc data/camxmet2d.delhi.20230924.96hours.nc</code></pre>
</div>
</div>
<p>camx96hr has 20230808 day file missing. so removing it from camx120hr as well ‘data/camx120hr_merged_20230808.nc’</p>
<div id="cell-32" class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">files_120.remove(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/camx120hr_merged_20230808.nc'</span>)</span>
<span id="cb31-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(files_120) </span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>69</code></pre>
</div>
</div>
<p>camx96hr file contains 96 hrs for days [0,1,2,3]</p>
<p>camx120hr file contains 120 hrs for days [-1,0,1,2,3]</p>
<p>We need current day data from each file to avoid redundancy. So we will take 0-23 hrs from camx96hr and 24-47hrs from camx120hr</p>
<div id="cell-34" class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_data(target_var_96_list, target_var_120_list):</span>
<span id="cb33-2">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb33-3">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb33-4"> </span>
<span id="cb33-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> target_var_96 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> target_var_96_list:</span>
<span id="cb33-6">        column <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb33-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> files_96:</span>
<span id="cb33-8">            data_96 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xr.open_dataset(i)</span>
<span id="cb33-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>):</span>
<span id="cb33-10">                variable96 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data_96[target_var_96][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TSTEP'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>j]</span>
<span id="cb33-11">                column.append(variable96)</span>
<span id="cb33-12">        column <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(column)</span>
<span id="cb33-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(column.shape) # (69*24, 1, 80, 80)</span></span>
<span id="cb33-14">        X.append(column)</span>
<span id="cb33-15">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(X)</span>
<span id="cb33-16">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.concatenate([X[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb33-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X shape '</span>,X.shape)</span>
<span id="cb33-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> target_var_120 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> target_var_120_list:</span>
<span id="cb33-19">        column <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb33-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> files_120:</span>
<span id="cb33-21">            data_120 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xr.open_dataset(i)</span>
<span id="cb33-22">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>):</span>
<span id="cb33-23">                variable120 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data_120[target_var_120][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TSTEP'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>j]</span>
<span id="cb33-24">                column.append(variable120)</span>
<span id="cb33-25">        column <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(column)</span>
<span id="cb33-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(column.shape) # (69*24, 1, 80, 80)</span></span>
<span id="cb33-27">        y.append(column)</span>
<span id="cb33-28">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(y)</span>
<span id="cb33-29">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.concatenate([y[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(y.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb33-30">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y shape'</span>, y.shape)</span>
<span id="cb33-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> X,y</span></code></pre></div>
</div>
<div id="cell-35" class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">target_var_96_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TSURF_K'</span>,</span>
<span id="cb34-2">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SNOWEW_M'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SNOWAGE_HR'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PRATE_MMpH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CLOUD_OD'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'U10_MpS'</span>,</span>
<span id="cb34-3">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V10_MpS'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'T2_K'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SWSFC_WpM2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SOLM_M3pM3'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CLDTOP_KM'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CAPE'</span>,</span>
<span id="cb34-4">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PBL_WRF_M'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PBL_YSU_M'</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ['U10_MpS', 'T2_K', 'V10_MpS']</span></span>
<span id="cb34-5">target_var_120_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P25'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P10'</span>] </span>
<span id="cb34-6">X,y  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_data(target_var_96_list, target_var_120_list)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>X shape  (1656, 14, 80, 80)
y shape (1656, 2, 80, 80)</code></pre>
</div>
</div>
<div id="cell-36" class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> CustomDataset(data.Dataset):</span>
<span id="cb36-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, input_data, output_data):</span>
<span id="cb36-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_data</span>
<span id="cb36-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.output_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output_data</span>
<span id="cb36-5"></span>
<span id="cb36-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb36-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input_data)</span>
<span id="cb36-8"></span>
<span id="cb36-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb36-10">        input_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input_data[index])</span>
<span id="cb36-11">        output_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.output_data[index])</span>
<span id="cb36-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> input_sample, output_sample </span></code></pre></div>
</div>
</section>
<section id="simple-autoencoder" class="level1">
<h1>Simple autoencoder</h1>
<section id="model-defination" class="level2">
<h2 class="anchored" data-anchor-id="model-defination">Model defination</h2>
<p><img src="https://jaiswalsuraj487.github.io/publications_and_projects/images/autoencoder/MLP_autoencoder_archi.png" width="800"></p>
<div id="cell-40" class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Autoencoder_MLP(nn.Module):</span>
<span id="cb37-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb37-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Autoencoder_MLP, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb37-4">        </span>
<span id="cb37-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the layers</span></span>
<span id="cb37-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.flatten <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Flatten()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flatten the 2D input matrix</span></span>
<span id="cb37-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fully connected layer 1</span></span>
<span id="cb37-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>)</span>
<span id="cb37-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fully connected layer 2</span></span>
<span id="cb37-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fully connected layer 2</span></span>
<span id="cb37-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.relu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.ReLU()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activation function</span></span>
<span id="cb37-12"></span>
<span id="cb37-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb37-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flatten the input</span></span>
<span id="cb37-15">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.flatten(x)</span>
<span id="cb37-16">        </span>
<span id="cb37-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass through the fully connected layers</span></span>
<span id="cb37-18">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc1(x)</span>
<span id="cb37-19">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.relu(x)</span>
<span id="cb37-20">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc2(x)</span>
<span id="cb37-21">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.relu(x)</span>
<span id="cb37-22">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc3(x)</span>
<span id="cb37-23">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.relu(x)</span>
<span id="cb37-24">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc4(x)</span>
<span id="cb37-25"></span>
<span id="cb37-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape the output to match the 2D matrix size</span></span>
<span id="cb37-27">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb37-28">        </span>
<span id="cb37-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x</span></code></pre></div>
</div>
<div id="cell-41" class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">summary(Autoencoder_MLP(), input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
Autoencoder_MLP                          [1, 80, 80]               --
├─Flatten: 1-1                           [1, 6400]                 --
├─Linear: 1-2                            [1, 1024]                 6,554,624
├─ReLU: 1-3                              [1, 1024]                 --
├─Linear: 1-4                            [1, 512]                  524,800
├─ReLU: 1-5                              [1, 512]                  --
├─Linear: 1-6                            [1, 1024]                 525,312
├─ReLU: 1-7                              [1, 1024]                 --
├─Linear: 1-8                            [1, 6400]                 6,560,000
==========================================================================================
Total params: 14,164,736
Trainable params: 14,164,736
Non-trainable params: 0
Total mult-adds (Units.MEGABYTES): 14.16
==========================================================================================
Input size (MB): 0.03
Forward/backward pass size (MB): 0.07
Params size (MB): 56.66
Estimated Total Size (MB): 56.76
==========================================================================================</code></pre>
</div>
</div>
</section>
<section id="training-single-channel-input-and-outputp25" class="level2">
<h2 class="anchored" data-anchor-id="training-single-channel-input-and-outputp25">Training single channel input and output(P25)</h2>
<div id="cell-43" class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">X.shape, y.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>((1656, 14, 80, 80), (1656, 2, 80, 80))</code></pre>
</div>
</div>
<div id="cell-44" class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb42-2">X_train_all, X_test_all, y_train_all, y_test_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb42-3">X_train_all.shape, X_test_all.shape, y_train_all.shape, y_test_all.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>((1324, 14, 80, 80), (332, 14, 80, 80), (1324, 2, 80, 80), (332, 2, 80, 80))</code></pre>
</div>
</div>
<div id="cell-45" class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">test_loss_list_P_25 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb44-2">y_channel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> </span>
<span id="cb44-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x_channel = 0</span></span>
<span id="cb44-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x_channel <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):</span>
<span id="cb44-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">####################### Selecting the channel #######################</span></span>
<span id="cb44-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X Channel name : '</span>, target_var_96_list[x_channel])</span>
<span id="cb44-7">    X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train_all[:, x_channel, :,:]</span>
<span id="cb44-8">    X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_test_all[:, x_channel, :,:]</span>
<span id="cb44-9">    y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_train_all[:, y_channel, :,:]</span>
<span id="cb44-10">    y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_test_all[:, y_channel, :,:]</span>
<span id="cb44-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Shapes: '</span>, X_train.shape, X_test.shape, y_train.shape, y_test.shape)</span>
<span id="cb44-12"></span>
<span id="cb44-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">####################### Creating the dataset loader #######################</span></span>
<span id="cb44-14">    train_custom_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomDataset(X_train, y_train)</span>
<span id="cb44-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(train_custom_dataset))</span></span>
<span id="cb44-16">    batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb44-17">    train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.DataLoader(train_custom_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb44-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(train_loader))</span></span>
<span id="cb44-19">    </span>
<span id="cb44-20">    test_custom_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomDataset(X_test, y_test)</span>
<span id="cb44-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(test_custom_dataset))</span></span>
<span id="cb44-22">    batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb44-23">    test_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.DataLoader(test_custom_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb44-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(test_loader))</span></span>
<span id="cb44-25">    </span>
<span id="cb44-26"></span>
<span id="cb44-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#################### Training the model ####################</span></span>
<span id="cb44-28">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Autoencoder_MLP()</span>
<span id="cb44-29">    model.to(device)</span>
<span id="cb44-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the loss function and optimizer</span></span>
<span id="cb44-31">    criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MSELoss()</span>
<span id="cb44-32">    optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb44-33">    losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb44-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training loop</span></span>
<span id="cb44-35">    num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb44-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_epochs):</span>
<span id="cb44-37">        model.train()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to training mode</span></span>
<span id="cb44-38">        total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb44-39">        </span>
<span id="cb44-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> inputs, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> train_loader:</span>
<span id="cb44-41">            optimizer.zero_grad()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zero the gradients</span></span>
<span id="cb44-42">            inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device)</span>
<span id="cb44-43">            targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets.to(device)</span>
<span id="cb44-44">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb44-45">            outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb44-46">            </span>
<span id="cb44-47">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the loss</span></span>
<span id="cb44-48">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, targets)</span>
<span id="cb44-49">            </span>
<span id="cb44-50">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backpropagation</span></span>
<span id="cb44-51">            loss.backward()</span>
<span id="cb44-52">            optimizer.step()</span>
<span id="cb44-53">            </span>
<span id="cb44-54">            total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb44-55"></span>
<span id="cb44-56">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the average loss for this epoch</span></span>
<span id="cb44-57">        average_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_loader)</span>
<span id="cb44-58">        losses.append(average_loss)</span>
<span id="cb44-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb44-60">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Epoch [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_epochs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>average_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb44-61">    </span>
<span id="cb44-62">    </span>
<span id="cb44-63">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">############################# testing the model #############################</span></span>
<span id="cb44-64">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to evaluation mode</span></span>
<span id="cb44-65">    test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb44-66"></span>
<span id="cb44-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb44-68">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> inputs, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_loader:</span>
<span id="cb44-69">            inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device)</span>
<span id="cb44-70">            targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets.to(device)</span>
<span id="cb44-71"></span>
<span id="cb44-72">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb44-73">            outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb44-74"></span>
<span id="cb44-75">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the loss</span></span>
<span id="cb44-76">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, targets)</span>
<span id="cb44-77"></span>
<span id="cb44-78">            test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb44-79"></span>
<span id="cb44-80">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the average test loss</span></span>
<span id="cb44-81">    average_test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_loader)</span>
<span id="cb44-82">    test_loss_list_P_25.append(average_test_loss)</span>
<span id="cb44-83">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Average Test Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>average_test_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb44-84">    </span>
<span id="cb44-85">    plt.plot(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), losses)</span>
<span id="cb44-86">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Epoch'</span>)</span>
<span id="cb44-87">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss'</span>)</span>
<span id="cb44-88">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Train Loss vs. Epoch for channel '</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>target_var_96_list[x_channel])</span>
<span id="cb44-89">    plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb44-90">    plt.show() </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  TSURF_K
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 405.4315
Epoch [21/200] Loss: 214.5978
Epoch [41/200] Loss: 215.0236
Epoch [61/200] Loss: 207.2482
Epoch [81/200] Loss: 206.7534
Epoch [101/200] Loss: 213.1840
Epoch [121/200] Loss: 207.5252
Epoch [141/200] Loss: 208.2888
Epoch [161/200] Loss: 209.6494
Epoch [181/200] Loss: 209.7600
Average Test Loss: 190.0971</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-33-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-33-output-2.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  SNOWEW_M
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 464.9160
Epoch [21/200] Loss: 206.1055
Epoch [41/200] Loss: 210.0196
Epoch [61/200] Loss: 209.2211
Epoch [81/200] Loss: 211.8091
Epoch [101/200] Loss: 205.4592
Epoch [121/200] Loss: 203.9590
Epoch [141/200] Loss: 208.5030
Epoch [161/200] Loss: 207.1320
Epoch [181/200] Loss: 204.3017
Average Test Loss: 189.7174</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-33-output-4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-33-output-4.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  SNOWAGE_HR
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 460.0334
Epoch [21/200] Loss: 207.1043
Epoch [41/200] Loss: 206.5882
Epoch [61/200] Loss: 208.3192
Epoch [81/200] Loss: 205.4035
Epoch [101/200] Loss: 209.7349
Epoch [121/200] Loss: 205.5515
Epoch [141/200] Loss: 206.1994
Epoch [161/200] Loss: 205.4001
Epoch [181/200] Loss: 206.3801
Average Test Loss: 190.0263</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-33-output-6.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-33-output-6.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  PRATE_MMpH
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 476.9623
Epoch [21/200] Loss: 207.3108
Epoch [41/200] Loss: 208.4855
Epoch [61/200] Loss: 206.4735
Epoch [81/200] Loss: 205.5895
Epoch [101/200] Loss: 205.6536
Epoch [121/200] Loss: 205.9680
Epoch [141/200] Loss: 205.7129
Epoch [161/200] Loss: 208.6799
Epoch [181/200] Loss: 205.6486
Average Test Loss: 189.6717</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-33-output-8.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-33-output-8.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  CLOUD_OD
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 599.1686
Epoch [21/200] Loss: 454.3787
Epoch [41/200] Loss: 149.9270
Epoch [61/200] Loss: 23.7072
Epoch [81/200] Loss: 7.4556
Epoch [101/200] Loss: 18.4050
Epoch [121/200] Loss: 3.0840
Epoch [141/200] Loss: 100.6344
Epoch [161/200] Loss: 25.9631
Epoch [181/200] Loss: 38.8335
Average Test Loss: 9.8902</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-33-output-10.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-33-output-10.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  U10_MpS
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 373.7542
Epoch [21/200] Loss: 51.2008
Epoch [41/200] Loss: 37.7057
Epoch [61/200] Loss: 25.3702
Epoch [81/200] Loss: 0.2791
Epoch [101/200] Loss: 20.1649
Epoch [121/200] Loss: 0.2297
Epoch [141/200] Loss: 84.8078
Epoch [161/200] Loss: 2.4612
Epoch [181/200] Loss: 1.4404
Average Test Loss: 0.7598</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-33-output-12.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-33-output-12.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  V10_MpS
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 399.2307
Epoch [21/200] Loss: 1.1263
Epoch [41/200] Loss: 0.0137
Epoch [61/200] Loss: 0.0820
Epoch [81/200] Loss: 2.3733
Epoch [101/200] Loss: 0.0002
Epoch [121/200] Loss: 0.0113
Epoch [141/200] Loss: 0.0393
Epoch [161/200] Loss: 11.0771
Epoch [181/200] Loss: 0.0003
Average Test Loss: 0.0507</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-33-output-14.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-33-output-14.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  T2_K
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 412.2657
Epoch [21/200] Loss: 210.9129
Epoch [41/200] Loss: 209.2686
Epoch [61/200] Loss: 206.7048
Epoch [81/200] Loss: 206.0187
Epoch [101/200] Loss: 209.1361
Epoch [121/200] Loss: 212.1444
Epoch [141/200] Loss: 206.8286
Epoch [161/200] Loss: 205.8083
Epoch [181/200] Loss: 208.7421
Average Test Loss: 190.9819</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-33-output-16.png" class="lightbox" data-gallery="quarto-lightbox-gallery-12"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-33-output-16.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  SWSFC_WpM2
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 485.4561
Epoch [21/200] Loss: 210.1752
Epoch [41/200] Loss: 207.2874
Epoch [61/200] Loss: 207.9026
Epoch [81/200] Loss: 206.2404
Epoch [101/200] Loss: 205.9271
Epoch [121/200] Loss: 205.6481
Epoch [141/200] Loss: 208.2400
Epoch [161/200] Loss: 205.4081
Epoch [181/200] Loss: 205.1859
Average Test Loss: 199.1508</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-33-output-18.png" class="lightbox" data-gallery="quarto-lightbox-gallery-13"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-33-output-18.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  SOLM_M3pM3
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 305.6402
Epoch [21/200] Loss: 176.6024
Epoch [41/200] Loss: 161.6851
Epoch [61/200] Loss: 157.7673
Epoch [81/200] Loss: 138.7664
Epoch [101/200] Loss: 132.1217
Epoch [121/200] Loss: 109.4900
Epoch [141/200] Loss: 104.2382
Epoch [161/200] Loss: 69.5860
Epoch [181/200] Loss: 50.0248
Average Test Loss: 42.1182</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-33-output-20.png" class="lightbox" data-gallery="quarto-lightbox-gallery-14"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-33-output-20.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  CLDTOP_KM
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 461.0668
Epoch [21/200] Loss: 205.2268
Epoch [41/200] Loss: 213.0740
Epoch [61/200] Loss: 206.9702
Epoch [81/200] Loss: 205.7769
Epoch [101/200] Loss: 210.3533
Epoch [121/200] Loss: 206.2578
Epoch [141/200] Loss: 207.2727
Epoch [161/200] Loss: 205.3765
Epoch [181/200] Loss: 206.2520
Average Test Loss: 192.2221</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-33-output-22.png" class="lightbox" data-gallery="quarto-lightbox-gallery-15"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-33-output-22.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  CAPE
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 468.8439
Epoch [21/200] Loss: 207.2851
Epoch [41/200] Loss: 211.7429
Epoch [61/200] Loss: 205.8536
Epoch [81/200] Loss: 205.3124
Epoch [101/200] Loss: 207.8155
Epoch [121/200] Loss: 208.3488
Epoch [141/200] Loss: 206.0120
Epoch [161/200] Loss: 205.9442
Epoch [181/200] Loss: 204.1215
Average Test Loss: 190.8858</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-33-output-24.png" class="lightbox" data-gallery="quarto-lightbox-gallery-16"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-33-output-24.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  PBL_WRF_M
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 287.4021
Epoch [21/200] Loss: 209.5118
Epoch [41/200] Loss: 209.2537
Epoch [61/200] Loss: 206.0375
Epoch [81/200] Loss: 207.1711
Epoch [101/200] Loss: 205.2734
Epoch [121/200] Loss: 210.4286
Epoch [141/200] Loss: 207.5243
Epoch [161/200] Loss: 208.9856
Epoch [181/200] Loss: 204.6973
Average Test Loss: 191.9669</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-33-output-26.png" class="lightbox" data-gallery="quarto-lightbox-gallery-17"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-33-output-26.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  PBL_YSU_M
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 323.2034
Epoch [21/200] Loss: 207.3925
Epoch [41/200] Loss: 210.0555
Epoch [61/200] Loss: 206.0877
Epoch [81/200] Loss: 207.9315
Epoch [101/200] Loss: 207.4798
Epoch [121/200] Loss: 206.1072
Epoch [141/200] Loss: 207.4259
Epoch [161/200] Loss: 209.3318
Epoch [181/200] Loss: 207.3006
Average Test Loss: 194.3565</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-33-output-28.png" class="lightbox" data-gallery="quarto-lightbox-gallery-18"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-33-output-28.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-46" class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">test_loss_list_P_25</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[190.09705144708806,
 189.7173545143821,
 190.02632834694603,
 189.67173489657316,
 9.890190774744207,
 0.7598354017192667,
 0.050707115029746834,
 190.98193498091265,
 199.15079567649147,
 42.118152445012875,
 192.22213883833453,
 190.88581431995738,
 191.9668634588068,
 194.3564910888672]</code></pre>
</div>
</div>
<div id="cell-47" class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">name_loss_pairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(target_var_96_list, test_loss_list_P_25))</span>
<span id="cb61-2"></span>
<span id="cb61-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort based on loss values</span></span>
<span id="cb61-4">sorted_name_loss_pairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(name_loss_pairs, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb61-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pair <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sorted_name_loss_pairs:</span>
<span id="cb61-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(pair)</span>
<span id="cb61-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(sorted_name_loss_pairs)</span></span>
<span id="cb61-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the lowest 3 names</span></span>
<span id="cb61-9">lowest_3_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [pair[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pair <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sorted_name_loss_pairs[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]]</span>
<span id="cb61-10"></span>
<span id="cb61-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lowest 3 names:"</span>, lowest_3_names)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>('V10_MpS', 0.050707115029746834)
('U10_MpS', 0.7598354017192667)
('CLOUD_OD', 9.890190774744207)
('SOLM_M3pM3', 42.118152445012875)
('PRATE_MMpH', 189.67173489657316)
('SNOWEW_M', 189.7173545143821)
('SNOWAGE_HR', 190.02632834694603)
('TSURF_K', 190.09705144708806)
('CAPE', 190.88581431995738)
('T2_K', 190.98193498091265)
('PBL_WRF_M', 191.9668634588068)
('CLDTOP_KM', 192.22213883833453)
('PBL_YSU_M', 194.3564910888672)
('SWSFC_WpM2', 199.15079567649147)
Lowest 3 names: ['V10_MpS', 'U10_MpS', 'CLOUD_OD']</code></pre>
</div>
</div>
</section>
<section id="training-single-channel-input-and-outputp25-1" class="level2">
<h2 class="anchored" data-anchor-id="training-single-channel-input-and-outputp25-1">Training single channel input and output(P25)</h2>
<div id="cell-49" class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1">test_loss_list_P_10 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb63-2">y_channel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb63-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x_channel = 0</span></span>
<span id="cb63-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x_channel <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):</span>
<span id="cb63-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">####################### Selecting the channel #######################</span></span>
<span id="cb63-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X Channel name : '</span>, target_var_96_list[x_channel])</span>
<span id="cb63-7">    X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train_all[:, x_channel, :,:]</span>
<span id="cb63-8">    X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_test_all[:, x_channel, :,:]</span>
<span id="cb63-9">    y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_train_all[:, y_channel, :,:]</span>
<span id="cb63-10">    y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_test_all[:, y_channel, :,:]</span>
<span id="cb63-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Shapes: '</span>, X_train.shape, X_test.shape, y_train.shape, y_test.shape)</span>
<span id="cb63-12"></span>
<span id="cb63-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">####################### Creating the dataset loader #######################</span></span>
<span id="cb63-14">    train_custom_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomDataset(X_train, y_train)</span>
<span id="cb63-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(train_custom_dataset))</span></span>
<span id="cb63-16">    batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb63-17">    train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.DataLoader(train_custom_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb63-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(train_loader))</span></span>
<span id="cb63-19">    </span>
<span id="cb63-20">    test_custom_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomDataset(X_test, y_test)</span>
<span id="cb63-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(test_custom_dataset))</span></span>
<span id="cb63-22">    batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb63-23">    test_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.DataLoader(test_custom_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb63-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(test_loader))</span></span>
<span id="cb63-25">    </span>
<span id="cb63-26"></span>
<span id="cb63-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#################### Training the model ####################</span></span>
<span id="cb63-28">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Autoencoder_MLP()</span>
<span id="cb63-29">    model.to(device)</span>
<span id="cb63-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the loss function and optimizer</span></span>
<span id="cb63-31">    criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MSELoss()</span>
<span id="cb63-32">    optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb63-33">    losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb63-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training loop</span></span>
<span id="cb63-35">    num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb63-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_epochs):</span>
<span id="cb63-37">        model.train()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to training mode</span></span>
<span id="cb63-38">        total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb63-39">        </span>
<span id="cb63-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> inputs, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> train_loader:</span>
<span id="cb63-41">            optimizer.zero_grad()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zero the gradients</span></span>
<span id="cb63-42">            inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device)</span>
<span id="cb63-43">            targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets.to(device)</span>
<span id="cb63-44">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb63-45">            outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb63-46">            </span>
<span id="cb63-47">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the loss</span></span>
<span id="cb63-48">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, targets)</span>
<span id="cb63-49">            </span>
<span id="cb63-50">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backpropagation</span></span>
<span id="cb63-51">            loss.backward()</span>
<span id="cb63-52">            optimizer.step()</span>
<span id="cb63-53">            </span>
<span id="cb63-54">            total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb63-55"></span>
<span id="cb63-56">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the average loss for this epoch</span></span>
<span id="cb63-57">        average_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_loader)</span>
<span id="cb63-58">        losses.append(average_loss)</span>
<span id="cb63-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb63-60">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Epoch [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_epochs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>average_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb63-61">    </span>
<span id="cb63-62">    </span>
<span id="cb63-63">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">############################# testing the model #############################</span></span>
<span id="cb63-64">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to evaluation mode</span></span>
<span id="cb63-65">    test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb63-66"></span>
<span id="cb63-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb63-68">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> inputs, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_loader:</span>
<span id="cb63-69">            inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device)</span>
<span id="cb63-70">            targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets.to(device)</span>
<span id="cb63-71"></span>
<span id="cb63-72">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb63-73">            outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb63-74"></span>
<span id="cb63-75">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the loss</span></span>
<span id="cb63-76">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, targets)</span>
<span id="cb63-77"></span>
<span id="cb63-78">            test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb63-79"></span>
<span id="cb63-80">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the average test loss</span></span>
<span id="cb63-81">    average_test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_loader)</span>
<span id="cb63-82">    test_loss_list_P_10.append(average_test_loss)</span>
<span id="cb63-83">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Average Test Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>average_test_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb63-84">    </span>
<span id="cb63-85">    plt.plot(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), losses)</span>
<span id="cb63-86">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Epoch'</span>)</span>
<span id="cb63-87">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss'</span>)</span>
<span id="cb63-88">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Train Loss vs. Epoch for channel '</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>target_var_96_list[x_channel])</span>
<span id="cb63-89">    plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb63-90">    plt.show() </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  TSURF_K
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 689.7490
Epoch [21/200] Loss: 418.6676
Epoch [41/200] Loss: 410.9685
Epoch [61/200] Loss: 404.8066
Epoch [81/200] Loss: 400.5351
Epoch [101/200] Loss: 401.0250
Epoch [121/200] Loss: 401.0659
Epoch [141/200] Loss: 403.6432
Epoch [161/200] Loss: 402.2360
Epoch [181/200] Loss: 407.2921
Average Test Loss: 401.8882</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-36-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-19"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-36-output-2.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  SNOWEW_M
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 1031.9999
Epoch [21/200] Loss: 405.7656
Epoch [41/200] Loss: 402.2811
Epoch [61/200] Loss: 403.8337
Epoch [81/200] Loss: 398.2591
Epoch [101/200] Loss: 409.4181
Epoch [121/200] Loss: 396.3737
Epoch [141/200] Loss: 395.1861
Epoch [161/200] Loss: 403.0066
Epoch [181/200] Loss: 397.6094
Average Test Loss: 361.2384</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-36-output-4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-20"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-36-output-4.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  SNOWAGE_HR
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 1050.1397
Epoch [21/200] Loss: 397.1798
Epoch [41/200] Loss: 401.0453
Epoch [61/200] Loss: 401.7171
Epoch [81/200] Loss: 400.2689
Epoch [101/200] Loss: 396.7101
Epoch [121/200] Loss: 404.5816
Epoch [141/200] Loss: 397.7231
Epoch [161/200] Loss: 394.6489
Epoch [181/200] Loss: 399.8899
Average Test Loss: 362.0641</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-36-output-6.png" class="lightbox" data-gallery="quarto-lightbox-gallery-21"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-36-output-6.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  PRATE_MMpH
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 1034.3143
Epoch [21/200] Loss: 399.8861
Epoch [41/200] Loss: 399.7876
Epoch [61/200] Loss: 395.9112
Epoch [81/200] Loss: 400.4803
Epoch [101/200] Loss: 396.5552
Epoch [121/200] Loss: 401.0467
Epoch [141/200] Loss: 406.4987
Epoch [161/200] Loss: 401.3759
Epoch [181/200] Loss: 397.4671
Average Test Loss: 361.1263</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-36-output-8.png" class="lightbox" data-gallery="quarto-lightbox-gallery-22"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-36-output-8.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  CLOUD_OD
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 1214.4916
Epoch [21/200] Loss: 725.7131
Epoch [41/200] Loss: 220.5272
Epoch [61/200] Loss: 23.5934
Epoch [81/200] Loss: 8.8063
Epoch [101/200] Loss: 274.7881
Epoch [121/200] Loss: 218.0335
Epoch [141/200] Loss: 232.4360
Epoch [161/200] Loss: 212.6520
Epoch [181/200] Loss: 195.4785
Average Test Loss: 180.2198</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-36-output-10.png" class="lightbox" data-gallery="quarto-lightbox-gallery-23"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-36-output-10.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  U10_MpS
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 822.4214
Epoch [21/200] Loss: 182.0370
Epoch [41/200] Loss: 50.0221
Epoch [61/200] Loss: 60.5883
Epoch [81/200] Loss: 37.8001
Epoch [101/200] Loss: 2.6386
Epoch [121/200] Loss: 0.0629
Epoch [141/200] Loss: 76.5106
Epoch [161/200] Loss: 41.2225
Epoch [181/200] Loss: 4.6194
Average Test Loss: 0.6711</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-36-output-12.png" class="lightbox" data-gallery="quarto-lightbox-gallery-24"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-36-output-12.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  V10_MpS
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 1160.5402
Epoch [21/200] Loss: 8.7026
Epoch [41/200] Loss: 0.3045
Epoch [61/200] Loss: 0.1493
Epoch [81/200] Loss: 0.1235
Epoch [101/200] Loss: 5.4404
Epoch [121/200] Loss: 0.0000
Epoch [141/200] Loss: 10.2387
Epoch [161/200] Loss: 0.2644
Epoch [181/200] Loss: 0.0284
Average Test Loss: 0.6849</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-36-output-14.png" class="lightbox" data-gallery="quarto-lightbox-gallery-25"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-36-output-14.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  T2_K
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 646.6076
Epoch [21/200] Loss: 412.2161
Epoch [41/200] Loss: 407.6458
Epoch [61/200] Loss: 403.7684
Epoch [81/200] Loss: 399.9570
Epoch [101/200] Loss: 397.7386
Epoch [121/200] Loss: 402.0990
Epoch [141/200] Loss: 397.6674
Epoch [161/200] Loss: 398.1612
Epoch [181/200] Loss: 403.3343
Average Test Loss: 360.5232</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-36-output-16.png" class="lightbox" data-gallery="quarto-lightbox-gallery-26"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-36-output-16.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  SWSFC_WpM2
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 1027.1539
Epoch [21/200] Loss: 403.9408
Epoch [41/200] Loss: 401.9444
Epoch [61/200] Loss: 399.7967
Epoch [81/200] Loss: 401.7070
Epoch [101/200] Loss: 404.1586
Epoch [121/200] Loss: 398.2909
Epoch [141/200] Loss: 396.0758
Epoch [161/200] Loss: 396.4020
Epoch [181/200] Loss: 402.5728
Average Test Loss: 362.6420</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-36-output-18.png" class="lightbox" data-gallery="quarto-lightbox-gallery-27"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-36-output-18.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  SOLM_M3pM3
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 696.3634
Epoch [21/200] Loss: 331.1351
Epoch [41/200] Loss: 296.5541
Epoch [61/200] Loss: 301.9112
Epoch [81/200] Loss: 272.0759
Epoch [101/200] Loss: 251.3878
Epoch [121/200] Loss: 232.4279
Epoch [141/200] Loss: 170.0628
Epoch [161/200] Loss: 138.8842
Epoch [181/200] Loss: 108.4864
Average Test Loss: 110.6638</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-36-output-20.png" class="lightbox" data-gallery="quarto-lightbox-gallery-28"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-36-output-20.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  CLDTOP_KM
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 1017.6373
Epoch [21/200] Loss: 400.4651
Epoch [41/200] Loss: 405.2223
Epoch [61/200] Loss: 402.9269
Epoch [81/200] Loss: 400.7290
Epoch [101/200] Loss: 400.5154
Epoch [121/200] Loss: 404.1065
Epoch [141/200] Loss: 403.8573
Epoch [161/200] Loss: 397.0463
Epoch [181/200] Loss: 398.1819
Average Test Loss: 361.3055</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-36-output-22.png" class="lightbox" data-gallery="quarto-lightbox-gallery-29"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-36-output-22.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  CAPE
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 1029.8392
Epoch [21/200] Loss: 401.8889
Epoch [41/200] Loss: 399.1993
Epoch [61/200] Loss: 400.2419
Epoch [81/200] Loss: 396.8849
Epoch [101/200] Loss: 395.3639
Epoch [121/200] Loss: 401.5739
Epoch [141/200] Loss: 403.1417
Epoch [161/200] Loss: 402.3704
Epoch [181/200] Loss: 400.0658
Average Test Loss: 361.0597</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-36-output-24.png" class="lightbox" data-gallery="quarto-lightbox-gallery-30"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-36-output-24.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  PBL_WRF_M
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 536.0374
Epoch [21/200] Loss: 401.9832
Epoch [41/200] Loss: 402.4697
Epoch [61/200] Loss: 404.1890
Epoch [81/200] Loss: 400.4949
Epoch [101/200] Loss: 399.0872
Epoch [121/200] Loss: 398.4192
Epoch [141/200] Loss: 400.4667
Epoch [161/200] Loss: 398.1382
Epoch [181/200] Loss: 408.3430
Average Test Loss: 360.3921</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-36-output-26.png" class="lightbox" data-gallery="quarto-lightbox-gallery-31"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-36-output-26.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  PBL_YSU_M
Shapes:  (1324, 80, 80) (332, 80, 80) (1324, 80, 80) (332, 80, 80)
Epoch [1/200] Loss: 538.3320
Epoch [21/200] Loss: 405.8272
Epoch [41/200] Loss: 430.2409
Epoch [61/200] Loss: 398.9199
Epoch [81/200] Loss: 404.8572
Epoch [101/200] Loss: 397.2876
Epoch [121/200] Loss: 403.3052
Epoch [141/200] Loss: 401.7307
Epoch [161/200] Loss: 396.1157
Epoch [181/200] Loss: 399.0870
Average Test Loss: 361.4502</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-36-output-28.png" class="lightbox" data-gallery="quarto-lightbox-gallery-32"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-36-output-28.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-50" class="cell">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1">test_loss_list_P_10</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[401.88824185458094,
 361.23838112571025,
 362.0641340775923,
 361.1262997713956,
 180.2197820490057,
 0.6710819737477736,
 0.6848962740464644,
 360.5232141668146,
 362.6420177112926,
 110.6638252951882,
 361.3054504394531,
 361.05967018821025,
 360.39211342551494,
 361.45016063343394]</code></pre>
</div>
</div>
<div id="cell-51" class="cell">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1">name_loss_pairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(target_var_96_list, test_loss_list_P_10))</span>
<span id="cb80-2"></span>
<span id="cb80-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort based on loss values</span></span>
<span id="cb80-4">sorted_name_loss_pairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(name_loss_pairs, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb80-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pair <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sorted_name_loss_pairs:</span>
<span id="cb80-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(pair)</span>
<span id="cb80-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(sorted_name_loss_pairs)</span></span>
<span id="cb80-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the lowest 3 names</span></span>
<span id="cb80-9">lowest_3_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [pair[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pair <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sorted_name_loss_pairs[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]]</span>
<span id="cb80-10"></span>
<span id="cb80-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lowest 3 names:"</span>, lowest_3_names)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>('U10_MpS', 0.6710819737477736)
('V10_MpS', 0.6848962740464644)
('SOLM_M3pM3', 110.6638252951882)
('CLOUD_OD', 180.2197820490057)
('PBL_WRF_M', 360.39211342551494)
('T2_K', 360.5232141668146)
('CAPE', 361.05967018821025)
('PRATE_MMpH', 361.1262997713956)
('SNOWEW_M', 361.23838112571025)
('CLDTOP_KM', 361.3054504394531)
('PBL_YSU_M', 361.45016063343394)
('SNOWAGE_HR', 362.0641340775923)
('SWSFC_WpM2', 362.6420177112926)
('TSURF_K', 401.88824185458094)
Lowest 3 names: ['U10_MpS', 'V10_MpS', 'SOLM_M3pM3']</code></pre>
</div>
</div>
</section>
<section id="insights" class="level2">
<h2 class="anchored" data-anchor-id="insights">Insights</h2>
<div id="cell-53" class="cell">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adding values at corresponding indices</span></span>
<span id="cb82-2">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x, y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(test_loss_list_P_10, test_loss_list_P_25)]</span>
<span id="cb82-3"></span>
<span id="cb82-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a DataFrame</span></span>
<span id="cb82-5">data_frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Input channel'</span>: target_var_96_list, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P10'</span>: test_loss_list_P_10, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P25'</span>: test_loss_list_P_25, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P10+P25 avg'</span>: result}</span>
<span id="cb82-6">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(data_frame)</span>
<span id="cb82-7"></span>
<span id="cb82-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sorting the DataFrame based on "List1 + List2"</span></span>
<span id="cb82-9">df_sorted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.sort_values(by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P10+P25 avg'</span>)</span>
<span id="cb82-10"></span>
<span id="cb82-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Displaying the sorted DataFrame</span></span>
<span id="cb82-12"></span>
<span id="cb82-13">df_rounded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_sorted.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb82-14">df_rounded.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/rishabh.mondal/climax_alternative/Climax_2/results/test_loss_list_P_10_P25_MLP_auto.csv'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb82-15">df_rounded</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Input channel</th>
<th data-quarto-table-cell-role="th">P10</th>
<th data-quarto-table-cell-role="th">P25</th>
<th data-quarto-table-cell-role="th">P10+P25 avg</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>V10_MpS</td>
<td>0.7</td>
<td>0.1</td>
<td>0.4</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>U10_MpS</td>
<td>0.7</td>
<td>0.8</td>
<td>0.7</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">9</td>
<td>SOLM_M3pM3</td>
<td>110.7</td>
<td>42.1</td>
<td>76.4</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4</td>
<td>CLOUD_OD</td>
<td>180.2</td>
<td>9.9</td>
<td>95.1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">3</td>
<td>PRATE_MMpH</td>
<td>361.1</td>
<td>189.7</td>
<td>275.4</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>SNOWEW_M</td>
<td>361.2</td>
<td>189.7</td>
<td>275.5</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">7</td>
<td>T2_K</td>
<td>360.5</td>
<td>191.0</td>
<td>275.8</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>CAPE</td>
<td>361.1</td>
<td>190.9</td>
<td>276.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>SNOWAGE_HR</td>
<td>362.1</td>
<td>190.0</td>
<td>276.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">12</td>
<td>PBL_WRF_M</td>
<td>360.4</td>
<td>192.0</td>
<td>276.2</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>CLDTOP_KM</td>
<td>361.3</td>
<td>192.2</td>
<td>276.8</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>PBL_YSU_M</td>
<td>361.5</td>
<td>194.4</td>
<td>277.9</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>SWSFC_WpM2</td>
<td>362.6</td>
<td>199.2</td>
<td>280.9</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">0</td>
<td>TSURF_K</td>
<td>401.9</td>
<td>190.1</td>
<td>296.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
</section>
<section id="autoencoder-with-convolutional-layers" class="level1">
<h1>Autoencoder with convolutional layers</h1>
<section id="model-defination-1" class="level2">
<h2 class="anchored" data-anchor-id="model-defination-1">Model defination</h2>
<p><img src="https://jaiswalsuraj487.github.io/publications_and_projects/images/autoencoder/Conv_autoencoder_architecture.png" width="800"></p>
<div id="cell-57" class="cell">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Encoder(nn.Module):</span>
<span id="cb83-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, image_size, num_input_channels, num_output_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.GELU):</span>
<span id="cb83-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Encoder, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>() </span>
<span id="cb83-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_size</span>
<span id="cb83-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_input_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_input_channels</span>
<span id="cb83-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_output_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_output_channels</span>
<span id="cb83-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c_hid </span>
<span id="cb83-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> latent_dim</span>
<span id="cb83-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation</span>
<span id="cb83-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.net <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential( </span>
<span id="cb83-11">            nn.Conv2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_input_channels, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb83-12">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(),</span>
<span id="cb83-13">            nn.Conv2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb83-14">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(),</span>
<span id="cb83-15">            nn.Conv2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb83-16">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(),</span>
<span id="cb83-17">            nn.Conv2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb83-18">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(),</span>
<span id="cb83-19">            nn.Conv2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb83-20">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(),</span>
<span id="cb83-21">            nn.Flatten(),</span>
<span id="cb83-22">            nn.Linear((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latent_dim)</span>
<span id="cb83-23">        ) </span>
<span id="cb83-24">        </span>
<span id="cb83-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb83-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.net(x)</span>
<span id="cb83-27"></span>
<span id="cb83-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Decoder(nn.Module):</span>
<span id="cb83-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, image_size, num_input_channels, num_output_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.GELU):</span>
<span id="cb83-30">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Decoder, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb83-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_size</span>
<span id="cb83-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_input_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_input_channels</span>
<span id="cb83-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_output_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_output_channels</span>
<span id="cb83-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c_hid</span>
<span id="cb83-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> latent_dim</span>
<span id="cb83-36">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation</span>
<span id="cb83-37"></span>
<span id="cb83-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb83-39">            nn.Linear(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latent_dim, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>),</span>
<span id="cb83-40">            nn.Unflatten(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)),</span>
<span id="cb83-41">            nn.ConvTranspose2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, output_padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb83-42">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(),</span>
<span id="cb83-43">            nn.Conv2d(in_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb83-44">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(),</span>
<span id="cb83-45">            nn.ConvTranspose2d(in_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, out_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, output_padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb83-46">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(),</span>
<span id="cb83-47">            nn.Conv2d(in_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid,out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb83-48">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(),</span>
<span id="cb83-49">            nn.ConvTranspose2d(in_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_output_channels, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, output_padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb83-50"></span>
<span id="cb83-51">        )</span>
<span id="cb83-52">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb83-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder(x)</span>
<span id="cb83-54"></span>
<span id="cb83-55"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Autoencoder_CNN(nn.Module):</span>
<span id="cb83-56">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, image_size, num_input_channels, num_output_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.GELU, encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Encoder, decoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Decoder):</span>
<span id="cb83-57">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Autoencoder_CNN, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb83-58">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_size</span>
<span id="cb83-59">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_input_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_input_channels</span>
<span id="cb83-60">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_output_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_output_channels</span>
<span id="cb83-61">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c_hid</span>
<span id="cb83-62">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> latent_dim </span>
<span id="cb83-63">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation    </span>
<span id="cb83-64">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoder(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_size, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_input_channels, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_output_channels, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latent_dim, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation)</span>
<span id="cb83-65">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decoder(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_size, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_input_channels, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_output_channels, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latent_dim, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation)</span>
<span id="cb83-66">        </span>
<span id="cb83-67">    </span>
<span id="cb83-68">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb83-69">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder(x)</span>
<span id="cb83-70">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(x.shape)</span></span>
<span id="cb83-71">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder(x)</span>
<span id="cb83-72">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x</span></code></pre></div>
</div>
<div id="cell-58" class="cell">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1">model_auto <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Autoencoder_CNN(image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, num_input_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, num_output_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.GELU)</span>
<span id="cb84-2">model_auto</span>
<span id="cb84-3">dummy_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming input size of (batch_size, num_num_input_channels, height, width)</span></span>
<span id="cb84-4">out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_auto(dummy_input)</span>
<span id="cb84-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(out.shape)    </span>
<span id="cb84-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(model_auto)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([11, 2, 80, 80])
Autoencoder_CNN(
  (encoder): Encoder(
    (net): Sequential(
      (0): Conv2d(14, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (1): GELU(approximate='none')
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): GELU(approximate='none')
      (4): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (5): GELU(approximate='none')
      (6): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (7): GELU(approximate='none')
      (8): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (9): GELU(approximate='none')
      (10): Flatten(start_dim=1, end_dim=-1)
      (11): Linear(in_features=6400, out_features=1024, bias=True)
    )
  )
  (decoder): Decoder(
    (decoder): Sequential(
      (0): Linear(in_features=1024, out_features=6400, bias=True)
      (1): Unflatten(dim=1, unflattened_size=(64, 10, 10))
      (2): ConvTranspose2d(64, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (3): GELU(approximate='none')
      (4): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GELU(approximate='none')
      (6): ConvTranspose2d(32, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (7): GELU(approximate='none')
      (8): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GELU(approximate='none')
      (10): ConvTranspose2d(16, 2, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
    )
  )
)</code></pre>
</div>
</div>
<div id="cell-59" class="cell">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchinfo <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> summary</span>
<span id="cb86-2">summary(model_auto, input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1656</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
Autoencoder_CNN                          [1656, 2, 80, 80]         --
├─Encoder: 1-1                           [1656, 1024]              --
│    └─Sequential: 2-1                   [1656, 1024]              --
│    │    └─Conv2d: 3-1                  [1656, 16, 40, 40]        2,032
│    │    └─GELU: 3-2                    [1656, 16, 40, 40]        --
│    │    └─Conv2d: 3-3                  [1656, 16, 40, 40]        2,320
│    │    └─GELU: 3-4                    [1656, 16, 40, 40]        --
│    │    └─Conv2d: 3-5                  [1656, 32, 20, 20]        4,640
│    │    └─GELU: 3-6                    [1656, 32, 20, 20]        --
│    │    └─Conv2d: 3-7                  [1656, 32, 20, 20]        9,248
│    │    └─GELU: 3-8                    [1656, 32, 20, 20]        --
│    │    └─Conv2d: 3-9                  [1656, 64, 10, 10]        18,496
│    │    └─GELU: 3-10                   [1656, 64, 10, 10]        --
│    │    └─Flatten: 3-11                [1656, 6400]              --
│    │    └─Linear: 3-12                 [1656, 1024]              6,554,624
├─Decoder: 1-2                           [1656, 2, 80, 80]         --
│    └─Sequential: 2-2                   [1656, 2, 80, 80]         --
│    │    └─Linear: 3-13                 [1656, 6400]              6,560,000
│    │    └─Unflatten: 3-14              [1656, 64, 10, 10]        --
│    │    └─ConvTranspose2d: 3-15        [1656, 32, 20, 20]        18,464
│    │    └─GELU: 3-16                   [1656, 32, 20, 20]        --
│    │    └─Conv2d: 3-17                 [1656, 32, 20, 20]        9,248
│    │    └─GELU: 3-18                   [1656, 32, 20, 20]        --
│    │    └─ConvTranspose2d: 3-19        [1656, 16, 40, 40]        4,624
│    │    └─GELU: 3-20                   [1656, 16, 40, 40]        --
│    │    └─Conv2d: 3-21                 [1656, 16, 40, 40]        2,320
│    │    └─GELU: 3-22                   [1656, 16, 40, 40]        --
│    │    └─ConvTranspose2d: 3-23        [1656, 2, 80, 80]         290
==========================================================================================
Total params: 13,186,306
Trainable params: 13,186,306
Non-trainable params: 0
Total mult-adds (Units.GIGABYTES): 85.34
==========================================================================================
Input size (MB): 593.51
Forward/backward pass size (MB): 2387.61
Params size (MB): 52.75
Estimated Total Size (MB): 3033.86
==========================================================================================</code></pre>
</div>
</div>
<div id="cell-60" class="cell">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchsummary <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> summary</span>
<span id="cb88-2">summary(model_auto, input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1           [-1, 16, 40, 40]           2,032
              GELU-2           [-1, 16, 40, 40]               0
            Conv2d-3           [-1, 16, 40, 40]           2,320
              GELU-4           [-1, 16, 40, 40]               0
            Conv2d-5           [-1, 32, 20, 20]           4,640
              GELU-6           [-1, 32, 20, 20]               0
            Conv2d-7           [-1, 32, 20, 20]           9,248
              GELU-8           [-1, 32, 20, 20]               0
            Conv2d-9           [-1, 64, 10, 10]          18,496
             GELU-10           [-1, 64, 10, 10]               0
          Flatten-11                 [-1, 6400]               0
           Linear-12                 [-1, 1024]       6,554,624
          Encoder-13                 [-1, 1024]               0
           Linear-14                 [-1, 6400]       6,560,000
        Unflatten-15           [-1, 64, 10, 10]               0
  ConvTranspose2d-16           [-1, 32, 20, 20]          18,464
             GELU-17           [-1, 32, 20, 20]               0
           Conv2d-18           [-1, 32, 20, 20]           9,248
             GELU-19           [-1, 32, 20, 20]               0
  ConvTranspose2d-20           [-1, 16, 40, 40]           4,624
             GELU-21           [-1, 16, 40, 40]               0
           Conv2d-22           [-1, 16, 40, 40]           2,320
             GELU-23           [-1, 16, 40, 40]               0
  ConvTranspose2d-24            [-1, 2, 80, 80]             290
          Decoder-25            [-1, 2, 80, 80]               0
================================================================
Total params: 13,186,306
Trainable params: 13,186,306
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.34
Forward/backward pass size (MB): 2.80
Params size (MB): 50.30
Estimated Total Size (MB): 53.44
----------------------------------------------------------------</code></pre>
</div>
</div>
</section>
<section id="training-on-all-channel-and-predicting-on-all-channel" class="level2">
<h2 class="anchored" data-anchor-id="training-on-all-channel-and-predicting-on-all-channel">training on all channel and predicting on all channel</h2>
<div id="cell-62" class="cell">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1">target_var_96_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TSURF_K'</span>,</span>
<span id="cb90-2">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SNOWEW_M'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SNOWAGE_HR'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PRATE_MMpH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CLOUD_OD'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'U10_MpS'</span>,</span>
<span id="cb90-3">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V10_MpS'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'T2_K'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SWSFC_WpM2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SOLM_M3pM3'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CLDTOP_KM'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CAPE'</span>,</span>
<span id="cb90-4">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PBL_WRF_M'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PBL_YSU_M'</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ['U10_MpS', 'T2_K', 'V10_MpS']</span></span>
<span id="cb90-5">target_var_120_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P25'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P10'</span>] </span>
<span id="cb90-6">X,y  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_data(target_var_96_list, target_var_120_list)</span>
<span id="cb90-7"></span>
<span id="cb90-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb90-9">X_train_all, X_test_all, y_train_all, y_test_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb90-10">X_train_all.shape, X_test_all.shape, y_train_all.shape, y_test_all.shape</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>X shape  (1656, 14, 80, 80)
y shape (1656, 2, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>((1324, 14, 80, 80), (332, 14, 80, 80), (1324, 2, 80, 80), (332, 2, 80, 80))</code></pre>
</div>
</div>
<div id="cell-63" class="cell">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(X_train_all.shape, X_test_all.shape, y_train_all.shape, y_test_all.shape)</span>
<span id="cb93-2">train_custom_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomDataset(X_train_all, y_train_all)</span>
<span id="cb93-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(train_custom_dataset))</span></span>
<span id="cb93-4">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb93-5">train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.DataLoader(train_custom_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb93-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(train_loader))</span></span>
<span id="cb93-7"></span>
<span id="cb93-8">test_custom_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomDataset(X_test_all, y_test_all)</span>
<span id="cb93-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(test_custom_dataset))</span></span>
<span id="cb93-10">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb93-11">test_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.DataLoader(test_custom_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb93-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(test_loader))</span></span>
<span id="cb93-13"></span>
<span id="cb93-14"></span>
<span id="cb93-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#################### Training the model ####################</span></span>
<span id="cb93-16">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Autoencoder_CNN(image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, num_input_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, num_output_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.GELU)</span>
<span id="cb93-17">model.to(device) </span>
<span id="cb93-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchinfo <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> summary</span>
<span id="cb93-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(summary(model, input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1656</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)))</span>
<span id="cb93-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the loss function and optimizer</span></span>
<span id="cb93-21">criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MSELoss()</span>
<span id="cb93-22">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb93-23">losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [] </span>
<span id="cb93-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training loop</span></span>
<span id="cb93-25">num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#200</span></span>
<span id="cb93-26"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> trange(num_epochs):</span>
<span id="cb93-27">    model.train()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to training mode</span></span>
<span id="cb93-28">    total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb93-29">    </span>
<span id="cb93-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> inputs, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> train_loader:</span>
<span id="cb93-31">        optimizer.zero_grad()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zero the gradients</span></span>
<span id="cb93-32">        inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device)</span>
<span id="cb93-33">        targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets.to(device)</span>
<span id="cb93-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb93-35">        outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb93-36">        </span>
<span id="cb93-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the loss</span></span>
<span id="cb93-38">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, targets)</span>
<span id="cb93-39">        </span>
<span id="cb93-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backpropagation</span></span>
<span id="cb93-41">        loss.backward()</span>
<span id="cb93-42">        optimizer.step()</span>
<span id="cb93-43">        </span>
<span id="cb93-44">        total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb93-45"></span>
<span id="cb93-46">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the average loss for this epoch</span></span>
<span id="cb93-47">    average_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_loader)</span>
<span id="cb93-48">    losses.append(average_loss)</span>
<span id="cb93-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: </span>
<span id="cb93-50">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Epoch [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_epochs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>average_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb93-51"></span>
<span id="cb93-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">############################# testing the model #############################</span></span>
<span id="cb93-53">        model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to evaluation mode</span></span>
<span id="cb93-54">        test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb93-55"></span>
<span id="cb93-56">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb93-57">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> inputs, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_loader:</span>
<span id="cb93-58">                inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device)</span>
<span id="cb93-59">                targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets.to(device)</span>
<span id="cb93-60"></span>
<span id="cb93-61">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb93-62">                outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb93-63"></span>
<span id="cb93-64">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the loss</span></span>
<span id="cb93-65">                loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, targets)</span>
<span id="cb93-66"></span>
<span id="cb93-67">                test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb93-68"></span>
<span id="cb93-69">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the average test loss</span></span>
<span id="cb93-70">        average_test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_loader)</span>
<span id="cb93-71">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test_loss_list_P_25.append(average_test_loss)</span></span>
<span id="cb93-72">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Average Test Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>average_test_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb93-73"></span>
<span id="cb93-74">plt.plot(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), losses)</span>
<span id="cb93-75">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Epoch'</span>)</span>
<span id="cb93-76">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss'</span>)</span>
<span id="cb93-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.title('Train Loss vs. Epoch for channel '+target_var_96_list[x_channel])</span></span>
<span id="cb93-78">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb93-79">plt.show() </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(1324, 14, 80, 80) (332, 14, 80, 80) (1324, 2, 80, 80) (332, 2, 80, 80)
==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
Autoencoder_CNN                          [1656, 2, 80, 80]         --
├─Encoder: 1-1                           [1656, 2048]              --
│    └─Sequential: 2-1                   [1656, 2048]              --
│    │    └─Conv2d: 3-1                  [1656, 64, 40, 40]        8,128
│    │    └─GELU: 3-2                    [1656, 64, 40, 40]        --
│    │    └─Conv2d: 3-3                  [1656, 64, 40, 40]        36,928
│    │    └─GELU: 3-4                    [1656, 64, 40, 40]        --
│    │    └─Conv2d: 3-5                  [1656, 128, 20, 20]       73,856
│    │    └─GELU: 3-6                    [1656, 128, 20, 20]       --
│    │    └─Conv2d: 3-7                  [1656, 128, 20, 20]       147,584
│    │    └─GELU: 3-8                    [1656, 128, 20, 20]       --
│    │    └─Conv2d: 3-9                  [1656, 256, 10, 10]       295,168
│    │    └─GELU: 3-10                   [1656, 256, 10, 10]       --
│    │    └─Flatten: 3-11                [1656, 25600]             --
│    │    └─Linear: 3-12                 [1656, 2048]              52,430,848
├─Decoder: 1-2                           [1656, 2, 80, 80]         --
│    └─Sequential: 2-2                   [1656, 2, 80, 80]         --
│    │    └─Linear: 3-13                 [1656, 25600]             52,454,400
│    │    └─Unflatten: 3-14              [1656, 256, 10, 10]       --
│    │    └─ConvTranspose2d: 3-15        [1656, 128, 20, 20]       295,040
│    │    └─GELU: 3-16                   [1656, 128, 20, 20]       --
│    │    └─Conv2d: 3-17                 [1656, 128, 20, 20]       147,584
│    │    └─GELU: 3-18                   [1656, 128, 20, 20]       --
│    │    └─ConvTranspose2d: 3-19        [1656, 64, 40, 40]        73,792
│    │    └─GELU: 3-20                   [1656, 64, 40, 40]        --
│    │    └─Conv2d: 3-21                 [1656, 64, 40, 40]        36,928
│    │    └─GELU: 3-22                   [1656, 64, 40, 40]        --
│    │    └─ConvTranspose2d: 3-23        [1656, 2, 80, 80]         1,154
==========================================================================================
Total params: 106,001,410
Trainable params: 106,001,410
Non-trainable params: 0
Total mult-adds (Units.TERABYTES): 1.09
==========================================================================================
Input size (MB): 593.51
Forward/backward pass size (MB): 9014.58
Params size (MB): 424.01
Estimated Total Size (MB): 10032.09
==========================================================================================</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  2%|▏         | 1/50 [00:04&lt;04:03,  4.96s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/50] Loss: 1620.3361
Average Test Loss: 377.9475</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 22%|██▏       | 11/50 [00:58&lt;03:15,  5.00s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [11/50] Loss: 249.2443
Average Test Loss: 228.7919</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 42%|████▏     | 21/50 [01:33&lt;01:40,  3.45s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/50] Loss: 168.6332
Average Test Loss: 172.4825</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 62%|██████▏   | 31/50 [02:21&lt;01:14,  3.90s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [31/50] Loss: 102.0034
Average Test Loss: 111.1758</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 40/50 [02:49&lt;00:32,  3.22s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/50] Loss: 65.1520</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 82%|████████▏ | 41/50 [02:53&lt;00:30,  3.39s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 60.7862</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 50/50 [03:30&lt;00:00,  4.22s/it]</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-45-output-15.png" class="lightbox" data-gallery="quarto-lightbox-gallery-33"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-45-output-15.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-64" class="cell">
<div class="sourceCode cell-code" id="cb108" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb108-1">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to evaluation mode</span></span>
<span id="cb108-2">test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb108-3"></span>
<span id="cb108-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb108-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> inputs, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_loader:</span>
<span id="cb108-6">        inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device)</span>
<span id="cb108-7">        targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets.to(device)</span>
<span id="cb108-8"></span>
<span id="cb108-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb108-10">        outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb108-11"></span>
<span id="cb108-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the loss</span></span>
<span id="cb108-13">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, targets)</span>
<span id="cb108-14"></span>
<span id="cb108-15">        test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb108-16"></span>
<span id="cb108-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the average test loss</span></span>
<span id="cb108-18">average_test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_loader)</span>
<span id="cb108-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test_loss_list_P_25.append(average_test_loss)</span></span>
<span id="cb108-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Average Test Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>average_test_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 20.4597</code></pre>
</div>
</div>
<div id="cell-65" class="cell">
<div class="sourceCode cell-code" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb110-1">torch.save(model.state_dict(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model/auto_conv_in14_out2.pt'</span>)</span>
<span id="cb110-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Autoencoder_CNN(image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, num_input_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, num_output_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.GELU)</span>
<span id="cb110-3">model.to(device) </span>
<span id="cb110-4">model.load_state_dict(torch.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model/auto_conv_in14_out2.pt'</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;All keys matched successfully&gt;</code></pre>
</div>
</div>
</section>
<section id="single-channel-input-single-channel-output-p25" class="level2">
<h2 class="anchored" data-anchor-id="single-channel-input-single-channel-output-p25">Single channel input single channel output (P25)</h2>
<div id="cell-67" class="cell">
<div class="sourceCode cell-code" id="cb112" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb112-1">target_var_96_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TSURF_K'</span>,</span>
<span id="cb112-2">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SNOWEW_M'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SNOWAGE_HR'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PRATE_MMpH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CLOUD_OD'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'U10_MpS'</span>,</span>
<span id="cb112-3">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V10_MpS'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'T2_K'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SWSFC_WpM2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SOLM_M3pM3'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CLDTOP_KM'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CAPE'</span>,</span>
<span id="cb112-4">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PBL_WRF_M'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PBL_YSU_M'</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ['U10_MpS', 'T2_K', 'V10_MpS']</span></span>
<span id="cb112-5">target_var_120_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P25'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P10'</span>] </span>
<span id="cb112-6">X,y  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_data(target_var_96_list, target_var_120_list)</span>
<span id="cb112-7"></span>
<span id="cb112-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb112-9">X_train_all, X_test_all, y_train_all, y_test_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb112-10">X_train_all.shape, X_test_all.shape, y_train_all.shape, y_test_all.shape</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>X shape  (1656, 14, 80, 80)
y shape (1656, 2, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>((1324, 14, 80, 80), (332, 14, 80, 80), (1324, 2, 80, 80), (332, 2, 80, 80))</code></pre>
</div>
</div>
<div id="cell-68" class="cell">
<div class="sourceCode cell-code" id="cb115" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb115-1">test_loss_list_P_25_conv_auto <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb115-2">y_channel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># selecting P25 as output</span></span>
<span id="cb115-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x_channel = 0</span></span>
<span id="cb115-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x_channel <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):</span>
<span id="cb115-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">####################### Selecting the channel #######################</span></span>
<span id="cb115-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X Channel name : '</span>, target_var_96_list[x_channel])</span>
<span id="cb115-7">    X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train_all[:, x_channel:x_channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :,:]</span>
<span id="cb115-8">    X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_test_all[:, x_channel:x_channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :,:]</span>
<span id="cb115-9">    y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_train_all[:, y_channel:y_channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :,:]</span>
<span id="cb115-10">    y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_test_all[:, y_channel:y_channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :,:]</span>
<span id="cb115-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Shapes: '</span>, X_train.shape, X_test.shape, y_train.shape, y_test.shape)</span>
<span id="cb115-12"></span>
<span id="cb115-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">####################### Creating the dataset loader #######################</span></span>
<span id="cb115-14">    train_custom_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomDataset(X_train, y_train)</span>
<span id="cb115-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(train_custom_dataset))</span></span>
<span id="cb115-16">    batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb115-17">    train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.DataLoader(train_custom_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb115-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(train_loader))</span></span>
<span id="cb115-19">    </span>
<span id="cb115-20">    test_custom_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomDataset(X_test, y_test)</span>
<span id="cb115-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(test_custom_dataset))</span></span>
<span id="cb115-22">    batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb115-23">    test_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.DataLoader(test_custom_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb115-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(test_loader))</span></span>
<span id="cb115-25">    </span>
<span id="cb115-26"></span>
<span id="cb115-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#################### Training the model ####################</span></span>
<span id="cb115-28">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Autoencoder_CNN(image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, num_input_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_output_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.GELU)</span>
<span id="cb115-29">    model.to(device)</span>
<span id="cb115-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the loss function and optimizer</span></span>
<span id="cb115-31">    criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MSELoss()</span>
<span id="cb115-32">    optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb115-33">    losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb115-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training loop</span></span>
<span id="cb115-35">    num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb115-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> trange(num_epochs):</span>
<span id="cb115-37">        model.train()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to training mode</span></span>
<span id="cb115-38">        total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb115-39">        </span>
<span id="cb115-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> inputs, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> train_loader:</span>
<span id="cb115-41">            optimizer.zero_grad()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zero the gradients</span></span>
<span id="cb115-42">            inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device)</span>
<span id="cb115-43">            targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets.to(device)</span>
<span id="cb115-44">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb115-45">            outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb115-46">            </span>
<span id="cb115-47">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the loss</span></span>
<span id="cb115-48">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, targets)</span>
<span id="cb115-49">            </span>
<span id="cb115-50">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backpropagation</span></span>
<span id="cb115-51">            loss.backward()</span>
<span id="cb115-52">            optimizer.step()</span>
<span id="cb115-53">            </span>
<span id="cb115-54">            total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb115-55"></span>
<span id="cb115-56">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the average loss for this epoch</span></span>
<span id="cb115-57">        average_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_loader)</span>
<span id="cb115-58">        losses.append(average_loss)</span>
<span id="cb115-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb115-60">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Epoch [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_epochs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>average_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb115-61">    </span>
<span id="cb115-62">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">############################# testing the model #############################</span></span>
<span id="cb115-63">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to evaluation mode</span></span>
<span id="cb115-64">    test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb115-65"></span>
<span id="cb115-66">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb115-67">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> inputs, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_loader:</span>
<span id="cb115-68">            inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device)</span>
<span id="cb115-69">            targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets.to(device)</span>
<span id="cb115-70">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb115-71">            outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb115-72">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the loss</span></span>
<span id="cb115-73">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, targets)</span>
<span id="cb115-74">            test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb115-75"></span>
<span id="cb115-76">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the average test loss</span></span>
<span id="cb115-77">    average_test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_loader)</span>
<span id="cb115-78">    test_loss_list_P_25_conv_auto.append(average_test_loss)</span>
<span id="cb115-79">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Average Test Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>average_test_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb115-80">    plt.plot(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), losses)</span>
<span id="cb115-81">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Epoch'</span>)</span>
<span id="cb115-82">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss'</span>)</span>
<span id="cb115-83">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Train Loss vs. Epoch for channel '</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>target_var_96_list[x_channel])</span>
<span id="cb115-84">    plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb115-85">    plt.show() </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  TSURF_K
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;02:14,  1.48it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 462.4725</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:52,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 212.0043</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:48,  3.29it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 213.3173</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:18&lt;00:40,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 234.0997</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:24&lt;00:34,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 211.7991</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:30&lt;00:29,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 216.9750</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:23,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 211.1435</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:17,  3.46it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 214.2518</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:47&lt;00:11,  3.45it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 209.3667</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:53&lt;00:05,  3.44it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 208.2786</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:58&lt;00:00,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 196.8076</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-49-output-24.png" class="lightbox" data-gallery="quarto-lightbox-gallery-34"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-49-output-24.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  SNOWEW_M
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:58,  3.37it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 540.4606</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:52,  3.44it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 216.1673</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:47,  3.35it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 211.7699</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:40,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 211.9133</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:34,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 214.4790</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:29,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 212.5737</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:23,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 212.8330</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:17,  3.44it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 209.0824</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:47&lt;00:11,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 207.7827</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:53&lt;00:05,  3.44it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 208.2993</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:58&lt;00:00,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 191.6095</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-49-output-49.png" class="lightbox" data-gallery="quarto-lightbox-gallery-35"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-49-output-49.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  SNOWAGE_HR
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:57,  3.49it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 590.1837</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:52,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 211.4096</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:11&lt;00:46,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 213.1281</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:40,  3.45it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 208.5330</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:33,  3.58it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 209.0068</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:28&lt;00:27,  3.61it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 211.9243</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:34&lt;00:21,  3.60it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 212.2428</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:40&lt;00:16,  3.48it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 210.3188</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:46&lt;00:11,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 211.6509</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:51&lt;00:05,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 212.8352</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:57&lt;00:00,  3.47it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 191.7548</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-49-output-74.png" class="lightbox" data-gallery="quarto-lightbox-gallery-36"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-49-output-74.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  PRATE_MMpH
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:56,  3.52it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 750.4891</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:52,  3.44it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 213.9414</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:46,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 214.3703</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:41,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 209.9882</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:34,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 210.4570</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:29,  3.37it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 211.3801</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:21,  3.76it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 214.6792</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:17,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 210.8055</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:47&lt;00:11,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 214.0414</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:52&lt;00:05,  3.61it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 206.5140</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:58&lt;00:00,  3.45it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 194.9402</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-49-output-99.png" class="lightbox" data-gallery="quarto-lightbox-gallery-37"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-49-output-99.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  CLOUD_OD
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:54,  3.63it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 563.3871</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:05&lt;00:46,  3.82it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 63.2729</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:11&lt;00:45,  3.51it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 23.8580</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:40,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 15.2393</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:37,  3.14it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 11.0129</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:29,  3.32it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 9.3018</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:22,  3.45it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 8.1090</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:17,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 7.4336</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:47&lt;00:11,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 8.8601</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:53&lt;00:05,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 6.1420</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:58&lt;00:00,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 7.4988</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-49-output-124.png" class="lightbox" data-gallery="quarto-lightbox-gallery-38"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-49-output-124.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  U10_MpS
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:57,  3.48it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 684.8967</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:52,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 111.6166</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:11&lt;00:46,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 22.6558</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:40,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 10.9635</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:35,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 12.9050</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:29,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 6.2923</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:23,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 9.0327</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:16,  3.49it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 4.1764</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:47&lt;00:11,  3.52it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 3.8160</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:52&lt;00:05,  3.57it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 3.3957</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:57&lt;00:00,  3.46it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 3.1739</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-49-output-149.png" class="lightbox" data-gallery="quarto-lightbox-gallery-39"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-49-output-149.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  V10_MpS
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:56,  3.51it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 609.8626</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:53,  3.34it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 58.6357</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:46,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 14.3107</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:18&lt;00:41,  3.37it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 10.6218</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:35,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 6.9871</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:29,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 5.3444</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:23,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 4.6127</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:17,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 4.0642</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:47&lt;00:11,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 3.5636</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:53&lt;00:05,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 3.2190</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:58&lt;00:00,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 2.9050</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-49-output-174.png" class="lightbox" data-gallery="quarto-lightbox-gallery-40"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-49-output-174.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  T2_K
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:57,  3.45it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 458.4550</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:52,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 213.3441</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:11&lt;00:47,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 211.7652</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:41,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 212.4970</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:35,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 210.7104</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:28,  3.52it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 208.7177</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:22,  3.44it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 212.2414</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:17,  3.47it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 207.2175</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:46&lt;00:11,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 211.3121</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:52&lt;00:05,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 208.7926</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:58&lt;00:00,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 191.9081</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-49-output-198.png" class="lightbox" data-gallery="quarto-lightbox-gallery-41"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-49-output-198.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  SWSFC_WpM2
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:56,  3.52it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 760.0155</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:53,  3.37it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 224.7744</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:47,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 215.4670</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:18&lt;00:41,  3.35it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 214.6593</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:24&lt;00:35,  3.37it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 211.3864</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:28,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 214.5846</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:23,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 215.2816</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:17,  3.32it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 210.3355</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:47&lt;00:11,  3.49it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 213.1056</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:53&lt;00:05,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 209.3009</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:59&lt;00:00,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 193.2200</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-49-output-222.png" class="lightbox" data-gallery="quarto-lightbox-gallery-42"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-49-output-222.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  SOLM_M3pM3
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:58,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 518.8583</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:51,  3.46it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 183.2842</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:51,  3.10it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 106.5493</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:18&lt;00:41,  3.35it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 47.8360</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:24&lt;00:35,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 17.4837</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:30&lt;00:30,  3.28it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 12.6859</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:36&lt;00:23,  3.31it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 9.7521</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:42&lt;00:17,  3.30it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 8.4768</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:47&lt;00:11,  3.46it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 7.1218</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:53&lt;00:05,  3.44it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 7.4880</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:58&lt;00:00,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 5.5514</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-49-output-247.png" class="lightbox" data-gallery="quarto-lightbox-gallery-43"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-49-output-247.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  CLDTOP_KM
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:57,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 603.6223</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:52,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 216.0129</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:50,  3.18it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 212.5011</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:18&lt;00:41,  3.35it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 215.2624</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:24&lt;00:35,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 210.4688</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:30&lt;00:29,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 211.2793</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:23,  3.35it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 208.5935</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:17,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 209.1620</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:47&lt;00:11,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 208.9249</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:53&lt;00:05,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 207.8753</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:59&lt;00:00,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 205.4745</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-49-output-272.png" class="lightbox" data-gallery="quarto-lightbox-gallery-44"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-49-output-272.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  CAPE
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:58,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 480.7086</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:52,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 215.4105</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:46,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 211.5271</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:40,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 211.8129</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:35,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 208.5153</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:28,  3.44it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 208.6479</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:23,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 215.5420</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:17,  3.44it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 207.9001</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:47&lt;00:11,  3.45it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 206.7139</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:53&lt;00:05,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 208.8671</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:58&lt;00:00,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 191.5815</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-49-output-297.png" class="lightbox" data-gallery="quarto-lightbox-gallery-45"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-49-output-297.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  PBL_WRF_M
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:57,  3.44it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 487.6684</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:53,  3.33it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 210.6665</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:46,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 211.8588</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:18&lt;00:41,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 209.3883</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:24&lt;00:35,  3.36it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 210.8873</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:29,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 209.3165</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:23,  3.36it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 208.2383</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:17,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 208.4831</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:47&lt;00:11,  3.37it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 209.2067</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:53&lt;00:05,  3.35it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 207.0104</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:59&lt;00:00,  3.37it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 190.8408</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-49-output-322.png" class="lightbox" data-gallery="quarto-lightbox-gallery-46"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-49-output-322.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  PBL_YSU_M
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:58,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 538.0652</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:53,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 213.2395</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:46,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 209.5626</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:18&lt;00:40,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 218.8836</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:34,  3.44it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 213.1157</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:28,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 211.7407</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:23,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 214.4044</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:17,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 209.6131</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:47&lt;00:11,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 209.1906</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:53&lt;00:05,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 207.2547</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:58&lt;00:00,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 196.5285</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-49-output-347.png" class="lightbox" data-gallery="quarto-lightbox-gallery-47"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-49-output-347.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-69" class="cell">
<div class="sourceCode cell-code" id="cb449" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb449-1">test_loss_list_P_25_conv_auto</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[196.80755892666903,
 191.6094970703125,
 191.75477183948863,
 194.94017861106178,
 7.4987756772474805,
 3.1738592061129483,
 2.9050224044106225,
 191.90811157226562,
 193.21996238014916,
 5.551396109841087,
 205.47452198375356,
 191.58150828968394,
 190.84084944291547,
 196.5285311612216]</code></pre>
</div>
</div>
<div id="cell-70" class="cell">
<div class="sourceCode cell-code" id="cb451" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb451-1">name_loss_pairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(target_var_96_list, test_loss_list_P_25_conv_auto))</span>
<span id="cb451-2"></span>
<span id="cb451-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort based on loss values</span></span>
<span id="cb451-4">sorted_name_loss_pairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(name_loss_pairs, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb451-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pair <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sorted_name_loss_pairs:</span>
<span id="cb451-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(pair)</span>
<span id="cb451-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(sorted_name_loss_pairs)</span></span>
<span id="cb451-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the lowest 3 names</span></span>
<span id="cb451-9">lowest_3_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [pair[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pair <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sorted_name_loss_pairs[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]]</span>
<span id="cb451-10"></span>
<span id="cb451-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lowest 3 names:"</span>, lowest_3_names)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>('V10_MpS', 2.9050224044106225)
('U10_MpS', 3.1738592061129483)
('SOLM_M3pM3', 5.551396109841087)
('CLOUD_OD', 7.4987756772474805)
('PBL_WRF_M', 190.84084944291547)
('CAPE', 191.58150828968394)
('SNOWEW_M', 191.6094970703125)
('SNOWAGE_HR', 191.75477183948863)
('T2_K', 191.90811157226562)
('SWSFC_WpM2', 193.21996238014916)
('PRATE_MMpH', 194.94017861106178)
('PBL_YSU_M', 196.5285311612216)
('TSURF_K', 196.80755892666903)
('CLDTOP_KM', 205.47452198375356)
Lowest 3 names: ['V10_MpS', 'U10_MpS', 'SOLM_M3pM3']</code></pre>
</div>
</div>
<div id="cell-71" class="cell">
<div class="sourceCode cell-code" id="cb453" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb453-1">summary(model, input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
Autoencoder_CNN                          [1000, 1, 80, 80]         --
├─Encoder: 1-1                           [1000, 512]               --
│    └─Sequential: 2-1                   [1000, 512]               --
│    │    └─Conv2d: 3-1                  [1000, 8, 40, 40]         80
│    │    └─GELU: 3-2                    [1000, 8, 40, 40]         --
│    │    └─Conv2d: 3-3                  [1000, 8, 40, 40]         584
│    │    └─GELU: 3-4                    [1000, 8, 40, 40]         --
│    │    └─Conv2d: 3-5                  [1000, 16, 20, 20]        1,168
│    │    └─GELU: 3-6                    [1000, 16, 20, 20]        --
│    │    └─Conv2d: 3-7                  [1000, 16, 20, 20]        2,320
│    │    └─GELU: 3-8                    [1000, 16, 20, 20]        --
│    │    └─Conv2d: 3-9                  [1000, 32, 10, 10]        4,640
│    │    └─GELU: 3-10                   [1000, 32, 10, 10]        --
│    │    └─Flatten: 3-11                [1000, 3200]              --
│    │    └─Linear: 3-12                 [1000, 512]               1,638,912
├─Decoder: 1-2                           [1000, 1, 80, 80]         --
│    └─Sequential: 2-2                   [1000, 1, 80, 80]         --
│    │    └─Linear: 3-13                 [1000, 3200]              1,641,600
│    │    └─Unflatten: 3-14              [1000, 32, 10, 10]        --
│    │    └─ConvTranspose2d: 3-15        [1000, 16, 20, 20]        4,624
│    │    └─GELU: 3-16                   [1000, 16, 20, 20]        --
│    │    └─Conv2d: 3-17                 [1000, 16, 20, 20]        2,320
│    │    └─GELU: 3-18                   [1000, 16, 20, 20]        --
│    │    └─ConvTranspose2d: 3-19        [1000, 8, 40, 40]         1,160
│    │    └─GELU: 3-20                   [1000, 8, 40, 40]         --
│    │    └─Conv2d: 3-21                 [1000, 8, 40, 40]         584
│    │    └─GELU: 3-22                   [1000, 8, 40, 40]         --
│    │    └─ConvTranspose2d: 3-23        [1000, 1, 80, 80]         73
==========================================================================================
Total params: 3,298,065
Trainable params: 3,298,065
Non-trainable params: 0
Total mult-adds (Units.GIGABYTES): 12.24
==========================================================================================
Input size (MB): 25.60
Forward/backward pass size (MB): 720.90
Params size (MB): 13.19
Estimated Total Size (MB): 759.69
==========================================================================================</code></pre>
</div>
</div>
</section>
<section id="single-channel-input-multiple-channel-output-p10" class="level2">
<h2 class="anchored" data-anchor-id="single-channel-input-multiple-channel-output-p10">Single channel input multiple channel output (P10)</h2>
<div id="cell-73" class="cell">
<div class="sourceCode cell-code" id="cb455" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb455-1">test_loss_list_P_10_conv_auto <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb455-2">y_channel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># selecting P10 as output</span></span>
<span id="cb455-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x_channel = 0</span></span>
<span id="cb455-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x_channel <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):</span>
<span id="cb455-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">####################### Selecting the channel #######################</span></span>
<span id="cb455-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X Channel name : '</span>, target_var_96_list[x_channel])</span>
<span id="cb455-7">    X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train_all[:, x_channel:x_channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :,:]</span>
<span id="cb455-8">    X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_test_all[:, x_channel:x_channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :,:]</span>
<span id="cb455-9">    y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_train_all[:, y_channel:y_channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :,:]</span>
<span id="cb455-10">    y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_test_all[:, y_channel:y_channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :,:]</span>
<span id="cb455-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Shapes: '</span>, X_train.shape, X_test.shape, y_train.shape, y_test.shape)</span>
<span id="cb455-12"></span>
<span id="cb455-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">####################### Creating the dataset loader #######################</span></span>
<span id="cb455-14">    train_custom_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomDataset(X_train, y_train)</span>
<span id="cb455-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(train_custom_dataset))</span></span>
<span id="cb455-16">    batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb455-17">    train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.DataLoader(train_custom_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb455-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(train_loader))</span></span>
<span id="cb455-19">    </span>
<span id="cb455-20">    test_custom_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomDataset(X_test, y_test)</span>
<span id="cb455-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(test_custom_dataset))</span></span>
<span id="cb455-22">    batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb455-23">    test_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.DataLoader(test_custom_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb455-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(test_loader))</span></span>
<span id="cb455-25">    </span>
<span id="cb455-26"></span>
<span id="cb455-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#################### Training the model ####################</span></span>
<span id="cb455-28">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Autoencoder_CNN(image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, num_input_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_output_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.GELU)</span>
<span id="cb455-29">    model.to(device)</span>
<span id="cb455-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the loss function and optimizer</span></span>
<span id="cb455-31">    criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MSELoss()</span>
<span id="cb455-32">    optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb455-33">    losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb455-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training loop</span></span>
<span id="cb455-35">    num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb455-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> trange(num_epochs):</span>
<span id="cb455-37">        model.train()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to training mode</span></span>
<span id="cb455-38">        total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb455-39">        </span>
<span id="cb455-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> inputs, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> train_loader:</span>
<span id="cb455-41">            optimizer.zero_grad()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zero the gradients</span></span>
<span id="cb455-42">            inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device)</span>
<span id="cb455-43">            targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets.to(device)</span>
<span id="cb455-44">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb455-45">            outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb455-46">            </span>
<span id="cb455-47">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the loss</span></span>
<span id="cb455-48">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, targets)</span>
<span id="cb455-49">            </span>
<span id="cb455-50">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backpropagation</span></span>
<span id="cb455-51">            loss.backward()</span>
<span id="cb455-52">            optimizer.step()</span>
<span id="cb455-53">            </span>
<span id="cb455-54">            total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb455-55"></span>
<span id="cb455-56">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the average loss for this epoch</span></span>
<span id="cb455-57">        average_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_loader)</span>
<span id="cb455-58">        losses.append(average_loss)</span>
<span id="cb455-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb455-60">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Epoch [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_epochs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>average_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb455-61">    </span>
<span id="cb455-62">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">############################# testing the model #############################</span></span>
<span id="cb455-63">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to evaluation mode</span></span>
<span id="cb455-64">    test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb455-65"></span>
<span id="cb455-66">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb455-67">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> inputs, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_loader:</span>
<span id="cb455-68">            inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device)</span>
<span id="cb455-69">            targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets.to(device)</span>
<span id="cb455-70">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb455-71">            outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb455-72">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the loss</span></span>
<span id="cb455-73">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, targets)</span>
<span id="cb455-74">            test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb455-75"></span>
<span id="cb455-76">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the average test loss</span></span>
<span id="cb455-77">    average_test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_loader)</span>
<span id="cb455-78">    test_loss_list_P_10_conv_auto.append(average_test_loss)</span>
<span id="cb455-79">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Average Test Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>average_test_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb455-80">    plt.plot(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), losses)</span>
<span id="cb455-81">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Epoch'</span>)</span>
<span id="cb455-82">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss'</span>)</span>
<span id="cb455-83">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Train Loss vs. Epoch for channel '</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>target_var_96_list[x_channel])</span>
<span id="cb455-84">    plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb455-85">    plt.show() </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  TSURF_K
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;01:02,  3.18it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 831.9463</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:52,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 413.6695</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:46,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 416.1795</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:40,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 414.0692</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:35,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 408.8671</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:28,  3.45it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 408.6212</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:22,  3.44it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 408.1124</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:17,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 407.2696</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:47&lt;00:11,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 419.0648</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:53&lt;00:05,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 411.9767</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:58&lt;00:00,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 367.9784</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-53-output-25.png" class="lightbox" data-gallery="quarto-lightbox-gallery-48"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-53-output-25.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  SNOWEW_M
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:58,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1193.0016</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:52,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 413.8656</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:46,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 416.9739</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:41,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 405.7197</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:35,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 414.4462</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:28,  3.44it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 403.9555</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:23,  3.35it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 406.6566</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:17,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 404.8177</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:47&lt;00:11,  3.36it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 414.5372</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:53&lt;00:05,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 418.9334</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:59&lt;00:00,  3.36it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 373.6601</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-53-output-50.png" class="lightbox" data-gallery="quarto-lightbox-gallery-49"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-53-output-50.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  SNOWAGE_HR
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:57,  3.48it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1176.4868</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:52,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 410.2950</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:47,  3.37it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 414.8993</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:40,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 405.8627</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:34,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 416.4907</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:28,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 413.8539</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:23,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 406.4541</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:17,  3.36it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 404.2276</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:47&lt;00:11,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 407.0577</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:53&lt;00:05,  3.37it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 402.6227</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:58&lt;00:00,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 393.0328</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-53-output-75.png" class="lightbox" data-gallery="quarto-lightbox-gallery-50"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-53-output-75.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  PRATE_MMpH
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:56,  3.54it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1028.3382</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:53,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 434.1988</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:46,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 412.9816</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:40,  3.44it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 405.9959</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:34,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 404.1220</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:28,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 415.6019</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:23,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 403.8031</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:17,  3.46it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 407.2635</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:47&lt;00:11,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 404.3506</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:53&lt;00:05,  3.37it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 409.8351</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:58&lt;00:00,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 367.3246</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-53-output-100.png" class="lightbox" data-gallery="quarto-lightbox-gallery-51"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-53-output-100.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  CLOUD_OD
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:57,  3.49it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1599.0141</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:53,  3.37it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 192.7198</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:47,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 68.0225</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:18&lt;00:41,  3.36it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 44.4028</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:24&lt;00:35,  3.32it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 32.4964</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:30&lt;00:29,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 25.7723</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:23,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 23.6108</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:17,  3.37it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 19.3957</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:47&lt;00:11,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 19.0788</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:53&lt;00:05,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 21.9598</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:58&lt;00:00,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 18.7717</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-53-output-124.png" class="lightbox" data-gallery="quarto-lightbox-gallery-52"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-53-output-124.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  U10_MpS
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:53,  3.73it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1023.2784</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:05&lt;00:52,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 280.1561</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:11&lt;00:46,  3.44it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 60.3793</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:40,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 29.8831</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:35,  3.35it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 19.7393</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:29,  3.35it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 16.8795</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:23,  3.37it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 12.9342</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:17,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 11.2801</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:47&lt;00:10,  3.56it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 10.1249</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:52&lt;00:05,  3.44it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 11.3411</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:58&lt;00:00,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 8.8163</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-53-output-149.png" class="lightbox" data-gallery="quarto-lightbox-gallery-53"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-53-output-149.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  V10_MpS
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:56,  3.53it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1439.9822</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:51,  3.50it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 142.6731</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:11&lt;00:46,  3.45it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 39.2041</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:38,  3.66it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 20.6722</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:33,  3.51it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 16.5665</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:28&lt;00:28,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 12.4099</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:34&lt;00:23,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 10.8300</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:40&lt;00:17,  3.47it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 9.6913</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:46&lt;00:11,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 8.9197</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:52&lt;00:05,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 10.7642</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:57&lt;00:00,  3.45it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 23.4499</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-53-output-174.png" class="lightbox" data-gallery="quarto-lightbox-gallery-54"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-53-output-174.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  T2_K
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:56,  3.54it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1037.4250</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:53,  3.35it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 413.2349</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:47,  3.37it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 411.9822</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:41,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 406.0331</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:34,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 408.5417</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:28,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 403.6246</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:23,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 409.9414</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:17,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 402.6003</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:47&lt;00:11,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 401.2209</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:53&lt;00:05,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 403.0725</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:58&lt;00:00,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 366.0120</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-53-output-198.png" class="lightbox" data-gallery="quarto-lightbox-gallery-55"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-53-output-198.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  SWSFC_WpM2
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:52,  3.82it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1358.9732</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:52,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 419.2162</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:11&lt;00:46,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 413.3607</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:40,  3.45it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 409.3754</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:34,  3.45it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 411.0923</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:28,  3.45it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 404.1099</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:22,  3.46it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 409.2167</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:40&lt;00:17,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 408.5509</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:46&lt;00:11,  3.35it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 410.1073</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:52&lt;00:05,  3.36it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 407.5864</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:58&lt;00:00,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 364.5863</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-53-output-223.png" class="lightbox" data-gallery="quarto-lightbox-gallery-56"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-53-output-223.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  SOLM_M3pM3
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:56,  3.51it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1237.3417</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:52,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 337.7638</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:46,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 223.9836</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:40,  3.45it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 98.1059</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:34,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 46.6351</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:29,  3.34it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 31.9773</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:23,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 26.2758</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:17,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 19.9056</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:47&lt;00:11,  3.35it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 17.7226</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:53&lt;00:05,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 15.4444</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:58&lt;00:00,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 14.0181</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-53-output-248.png" class="lightbox" data-gallery="quarto-lightbox-gallery-57"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-53-output-248.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  CLDTOP_KM
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:58,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1227.4362</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:53,  3.37it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 430.1239</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:46,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 414.0475</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:40,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 414.5093</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:24&lt;00:35,  3.34it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 412.3910</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:28,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 413.5266</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:23,  3.36it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 408.5565</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:17,  3.36it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 404.2547</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:47&lt;00:11,  3.32it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 417.1860</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:53&lt;00:05,  3.46it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 408.9205</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:59&lt;00:00,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 367.3491</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-53-output-272.png" class="lightbox" data-gallery="quarto-lightbox-gallery-58"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-53-output-272.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  CAPE
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:59,  3.37it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1362.6006</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:54,  3.30it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 417.5348</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:11&lt;00:46,  3.45it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 409.7356</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:40,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 411.1969</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:35,  3.37it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 413.3693</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:30,  3.29it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 414.5004</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:23,  3.36it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 405.8445</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:17,  3.44it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 404.8460</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:47&lt;00:11,  3.45it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 415.0352</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:53&lt;00:05,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 414.2297</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:59&lt;00:00,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 366.4497</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-53-output-296.png" class="lightbox" data-gallery="quarto-lightbox-gallery-59"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-53-output-296.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  PBL_WRF_M
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:57,  3.47it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1069.1285</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:05&lt;00:52,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 408.2721</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:11&lt;00:45,  3.51it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 408.3345</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:39,  3.50it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 411.1250</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:34,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 406.6349</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:29,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 409.1261</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:23,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 403.4630</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:17,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 405.4774</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:46&lt;00:11,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 403.7881</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:52&lt;00:05,  3.37it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 408.1804</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:58&lt;00:00,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 367.3865</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-53-output-321.png" class="lightbox" data-gallery="quarto-lightbox-gallery-60"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-53-output-321.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  PBL_YSU_M
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:58,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1065.3006</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:50,  3.55it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 443.1136</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:11&lt;00:45,  3.52it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 407.0351</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:40,  3.46it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 409.3611</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:33,  3.50it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 403.8964</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:28,  3.44it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 402.2005</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:22,  3.45it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 402.1708</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:40&lt;00:17,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 403.3740</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:46&lt;00:11,  3.37it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 398.9786</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:52&lt;00:05,  3.45it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 408.3548</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:58&lt;00:00,  3.44it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 380.6446</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-53-output-346.png" class="lightbox" data-gallery="quarto-lightbox-gallery-61"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-53-output-346.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-74" class="cell">
<div class="sourceCode cell-code" id="cb788" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb788-1">test_loss_list_P_10_conv_auto</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[367.97836858575994,
 373.660117409446,
 393.0328174937855,
 367.32460992986506,
 18.771740219809793,
 8.816288991407914,
 23.44990175420588,
 366.0119906338778,
 364.58628151633525,
 14.018102992664684,
 367.34911554509944,
 366.4497375488281,
 367.38653841885656,
 380.64462835138494]</code></pre>
</div>
</div>
<div id="cell-75" class="cell">
<div class="sourceCode cell-code" id="cb790" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb790-1">name_loss_pairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(target_var_96_list, test_loss_list_P_10_conv_auto))</span>
<span id="cb790-2"></span>
<span id="cb790-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort based on loss values</span></span>
<span id="cb790-4">sorted_name_loss_pairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(name_loss_pairs, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb790-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pair <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sorted_name_loss_pairs:</span>
<span id="cb790-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(pair)</span>
<span id="cb790-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(sorted_name_loss_pairs)</span></span>
<span id="cb790-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the lowest 3 names</span></span>
<span id="cb790-9">lowest_3_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [pair[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pair <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sorted_name_loss_pairs[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]]</span>
<span id="cb790-10"></span>
<span id="cb790-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lowest 3 names:"</span>, lowest_3_names)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>('U10_MpS', 8.816288991407914)
('SOLM_M3pM3', 14.018102992664684)
('CLOUD_OD', 18.771740219809793)
('V10_MpS', 23.44990175420588)
('SWSFC_WpM2', 364.58628151633525)
('T2_K', 366.0119906338778)
('CAPE', 366.4497375488281)
('PRATE_MMpH', 367.32460992986506)
('CLDTOP_KM', 367.34911554509944)
('PBL_WRF_M', 367.38653841885656)
('TSURF_K', 367.97836858575994)
('SNOWEW_M', 373.660117409446)
('PBL_YSU_M', 380.64462835138494)
('SNOWAGE_HR', 393.0328174937855)
Lowest 3 names: ['U10_MpS', 'SOLM_M3pM3', 'CLOUD_OD']</code></pre>
</div>
</div>
</section>
<section id="insights-1" class="level2">
<h2 class="anchored" data-anchor-id="insights-1">Insights</h2>
<div id="cell-77" class="cell">
<div class="sourceCode cell-code" id="cb792" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb792-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adding values at corresponding indices</span></span>
<span id="cb792-2">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x, y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(test_loss_list_P_10_conv_auto, test_loss_list_P_25_conv_auto)]</span>
<span id="cb792-3"></span>
<span id="cb792-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a DataFrame</span></span>
<span id="cb792-5">data_frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Input channel'</span>: target_var_96_list, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P10'</span>: test_loss_list_P_10_conv_auto, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P25'</span>: test_loss_list_P_25_conv_auto, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P10+P25 avg'</span>: result}</span>
<span id="cb792-6">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(data_frame)</span>
<span id="cb792-7"></span>
<span id="cb792-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sorting the DataFrame based on "List1 + List2"</span></span>
<span id="cb792-9">df_sorted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.sort_values(by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P10+P25 avg'</span>)</span>
<span id="cb792-10"></span>
<span id="cb792-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Displaying the sorted DataFrame</span></span>
<span id="cb792-12"></span>
<span id="cb792-13">df_rounded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_sorted.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb792-14">df_rounded.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/rishabh.mondal/climax_alternative/Climax_2/results/test_loss_list_P_10_P25_conv_auto.csv'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb792-15">df_rounded</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Input channel</th>
<th data-quarto-table-cell-role="th">P10</th>
<th data-quarto-table-cell-role="th">P25</th>
<th data-quarto-table-cell-role="th">P10+P25 avg</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">5</td>
<td>U10_MpS</td>
<td>8.8</td>
<td>3.2</td>
<td>6.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>SOLM_M3pM3</td>
<td>14.0</td>
<td>5.6</td>
<td>9.8</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>CLOUD_OD</td>
<td>18.8</td>
<td>7.5</td>
<td>13.1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">6</td>
<td>V10_MpS</td>
<td>23.4</td>
<td>2.9</td>
<td>13.2</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>SWSFC_WpM2</td>
<td>364.6</td>
<td>193.2</td>
<td>278.9</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>T2_K</td>
<td>366.0</td>
<td>191.9</td>
<td>279.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">11</td>
<td>CAPE</td>
<td>366.4</td>
<td>191.6</td>
<td>279.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">12</td>
<td>PBL_WRF_M</td>
<td>367.4</td>
<td>190.8</td>
<td>279.1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">3</td>
<td>PRATE_MMpH</td>
<td>367.3</td>
<td>194.9</td>
<td>281.1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">0</td>
<td>TSURF_K</td>
<td>368.0</td>
<td>196.8</td>
<td>282.4</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1</td>
<td>SNOWEW_M</td>
<td>373.7</td>
<td>191.6</td>
<td>282.6</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">10</td>
<td>CLDTOP_KM</td>
<td>367.3</td>
<td>205.5</td>
<td>286.4</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">13</td>
<td>PBL_YSU_M</td>
<td>380.6</td>
<td>196.5</td>
<td>288.6</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2</td>
<td>SNOWAGE_HR</td>
<td>393.0</td>
<td>191.8</td>
<td>292.4</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="training-on-top-4-channel-and-predicting-on-all-channel-conv" class="level2">
<h2 class="anchored" data-anchor-id="training-on-top-4-channel-and-predicting-on-all-channel-conv">Training on top 4 channel and predicting on all channel CONV</h2>
<div id="cell-79" class="cell">
<div class="sourceCode cell-code" id="cb793" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb793-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># target_var_96_list =['TSURF_K',</span></span>
<span id="cb793-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#        'SNOWEW_M', 'SNOWAGE_HR', 'PRATE_MMpH', 'CLOUD_OD', 'U10_MpS',</span></span>
<span id="cb793-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#        'V10_MpS', 'T2_K', 'SWSFC_WpM2', 'SOLM_M3pM3', 'CLDTOP_KM', 'CAPE',</span></span>
<span id="cb793-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#        'PBL_WRF_M', 'PBL_YSU_M']  # ['U10_MpS', 'T2_K', 'V10_MpS']</span></span>
<span id="cb793-5">target_var_96_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V10_MpS'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'U10_MpS'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SOLM_M3pM3'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CLOUD_OD'</span>]</span>
<span id="cb793-6">target_var_120_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P25'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P10'</span>] </span>
<span id="cb793-7">X,y  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_data(target_var_96_list, target_var_120_list)</span>
<span id="cb793-8"></span>
<span id="cb793-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb793-10">X_train_all, X_test_all, y_train_all, y_test_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb793-11">X_train_all.shape, X_test_all.shape, y_train_all.shape, y_test_all.shape</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>X shape  (1656, 4, 80, 80)
y shape (1656, 2, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>((1324, 4, 80, 80), (332, 4, 80, 80), (1324, 2, 80, 80), (332, 2, 80, 80))</code></pre>
</div>
</div>
<div id="cell-80" class="cell">
<div class="sourceCode cell-code" id="cb796" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb796-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(X_train_all.shape, X_test_all.shape, y_train_all.shape, y_test_all.shape)</span>
<span id="cb796-2">train_custom_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomDataset(X_train_all, y_train_all)</span>
<span id="cb796-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(train_custom_dataset))</span></span>
<span id="cb796-4">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb796-5">train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.DataLoader(train_custom_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb796-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(train_loader))</span></span>
<span id="cb796-7"></span>
<span id="cb796-8">test_custom_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomDataset(X_test_all, y_test_all)</span>
<span id="cb796-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(test_custom_dataset))</span></span>
<span id="cb796-10">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb796-11">test_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.DataLoader(test_custom_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb796-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(test_loader))</span></span>
<span id="cb796-13"></span>
<span id="cb796-14"></span>
<span id="cb796-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#################### Training the model ####################</span></span>
<span id="cb796-16">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Autoencoder_CNN(image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, num_input_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, num_output_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.GELU)</span>
<span id="cb796-17">model.to(device) </span>
<span id="cb796-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchinfo <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> summary</span>
<span id="cb796-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(summary(model, input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1656</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)))</span>
<span id="cb796-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the loss function and optimizer</span></span>
<span id="cb796-21">criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MSELoss()</span>
<span id="cb796-22">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb796-23">losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [] </span>
<span id="cb796-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training loop</span></span>
<span id="cb796-25">num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span></span>
<span id="cb796-26"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> trange(num_epochs):</span>
<span id="cb796-27">    model.train()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to training mode</span></span>
<span id="cb796-28">    total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb796-29">    </span>
<span id="cb796-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> inputs, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> train_loader:</span>
<span id="cb796-31">        optimizer.zero_grad()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zero the gradients</span></span>
<span id="cb796-32">        inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device)</span>
<span id="cb796-33">        targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets.to(device)</span>
<span id="cb796-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb796-35">        outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb796-36">        </span>
<span id="cb796-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the loss</span></span>
<span id="cb796-38">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, targets)</span>
<span id="cb796-39">        </span>
<span id="cb796-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backpropagation</span></span>
<span id="cb796-41">        loss.backward()</span>
<span id="cb796-42">        optimizer.step()</span>
<span id="cb796-43">        </span>
<span id="cb796-44">        total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb796-45"></span>
<span id="cb796-46">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the average loss for this epoch</span></span>
<span id="cb796-47">    average_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_loader)</span>
<span id="cb796-48">    losses.append(average_loss)</span>
<span id="cb796-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: </span>
<span id="cb796-50">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Epoch [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_epochs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>average_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb796-51"></span>
<span id="cb796-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">############################# testing the model #############################</span></span>
<span id="cb796-53">        model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to evaluation mode</span></span>
<span id="cb796-54">        test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb796-55"></span>
<span id="cb796-56">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb796-57">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> inputs, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_loader:</span>
<span id="cb796-58">                inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device)</span>
<span id="cb796-59">                targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets.to(device)</span>
<span id="cb796-60"></span>
<span id="cb796-61">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb796-62">                outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb796-63"></span>
<span id="cb796-64">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the loss</span></span>
<span id="cb796-65">                loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, targets)</span>
<span id="cb796-66"></span>
<span id="cb796-67">                test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb796-68"></span>
<span id="cb796-69">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the average test loss</span></span>
<span id="cb796-70">        average_test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_loader)</span>
<span id="cb796-71">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test_loss_list_P_25.append(average_test_loss)</span></span>
<span id="cb796-72">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Average Test Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>average_test_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb796-73">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to evaluation mode</span></span>
<span id="cb796-74">test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb796-75"></span>
<span id="cb796-76"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb796-77">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> inputs, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_loader:</span>
<span id="cb796-78">        inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device)</span>
<span id="cb796-79">        targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets.to(device)</span>
<span id="cb796-80"></span>
<span id="cb796-81">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb796-82">        outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb796-83"></span>
<span id="cb796-84">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the loss</span></span>
<span id="cb796-85">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, targets)</span>
<span id="cb796-86"></span>
<span id="cb796-87">        test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb796-88"></span>
<span id="cb796-89"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the average test loss</span></span>
<span id="cb796-90">average_test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_loader)</span>
<span id="cb796-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test_loss_list_P_25.append(average_test_loss)</span></span>
<span id="cb796-92"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Average Test Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>average_test_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb796-93"></span>
<span id="cb796-94">plt.plot(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), losses)</span>
<span id="cb796-95">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Epoch'</span>)</span>
<span id="cb796-96">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss'</span>)</span>
<span id="cb796-97"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.title('Train Loss vs. Epoch for channel '+target_var_96_list[x_channel])</span></span>
<span id="cb796-98">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb796-99">plt.show() </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(1324, 4, 80, 80) (332, 4, 80, 80) (1324, 2, 80, 80) (332, 2, 80, 80)
==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
Autoencoder_CNN                          [1656, 2, 80, 80]         --
├─Encoder: 1-1                           [1656, 2048]              --
│    └─Sequential: 2-1                   [1656, 2048]              --
│    │    └─Conv2d: 3-1                  [1656, 64, 40, 40]        2,368
│    │    └─GELU: 3-2                    [1656, 64, 40, 40]        --
│    │    └─Conv2d: 3-3                  [1656, 64, 40, 40]        36,928
│    │    └─GELU: 3-4                    [1656, 64, 40, 40]        --
│    │    └─Conv2d: 3-5                  [1656, 128, 20, 20]       73,856
│    │    └─GELU: 3-6                    [1656, 128, 20, 20]       --
│    │    └─Conv2d: 3-7                  [1656, 128, 20, 20]       147,584
│    │    └─GELU: 3-8                    [1656, 128, 20, 20]       --
│    │    └─Conv2d: 3-9                  [1656, 256, 10, 10]       295,168
│    │    └─GELU: 3-10                   [1656, 256, 10, 10]       --
│    │    └─Flatten: 3-11                [1656, 25600]             --
│    │    └─Linear: 3-12                 [1656, 2048]              52,430,848
├─Decoder: 1-2                           [1656, 2, 80, 80]         --
│    └─Sequential: 2-2                   [1656, 2, 80, 80]         --
│    │    └─Linear: 3-13                 [1656, 25600]             52,454,400
│    │    └─Unflatten: 3-14              [1656, 256, 10, 10]       --
│    │    └─ConvTranspose2d: 3-15        [1656, 128, 20, 20]       295,040
│    │    └─GELU: 3-16                   [1656, 128, 20, 20]       --
│    │    └─Conv2d: 3-17                 [1656, 128, 20, 20]       147,584
│    │    └─GELU: 3-18                   [1656, 128, 20, 20]       --
│    │    └─ConvTranspose2d: 3-19        [1656, 64, 40, 40]        73,792
│    │    └─GELU: 3-20                   [1656, 64, 40, 40]        --
│    │    └─Conv2d: 3-21                 [1656, 64, 40, 40]        36,928
│    │    └─GELU: 3-22                   [1656, 64, 40, 40]        --
│    │    └─ConvTranspose2d: 3-23        [1656, 2, 80, 80]         1,154
==========================================================================================
Total params: 105,995,650
Trainable params: 105,995,650
Non-trainable params: 0
Total mult-adds (Units.TERABYTES): 1.07
==========================================================================================
Input size (MB): 169.57
Forward/backward pass size (MB): 9014.58
Params size (MB): 423.98
Estimated Total Size (MB): 9608.13
==========================================================================================</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  1%|▏         | 1/80 [00:02&lt;02:40,  2.03s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/80] Loss: 1343.9761
Average Test Loss: 313.2759</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 26%|██▋       | 21/80 [00:35&lt;01:40,  1.71s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/80] Loss: 51.4848
Average Test Loss: 41.3688</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 51%|█████▏    | 41/80 [01:09&lt;01:07,  1.72s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/80] Loss: 19.3960
Average Test Loss: 15.7720</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 76%|███████▋  | 61/80 [01:43&lt;00:32,  1.71s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/80] Loss: 10.1627
Average Test Loss: 6.6679</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 80/80 [02:15&lt;00:00,  1.70s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 3.3631</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-58-output-12.png" class="lightbox" data-gallery="quarto-lightbox-gallery-62"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-58-output-12.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-81" class="cell">
<div class="sourceCode cell-code" id="cb808" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb808-1">torch.save(model.state_dict(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model/auto_conv_in4_out2.pt'</span>)</span>
<span id="cb808-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Autoencoder_CNN(image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, num_input_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, num_output_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.GELU)</span>
<span id="cb808-3">model.to(device) </span>
<span id="cb808-4">model.load_state_dict(torch.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model/auto_conv_in4_out2.pt'</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;All keys matched successfully&gt;</code></pre>
</div>
</div>
</section>
</section>
<section id="unet-autoencoder-with-convolutional-layers" class="level1">
<h1>UNET Autoencoder with convolutional layers</h1>
<section id="model-defination-2" class="level2">
<h2 class="anchored" data-anchor-id="model-defination-2">Model defination</h2>
<p><img src="https://jaiswalsuraj487.github.io/publications_and_projects/images/autoencoder/Unet_architecture.png" width="800"></p>
<div id="cell-86" class="cell">
<div class="sourceCode cell-code" id="cb810" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb810-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Encoder(nn.Module):</span>
<span id="cb810-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, image_size, num_input_channels, num_output_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.GELU):</span>
<span id="cb810-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Encoder, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb810-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_size</span>
<span id="cb810-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_input_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_input_channels</span>
<span id="cb810-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_output_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_output_channels</span>
<span id="cb810-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c_hid</span>
<span id="cb810-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> latent_dim</span>
<span id="cb810-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation</span>
<span id="cb810-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.net <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb810-11">            nn.Conv2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_input_channels, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb810-12">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(),</span>
<span id="cb810-13">            nn.Conv2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb810-14">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(),</span>
<span id="cb810-15">            nn.Conv2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb810-16">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(),</span>
<span id="cb810-17">            nn.Conv2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb810-18">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(),</span>
<span id="cb810-19">            nn.Conv2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb810-20">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(),</span>
<span id="cb810-21">            nn.Flatten(),</span>
<span id="cb810-22">            nn.Linear((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latent_dim)</span>
<span id="cb810-23">        )</span>
<span id="cb810-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb810-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.net(x)</span>
<span id="cb810-26">    </span>
<span id="cb810-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Decoder(nn.Module):</span>
<span id="cb810-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, image_size, num_input_channels, num_output_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.GELU):</span>
<span id="cb810-29">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Decoder, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb810-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_size</span>
<span id="cb810-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_input_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_input_channels</span>
<span id="cb810-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_output_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_output_channels</span>
<span id="cb810-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c_hid</span>
<span id="cb810-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> latent_dim</span>
<span id="cb810-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation</span>
<span id="cb810-36">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb810-37">            nn.Linear(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latent_dim, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>),</span>
<span id="cb810-38">            nn.Unflatten(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)),</span>
<span id="cb810-39">            nn.ConvTranspose2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, output_padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb810-40">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(),</span>
<span id="cb810-41">            nn.Conv2d(in_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb810-42">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(),</span>
<span id="cb810-43">            nn.ConvTranspose2d(in_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, out_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, output_padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb810-44">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(),</span>
<span id="cb810-45">            nn.Conv2d(in_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid,out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb810-46">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(),</span>
<span id="cb810-47">            nn.ConvTranspose2d(in_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_output_channels, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, output_padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb810-48">        )</span>
<span id="cb810-49">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb810-50">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder(x)</span>
<span id="cb810-51">    </span>
<span id="cb810-52"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Autoencoder_UNET(nn.Module):</span>
<span id="cb810-53">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, image_size, num_input_channels, num_output_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.GELU, encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Encoder, decoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Decoder):</span>
<span id="cb810-54">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Autoencoder_UNET, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb810-55">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_size</span>
<span id="cb810-56">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_input_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_input_channels</span>
<span id="cb810-57">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_output_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_output_channels</span>
<span id="cb810-58">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c_hid</span>
<span id="cb810-59">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> latent_dim</span>
<span id="cb810-60">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation</span>
<span id="cb810-61">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoder(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_size, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_input_channels, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_output_channels, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latent_dim, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation)</span>
<span id="cb810-62">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decoder(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_size, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_input_channels, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_output_channels, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c_hid, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latent_dim, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation)</span>
<span id="cb810-63">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># def forward(self, x):</span></span>
<span id="cb810-64">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     x = self.encoder(x)</span></span>
<span id="cb810-65">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     # print(x.shape)</span></span>
<span id="cb810-66">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     x = self.decoder(x)</span></span>
<span id="cb810-67">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     return x</span></span>
<span id="cb810-68">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb810-69">        conv1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder.net[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb810-70">        activation1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder.net[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb810-71">        conv2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder.net[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb810-72">        activation2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder.net[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb810-73">        conv3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder.net[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb810-74">        activation3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder.net[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb810-75">        conv4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder.net[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]</span>
<span id="cb810-76">        activation4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder.net[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>]</span>
<span id="cb810-77">        conv5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder.net[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>]</span>
<span id="cb810-78">        activation5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder.net[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]</span>
<span id="cb810-79">        flatten <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder.net[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span>
<span id="cb810-80">        linear <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder.net[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>]</span>
<span id="cb810-81">        lineart <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder.decoder[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb810-82">        unflattent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder.decoder[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb810-83">        convt2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder.decoder[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb810-84">        activation7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder.decoder[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb810-85">        convt3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder.decoder[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb810-86">        activation8 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder.decoder[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb810-87">        convt4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder.decoder[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]</span>
<span id="cb810-88">        activation9 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder.decoder[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>]</span>
<span id="cb810-89">        convt5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder.decoder[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>]</span>
<span id="cb810-90">        activation10 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder.decoder[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]</span>
<span id="cb810-91">        convt6 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder.decoder[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span>
<span id="cb810-92">        x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation1(conv1(x))</span>
<span id="cb810-93">        x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation2(conv2(x1))</span>
<span id="cb810-94">        x3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation3(conv3(x2))</span>
<span id="cb810-95">        x4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation4(conv4(x3))</span>
<span id="cb810-96">        x5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation5(conv5(x4))</span>
<span id="cb810-97">        x6 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> flatten(x5)</span>
<span id="cb810-98">        x7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linear(x6)</span>
<span id="cb810-99">        x8 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineart(x7)</span>
<span id="cb810-100">        x9 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unflattent(x8)</span>
<span id="cb810-101">        x10 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation7(convt2(x9<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>x5))</span>
<span id="cb810-102">        x11 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation8(convt3(x10<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>x4))</span>
<span id="cb810-103">        x12 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation9(convt4(x11<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>x3))</span>
<span id="cb810-104">        x13 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation10(convt5(x12<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>x2))</span>
<span id="cb810-105">        x13 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> convt6(x13<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>x1)</span>
<span id="cb810-106">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x13</span></code></pre></div>
</div>
<div id="cell-87" class="cell">
<div class="sourceCode cell-code" id="cb811" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb811-1">model_auto <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Autoencoder_UNET(image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, num_input_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, num_output_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.GELU)</span>
<span id="cb811-2">model_auto</span>
<span id="cb811-3">dummy_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming input size of (batch_size, num_num_input_channels, height, width)</span></span>
<span id="cb811-4">out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_auto(dummy_input)</span>
<span id="cb811-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(out.shape)    </span>
<span id="cb811-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(model_auto)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([11, 2, 80, 80])
Autoencoder_UNET(
  (encoder): Encoder(
    (net): Sequential(
      (0): Conv2d(14, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (1): GELU(approximate='none')
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): GELU(approximate='none')
      (4): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (5): GELU(approximate='none')
      (6): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (7): GELU(approximate='none')
      (8): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (9): GELU(approximate='none')
      (10): Flatten(start_dim=1, end_dim=-1)
      (11): Linear(in_features=6400, out_features=1024, bias=True)
    )
  )
  (decoder): Decoder(
    (decoder): Sequential(
      (0): Linear(in_features=1024, out_features=6400, bias=True)
      (1): Unflatten(dim=1, unflattened_size=(64, 10, 10))
      (2): ConvTranspose2d(64, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (3): GELU(approximate='none')
      (4): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): GELU(approximate='none')
      (6): ConvTranspose2d(32, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (7): GELU(approximate='none')
      (8): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): GELU(approximate='none')
      (10): ConvTranspose2d(16, 2, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
    )
  )
)</code></pre>
</div>
</div>
<div id="cell-88" class="cell">
<div class="sourceCode cell-code" id="cb813" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb813-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchinfo <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> summary</span>
<span id="cb813-2">summary(model_auto, input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1656</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
Autoencoder_UNET                         [1656, 2, 80, 80]         --
├─Encoder: 1-1                           --                        --
│    └─Sequential: 2-1                   --                        --
│    │    └─Conv2d: 3-1                  [1656, 16, 40, 40]        2,032
│    │    └─GELU: 3-2                    [1656, 16, 40, 40]        --
│    │    └─Conv2d: 3-3                  [1656, 16, 40, 40]        2,320
│    │    └─GELU: 3-4                    [1656, 16, 40, 40]        --
│    │    └─Conv2d: 3-5                  [1656, 32, 20, 20]        4,640
│    │    └─GELU: 3-6                    [1656, 32, 20, 20]        --
│    │    └─Conv2d: 3-7                  [1656, 32, 20, 20]        9,248
│    │    └─GELU: 3-8                    [1656, 32, 20, 20]        --
│    │    └─Conv2d: 3-9                  [1656, 64, 10, 10]        18,496
│    │    └─GELU: 3-10                   [1656, 64, 10, 10]        --
│    │    └─Flatten: 3-11                [1656, 6400]              --
│    │    └─Linear: 3-12                 [1656, 1024]              6,554,624
├─Decoder: 1-2                           --                        --
│    └─Sequential: 2-2                   --                        --
│    │    └─Linear: 3-13                 [1656, 6400]              6,560,000
│    │    └─Unflatten: 3-14              [1656, 64, 10, 10]        --
│    │    └─ConvTranspose2d: 3-15        [1656, 32, 20, 20]        18,464
│    │    └─GELU: 3-16                   [1656, 32, 20, 20]        --
│    │    └─Conv2d: 3-17                 [1656, 32, 20, 20]        9,248
│    │    └─GELU: 3-18                   [1656, 32, 20, 20]        --
│    │    └─ConvTranspose2d: 3-19        [1656, 16, 40, 40]        4,624
│    │    └─GELU: 3-20                   [1656, 16, 40, 40]        --
│    │    └─Conv2d: 3-21                 [1656, 16, 40, 40]        2,320
│    │    └─GELU: 3-22                   [1656, 16, 40, 40]        --
│    │    └─ConvTranspose2d: 3-23        [1656, 2, 80, 80]         290
==========================================================================================
Total params: 13,186,306
Trainable params: 13,186,306
Non-trainable params: 0
Total mult-adds (Units.GIGABYTES): 85.34
==========================================================================================
Input size (MB): 593.51
Forward/backward pass size (MB): 2387.61
Params size (MB): 52.75
Estimated Total Size (MB): 3033.86
==========================================================================================</code></pre>
</div>
</div>
<div id="cell-89" class="cell">
<div class="sourceCode cell-code" id="cb815" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb815-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchsummary <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> summary</span>
<span id="cb815-2">summary(model_auto, input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1           [-1, 16, 40, 40]           2,032
              GELU-2           [-1, 16, 40, 40]               0
            Conv2d-3           [-1, 16, 40, 40]           2,320
              GELU-4           [-1, 16, 40, 40]               0
            Conv2d-5           [-1, 32, 20, 20]           4,640
              GELU-6           [-1, 32, 20, 20]               0
            Conv2d-7           [-1, 32, 20, 20]           9,248
              GELU-8           [-1, 32, 20, 20]               0
            Conv2d-9           [-1, 64, 10, 10]          18,496
             GELU-10           [-1, 64, 10, 10]               0
          Flatten-11                 [-1, 6400]               0
           Linear-12                 [-1, 1024]       6,554,624
           Linear-13                 [-1, 6400]       6,560,000
        Unflatten-14           [-1, 64, 10, 10]               0
  ConvTranspose2d-15           [-1, 32, 20, 20]          18,464
             GELU-16           [-1, 32, 20, 20]               0
           Conv2d-17           [-1, 32, 20, 20]           9,248
             GELU-18           [-1, 32, 20, 20]               0
  ConvTranspose2d-19           [-1, 16, 40, 40]           4,624
             GELU-20           [-1, 16, 40, 40]               0
           Conv2d-21           [-1, 16, 40, 40]           2,320
             GELU-22           [-1, 16, 40, 40]               0
  ConvTranspose2d-23            [-1, 2, 80, 80]             290
================================================================
Total params: 13,186,306
Trainable params: 13,186,306
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.34
Forward/backward pass size (MB): 2.69
Params size (MB): 50.30
Estimated Total Size (MB): 53.34
----------------------------------------------------------------</code></pre>
</div>
</div>
</section>
<section id="training-on-all-channel-and-predicting-on-all-channel-unet" class="level2">
<h2 class="anchored" data-anchor-id="training-on-all-channel-and-predicting-on-all-channel-unet">Training on all channel and predicting on all channel UNET</h2>
<div id="cell-91" class="cell">
<div class="sourceCode cell-code" id="cb817" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb817-1">target_var_96_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TSURF_K'</span>,</span>
<span id="cb817-2">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SNOWEW_M'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SNOWAGE_HR'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PRATE_MMpH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CLOUD_OD'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'U10_MpS'</span>,</span>
<span id="cb817-3">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V10_MpS'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'T2_K'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SWSFC_WpM2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SOLM_M3pM3'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CLDTOP_KM'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CAPE'</span>,</span>
<span id="cb817-4">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PBL_WRF_M'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PBL_YSU_M'</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ['U10_MpS', 'T2_K', 'V10_MpS']</span></span>
<span id="cb817-5">target_var_120_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P25'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P10'</span>] </span>
<span id="cb817-6">X,y  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_data(target_var_96_list, target_var_120_list)</span>
<span id="cb817-7"></span>
<span id="cb817-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb817-9">X_train_all, X_test_all, y_train_all, y_test_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb817-10">X_train_all.shape, X_test_all.shape, y_train_all.shape, y_test_all.shape</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>X shape  (1656, 14, 80, 80)
y shape (1656, 2, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>((1324, 14, 80, 80), (332, 14, 80, 80), (1324, 2, 80, 80), (332, 2, 80, 80))</code></pre>
</div>
</div>
<div id="cell-92" class="cell">
<div class="sourceCode cell-code" id="cb820" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb820-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(X_train_all.shape, X_test_all.shape, y_train_all.shape, y_test_all.shape)</span>
<span id="cb820-2">train_custom_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomDataset(X_train_all, y_train_all)</span>
<span id="cb820-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(train_custom_dataset))</span></span>
<span id="cb820-4">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb820-5">train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.DataLoader(train_custom_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb820-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(train_loader))</span></span>
<span id="cb820-7"></span>
<span id="cb820-8">test_custom_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomDataset(X_test_all, y_test_all)</span>
<span id="cb820-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(test_custom_dataset))</span></span>
<span id="cb820-10">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb820-11">test_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.DataLoader(test_custom_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb820-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(test_loader))</span></span>
<span id="cb820-13"></span>
<span id="cb820-14"></span>
<span id="cb820-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#################### Training the model ####################</span></span>
<span id="cb820-16">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Autoencoder_UNET(image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, num_input_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, num_output_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.GELU)</span>
<span id="cb820-17">model.to(device) </span>
<span id="cb820-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchinfo <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> summary</span>
<span id="cb820-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(summary(model, input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1656</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)))</span>
<span id="cb820-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the loss function and optimizer</span></span>
<span id="cb820-21">criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MSELoss()</span>
<span id="cb820-22">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb820-23">losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [] </span>
<span id="cb820-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training loop</span></span>
<span id="cb820-25">num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb820-26"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> trange(num_epochs):</span>
<span id="cb820-27">    model.train()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to training mode</span></span>
<span id="cb820-28">    total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb820-29">    </span>
<span id="cb820-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> inputs, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> train_loader:</span>
<span id="cb820-31">        optimizer.zero_grad()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zero the gradients</span></span>
<span id="cb820-32">        inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device)</span>
<span id="cb820-33">        targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets.to(device)</span>
<span id="cb820-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb820-35">        outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb820-36">        </span>
<span id="cb820-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the loss</span></span>
<span id="cb820-38">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, targets)</span>
<span id="cb820-39">        </span>
<span id="cb820-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backpropagation</span></span>
<span id="cb820-41">        loss.backward()</span>
<span id="cb820-42">        optimizer.step()</span>
<span id="cb820-43">        </span>
<span id="cb820-44">        total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb820-45"></span>
<span id="cb820-46">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the average loss for this epoch</span></span>
<span id="cb820-47">    average_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_loader)</span>
<span id="cb820-48">    losses.append(average_loss)</span>
<span id="cb820-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: </span>
<span id="cb820-50">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Epoch [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_epochs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>average_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb820-51"></span>
<span id="cb820-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">############################# testing the model #############################</span></span>
<span id="cb820-53">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to evaluation mode</span></span>
<span id="cb820-54">test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb820-55"></span>
<span id="cb820-56"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb820-57">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> inputs, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_loader:</span>
<span id="cb820-58">        inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device)</span>
<span id="cb820-59">        targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets.to(device)</span>
<span id="cb820-60"></span>
<span id="cb820-61">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb820-62">        outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb820-63"></span>
<span id="cb820-64">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the loss</span></span>
<span id="cb820-65">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, targets)</span>
<span id="cb820-66"></span>
<span id="cb820-67">        test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb820-68"></span>
<span id="cb820-69"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the average test loss</span></span>
<span id="cb820-70">average_test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_loader)</span>
<span id="cb820-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test_loss_list_P_25.append(average_test_loss)</span></span>
<span id="cb820-72"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Average Test Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>average_test_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb820-73"></span>
<span id="cb820-74">plt.plot(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), losses)</span>
<span id="cb820-75">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Epoch'</span>)</span>
<span id="cb820-76">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss'</span>)</span>
<span id="cb820-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.title('Train Loss vs. Epoch for channel '+target_var_96_list[x_channel])</span></span>
<span id="cb820-78">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb820-79">plt.show() </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(1324, 14, 80, 80) (332, 14, 80, 80) (1324, 2, 80, 80) (332, 2, 80, 80)
==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
Autoencoder_UNET                         [1656, 2, 80, 80]         --
├─Encoder: 1-1                           --                        --
│    └─Sequential: 2-1                   --                        --
│    │    └─Conv2d: 3-1                  [1656, 64, 40, 40]        8,128
│    │    └─GELU: 3-2                    [1656, 64, 40, 40]        --
│    │    └─Conv2d: 3-3                  [1656, 64, 40, 40]        36,928
│    │    └─GELU: 3-4                    [1656, 64, 40, 40]        --
│    │    └─Conv2d: 3-5                  [1656, 128, 20, 20]       73,856
│    │    └─GELU: 3-6                    [1656, 128, 20, 20]       --
│    │    └─Conv2d: 3-7                  [1656, 128, 20, 20]       147,584
│    │    └─GELU: 3-8                    [1656, 128, 20, 20]       --
│    │    └─Conv2d: 3-9                  [1656, 256, 10, 10]       295,168
│    │    └─GELU: 3-10                   [1656, 256, 10, 10]       --
│    │    └─Flatten: 3-11                [1656, 25600]             --
│    │    └─Linear: 3-12                 [1656, 2048]              52,430,848
├─Decoder: 1-2                           --                        --
│    └─Sequential: 2-2                   --                        --
│    │    └─Linear: 3-13                 [1656, 25600]             52,454,400
│    │    └─Unflatten: 3-14              [1656, 256, 10, 10]       --
│    │    └─ConvTranspose2d: 3-15        [1656, 128, 20, 20]       295,040
│    │    └─GELU: 3-16                   [1656, 128, 20, 20]       --
│    │    └─Conv2d: 3-17                 [1656, 128, 20, 20]       147,584
│    │    └─GELU: 3-18                   [1656, 128, 20, 20]       --
│    │    └─ConvTranspose2d: 3-19        [1656, 64, 40, 40]        73,792
│    │    └─GELU: 3-20                   [1656, 64, 40, 40]        --
│    │    └─Conv2d: 3-21                 [1656, 64, 40, 40]        36,928
│    │    └─GELU: 3-22                   [1656, 64, 40, 40]        --
│    │    └─ConvTranspose2d: 3-23        [1656, 2, 80, 80]         1,154
==========================================================================================
Total params: 106,001,410
Trainable params: 106,001,410
Non-trainable params: 0
Total mult-adds (Units.TERABYTES): 1.09
==========================================================================================
Input size (MB): 593.51
Forward/backward pass size (MB): 9014.58
Params size (MB): 424.01
Estimated Total Size (MB): 10032.09
==========================================================================================</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:03&lt;11:37,  3.50s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 3185.9086</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [01:08&lt;10:15,  3.44s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 238.7220</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [02:19&lt;09:16,  3.50s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 90.1479</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [03:44&lt;09:57,  4.30s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 19.3867</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [05:06&lt;08:00,  4.04s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 7.6679</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [06:30&lt;07:00,  4.24s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 5.9376</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [07:57&lt;05:25,  4.12s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 7.9944</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [09:21&lt;03:59,  4.06s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 5.3282</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [10:38&lt;02:34,  3.97s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 4.2981</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [11:58&lt;01:13,  3.87s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 4.3096</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [13:15&lt;00:00,  3.98s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 3.9575</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-66-output-24.png" class="lightbox" data-gallery="quarto-lightbox-gallery-63"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-66-output-24.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-93" class="cell">
<div class="sourceCode cell-code" id="cb844" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb844-1">torch.save(model.state_dict(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model/auto_conv_unet_in14_out2.pt'</span>)</span>
<span id="cb844-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Autoencoder_UNET(image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, num_input_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, num_output_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.GELU)</span>
<span id="cb844-3">model.to(device) </span>
<span id="cb844-4">model.load_state_dict(torch.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model/auto_conv_unet_in14_out2.pt'</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;All keys matched successfully&gt;</code></pre>
</div>
</div>
</section>
<section id="single-channel-input-single-channel-outputp25-unet" class="level2">
<h2 class="anchored" data-anchor-id="single-channel-input-single-channel-outputp25-unet">Single channel input single channel output(P25) UNET</h2>
<div id="cell-95" class="cell">
<div class="sourceCode cell-code" id="cb846" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb846-1">target_var_96_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TSURF_K'</span>,</span>
<span id="cb846-2">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SNOWEW_M'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SNOWAGE_HR'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PRATE_MMpH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CLOUD_OD'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'U10_MpS'</span>,</span>
<span id="cb846-3">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V10_MpS'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'T2_K'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SWSFC_WpM2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SOLM_M3pM3'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CLDTOP_KM'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CAPE'</span>,</span>
<span id="cb846-4">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PBL_WRF_M'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PBL_YSU_M'</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ['U10_MpS', 'T2_K', 'V10_MpS']</span></span>
<span id="cb846-5">target_var_120_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P25'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P10'</span>] </span>
<span id="cb846-6">X,y  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_data(target_var_96_list, target_var_120_list)</span>
<span id="cb846-7"></span>
<span id="cb846-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb846-9">X_train_all, X_test_all, y_train_all, y_test_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb846-10">X_train_all.shape, X_test_all.shape, y_train_all.shape, y_test_all.shape</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>X shape  (1656, 14, 80, 80)
y shape (1656, 2, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>((1324, 14, 80, 80), (332, 14, 80, 80), (1324, 2, 80, 80), (332, 2, 80, 80))</code></pre>
</div>
</div>
<div id="cell-96" class="cell">
<div class="sourceCode cell-code" id="cb849" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb849-1">test_loss_list_P_25_conv_auto_unet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [] </span>
<span id="cb849-2">y_channel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># selecting P25 as output</span></span>
<span id="cb849-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x_channel = 0</span></span>
<span id="cb849-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x_channel <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):</span>
<span id="cb849-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">####################### Selecting the channel #######################</span></span>
<span id="cb849-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X Channel name : '</span>, target_var_96_list[x_channel])</span>
<span id="cb849-7">    X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train_all[:, x_channel:x_channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :,:]</span>
<span id="cb849-8">    X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_test_all[:, x_channel:x_channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :,:]</span>
<span id="cb849-9">    y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_train_all[:, y_channel:y_channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :,:]</span>
<span id="cb849-10">    y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_test_all[:, y_channel:y_channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :,:]</span>
<span id="cb849-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Shapes: '</span>, X_train.shape, X_test.shape, y_train.shape, y_test.shape)</span>
<span id="cb849-12"></span>
<span id="cb849-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">####################### Creating the dataset loader #######################</span></span>
<span id="cb849-14">    train_custom_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomDataset(X_train, y_train)</span>
<span id="cb849-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(train_custom_dataset))</span></span>
<span id="cb849-16">    batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb849-17">    train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.DataLoader(train_custom_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb849-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(train_loader))</span></span>
<span id="cb849-19">    </span>
<span id="cb849-20">    test_custom_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomDataset(X_test, y_test)</span>
<span id="cb849-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(test_custom_dataset))</span></span>
<span id="cb849-22">    batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb849-23">    test_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.DataLoader(test_custom_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb849-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(test_loader))</span></span>
<span id="cb849-25">    </span>
<span id="cb849-26"></span>
<span id="cb849-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#################### Training the model ####################</span></span>
<span id="cb849-28">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Autoencoder_UNET(image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, num_input_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_output_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.GELU)</span>
<span id="cb849-29"></span>
<span id="cb849-30">    model.to(device)</span>
<span id="cb849-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the loss function and optimizer</span></span>
<span id="cb849-32">    criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MSELoss()</span>
<span id="cb849-33">    optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb849-34">    losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb849-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training loop</span></span>
<span id="cb849-36">    num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb849-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> trange(num_epochs):</span>
<span id="cb849-38">        model.train()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to training mode</span></span>
<span id="cb849-39">        total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb849-40">        </span>
<span id="cb849-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> inputs, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> train_loader:</span>
<span id="cb849-42">            optimizer.zero_grad()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zero the gradients</span></span>
<span id="cb849-43">            inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device)</span>
<span id="cb849-44">            targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets.to(device)</span>
<span id="cb849-45">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb849-46">            outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb849-47">            </span>
<span id="cb849-48">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the loss</span></span>
<span id="cb849-49">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, targets)</span>
<span id="cb849-50">            </span>
<span id="cb849-51">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backpropagation</span></span>
<span id="cb849-52">            loss.backward()</span>
<span id="cb849-53">            optimizer.step()</span>
<span id="cb849-54">            </span>
<span id="cb849-55">            total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb849-56"></span>
<span id="cb849-57">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the average loss for this epoch</span></span>
<span id="cb849-58">        average_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_loader)</span>
<span id="cb849-59">        losses.append(average_loss)</span>
<span id="cb849-60">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb849-61">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Epoch [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_epochs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>average_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb849-62">    </span>
<span id="cb849-63">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">############################# testing the model #############################</span></span>
<span id="cb849-64">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to evaluation mode</span></span>
<span id="cb849-65">    test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb849-66"></span>
<span id="cb849-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb849-68">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> inputs, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_loader:</span>
<span id="cb849-69">            inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device)</span>
<span id="cb849-70">            targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets.to(device)</span>
<span id="cb849-71">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb849-72">            outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb849-73">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the loss</span></span>
<span id="cb849-74">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, targets)</span>
<span id="cb849-75">            test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb849-76"></span>
<span id="cb849-77">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the average test loss</span></span>
<span id="cb849-78">    average_test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_loader)</span>
<span id="cb849-79">    test_loss_list_P_25_conv_auto_unet.append(average_test_loss)</span>
<span id="cb849-80">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Average Test Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>average_test_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb849-81">    plt.plot(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), losses)</span>
<span id="cb849-82">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Epoch'</span>)</span>
<span id="cb849-83">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss'</span>)</span>
<span id="cb849-84">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Train Loss vs. Epoch for channel '</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>target_var_96_list[x_channel])</span>
<span id="cb849-85">    plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb849-86">    plt.show() </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  TSURF_K
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 0/200 [00:00&lt;?, ?it/s]  0%|          | 1/200 [00:00&lt;01:04,  3.09it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 2015.0104</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:57,  3.11it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 224.4622</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:13&lt;00:49,  3.20it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 217.3994</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:19&lt;00:43,  3.20it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 213.6307</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:25&lt;00:37,  3.16it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 211.9555</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:31&lt;00:30,  3.20it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 212.0086</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:38&lt;00:24,  3.17it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 210.0710</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:44&lt;00:18,  3.18it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 216.9347</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:50&lt;00:12,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 214.3995</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:56&lt;00:05,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 209.9813</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [01:02&lt;00:00,  3.18it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 192.8667</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-69-output-24.png" class="lightbox" data-gallery="quarto-lightbox-gallery-64"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-69-output-24.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  SNOWEW_M
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;01:01,  3.26it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 720.3883</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:56,  3.15it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 215.2669</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:50,  3.15it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 212.9412</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:19&lt;00:43,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 210.6425</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:25&lt;00:37,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 209.0133</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:31&lt;00:30,  3.22it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 216.0626</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:38&lt;00:24,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 209.8225</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:44&lt;00:18,  3.26it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 209.2404</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:50&lt;00:12,  3.16it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 212.0243</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:56&lt;00:05,  3.18it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 208.9202</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [01:02&lt;00:00,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 191.8743</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-69-output-49.png" class="lightbox" data-gallery="quarto-lightbox-gallery-65"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-69-output-49.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  SNOWAGE_HR
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;01:01,  3.22it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 656.6864</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:56,  3.17it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 215.9682</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:50,  3.17it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 211.3083</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:19&lt;00:43,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 213.7716</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:25&lt;00:36,  3.23it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 210.4161</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:31&lt;00:31,  3.16it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 208.3461</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:38&lt;00:24,  3.22it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 210.5009</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:44&lt;00:18,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 210.7708</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:50&lt;00:11,  3.26it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 208.3222</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:56&lt;00:06,  3.16it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 208.7196</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [01:02&lt;00:00,  3.18it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 198.2665</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-69-output-74.png" class="lightbox" data-gallery="quarto-lightbox-gallery-66"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-69-output-74.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  PRATE_MMpH
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;01:02,  3.17it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 598.2960</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:56,  3.17it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 227.3699</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:49,  3.18it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 219.5535</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:19&lt;00:43,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 210.1886</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:25&lt;00:37,  3.16it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 210.2708</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:31&lt;00:31,  3.14it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 209.0613</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:38&lt;00:24,  3.17it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 208.2215</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:44&lt;00:18,  3.14it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 207.7972</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:50&lt;00:12,  3.18it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 213.5013</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:56&lt;00:05,  3.25it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 208.5548</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [01:02&lt;00:00,  3.18it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 199.3592</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-69-output-99.png" class="lightbox" data-gallery="quarto-lightbox-gallery-67"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-69-output-99.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  CLOUD_OD
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;01:01,  3.23it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 586.9568</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:55,  3.20it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 62.2030</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:49,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 21.8947</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:18&lt;00:41,  3.35it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 13.4883</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:25&lt;00:37,  3.16it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 13.7934</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:31&lt;00:31,  3.16it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 8.8402</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:37&lt;00:24,  3.16it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 8.3218</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:44&lt;00:18,  3.17it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 8.3719</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:50&lt;00:12,  3.25it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 7.2083</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:56&lt;00:05,  3.29it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 6.5652</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [01:02&lt;00:00,  3.20it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 7.9540</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-69-output-124.png" class="lightbox" data-gallery="quarto-lightbox-gallery-68"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-69-output-124.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  U10_MpS
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:59,  3.33it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 473.9317</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:55,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 69.0522</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:48,  3.30it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 18.4941</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:18&lt;00:43,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 10.7839</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:25&lt;00:37,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 7.7059</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:31&lt;00:31,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 6.4899</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:37&lt;00:24,  3.20it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 5.4837</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:43&lt;00:18,  3.25it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 7.5561</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:50&lt;00:12,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 3.8554</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:56&lt;00:05,  3.27it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 4.0530</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [01:02&lt;00:00,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 3.1830</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-69-output-149.png" class="lightbox" data-gallery="quarto-lightbox-gallery-69"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-69-output-149.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  V10_MpS
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;01:00,  3.29it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 561.4590</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:55,  3.23it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 71.1724</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:49,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 19.3733</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:19&lt;00:43,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 9.0035</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:25&lt;00:37,  3.16it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 7.7880</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:31&lt;00:31,  3.18it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 5.6728</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:37&lt;00:24,  3.23it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 8.2339</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:44&lt;00:18,  3.22it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 3.8740</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:50&lt;00:12,  3.24it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 4.9030</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:56&lt;00:05,  3.22it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 4.0399</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [01:02&lt;00:00,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 3.4703</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-69-output-174.png" class="lightbox" data-gallery="quarto-lightbox-gallery-70"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-69-output-174.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  T2_K
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:58,  3.37it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 4816.9447</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:57,  3.13it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 234.2117</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:49,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 222.6848</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:19&lt;00:43,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 215.6618</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:25&lt;00:37,  3.18it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 213.7606</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:31&lt;00:30,  3.22it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 213.5892</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:37&lt;00:25,  3.15it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 211.2940</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:44&lt;00:18,  3.23it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 213.9061</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:50&lt;00:12,  3.23it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 214.1695</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:56&lt;00:05,  3.26it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 208.9214</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [01:02&lt;00:00,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 192.4815</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-69-output-198.png" class="lightbox" data-gallery="quarto-lightbox-gallery-71"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-69-output-198.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  SWSFC_WpM2
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:59,  3.34it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 512.7773</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:54,  3.28it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 214.1751</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:49,  3.23it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 212.7058</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:18&lt;00:43,  3.17it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 214.4303</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:25&lt;00:36,  3.22it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 212.5624</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:31&lt;00:31,  3.18it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 208.8632</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:37&lt;00:24,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 210.4221</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:43&lt;00:18,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 209.8110</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:50&lt;00:12,  3.24it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 207.3880</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:56&lt;00:05,  3.24it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 207.7816</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [01:02&lt;00:00,  3.22it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 191.0656</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-69-output-223.png" class="lightbox" data-gallery="quarto-lightbox-gallery-72"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-69-output-223.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  SOLM_M3pM3
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:58,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 574.8718</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:54,  3.26it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 181.5824</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:49,  3.23it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 115.5675</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:18&lt;00:42,  3.25it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 39.5182</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:24&lt;00:36,  3.22it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 16.1863</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:31&lt;00:30,  3.26it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 11.7081</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:37&lt;00:24,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 8.9398</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:43&lt;00:18,  3.25it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 8.2249</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:49&lt;00:12,  3.22it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 6.6518</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:55&lt;00:05,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 5.9480</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [01:01&lt;00:00,  3.24it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 5.3015</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-69-output-248.png" class="lightbox" data-gallery="quarto-lightbox-gallery-73"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-69-output-248.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  CLDTOP_KM
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:58,  3.39it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 647.1522</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:55,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 215.3608</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:49,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 211.6647</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:19&lt;00:44,  3.10it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 209.6907</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:25&lt;00:37,  3.18it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 211.7445</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:31&lt;00:31,  3.17it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 207.4063</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:38&lt;00:24,  3.20it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 207.9890</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:44&lt;00:18,  3.25it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 207.9899</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:50&lt;00:12,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 209.2992</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:56&lt;00:05,  3.20it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 213.8687</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [01:02&lt;00:00,  3.20it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 191.1090</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-69-output-273.png" class="lightbox" data-gallery="quarto-lightbox-gallery-74"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-69-output-273.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  CAPE
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;01:00,  3.30it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 589.8784</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:56,  3.15it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 213.6897</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:50,  3.14it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 215.2983</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:19&lt;00:43,  3.17it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 216.7662</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:25&lt;00:35,  3.31it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 213.0695</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:31&lt;00:29,  3.30it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 214.7085</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:37&lt;00:24,  3.22it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 213.2036</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:43&lt;00:18,  3.24it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 212.2645</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:49&lt;00:11,  3.34it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 207.4999</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:56&lt;00:05,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 213.0907</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [01:01&lt;00:00,  3.23it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 191.7055</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-69-output-298.png" class="lightbox" data-gallery="quarto-lightbox-gallery-75"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-69-output-298.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  PBL_WRF_M
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;01:00,  3.27it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 613.1753</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:55,  3.24it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 215.8198</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:49,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 211.0306</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:19&lt;00:42,  3.27it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 210.1862</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:25&lt;00:38,  3.11it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 208.5808</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:31&lt;00:30,  3.24it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 208.4701</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:37&lt;00:24,  3.18it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 209.8240</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:44&lt;00:18,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 208.0958</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:50&lt;00:12,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 209.3367</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:56&lt;00:05,  3.24it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 207.0369</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [01:02&lt;00:00,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 192.7273</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-69-output-323.png" class="lightbox" data-gallery="quarto-lightbox-gallery-76"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-69-output-323.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  PBL_YSU_M
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;01:00,  3.28it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 419.9077</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:55,  3.20it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 210.7698</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:48,  3.25it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 208.6584</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:18&lt;00:43,  3.20it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 210.8284</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:25&lt;00:37,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 208.8175</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:31&lt;00:31,  3.18it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 206.5321</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:37&lt;00:24,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 207.8562</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:44&lt;00:18,  3.20it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 207.3433</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:50&lt;00:12,  3.16it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 206.2741</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:57&lt;00:06,  3.01it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 207.5728</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [01:02&lt;00:00,  3.18it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 194.3204</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-69-output-348.png" class="lightbox" data-gallery="quarto-lightbox-gallery-77"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-69-output-348.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-97" class="cell">
<div class="sourceCode cell-code" id="cb1184" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1184-1">test_loss_list_P_25_conv_auto_unet</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[192.86672002618963,
 191.87428977272728,
 198.26652665571734,
 199.35923628373578,
 7.954025506973267,
 3.18301400271329,
 3.4703480113636362,
 192.4814786044034,
 191.06564331054688,
 5.301476088437167,
 191.10903930664062,
 191.70547346635297,
 192.72732405229047,
 194.32039434259588]</code></pre>
</div>
</div>
<div id="cell-98" class="cell">
<div class="sourceCode cell-code" id="cb1186" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1186-1">name_loss_pairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(target_var_96_list, test_loss_list_P_25_conv_auto_unet))</span>
<span id="cb1186-2"></span>
<span id="cb1186-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort based on loss values</span></span>
<span id="cb1186-4">sorted_name_loss_pairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(name_loss_pairs, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb1186-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pair <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sorted_name_loss_pairs:</span>
<span id="cb1186-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(pair)</span>
<span id="cb1186-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(sorted_name_loss_pairs)</span></span>
<span id="cb1186-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the lowest 3 names</span></span>
<span id="cb1186-9">lowest_3_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [pair[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pair <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sorted_name_loss_pairs[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]]</span>
<span id="cb1186-10"></span>
<span id="cb1186-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lowest 3 names:"</span>, lowest_3_names)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>('U10_MpS', 3.18301400271329)
('V10_MpS', 3.4703480113636362)
('SOLM_M3pM3', 5.301476088437167)
('CLOUD_OD', 7.954025506973267)
('SWSFC_WpM2', 191.06564331054688)
('CLDTOP_KM', 191.10903930664062)
('CAPE', 191.70547346635297)
('SNOWEW_M', 191.87428977272728)
('T2_K', 192.4814786044034)
('PBL_WRF_M', 192.72732405229047)
('TSURF_K', 192.86672002618963)
('PBL_YSU_M', 194.32039434259588)
('SNOWAGE_HR', 198.26652665571734)
('PRATE_MMpH', 199.35923628373578)
Lowest 3 names: ['U10_MpS', 'V10_MpS', 'SOLM_M3pM3']</code></pre>
</div>
</div>
<div id="cell-99" class="cell">
<div class="sourceCode cell-code" id="cb1188" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1188-1">summary(model, input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1            [-1, 8, 40, 40]              80
              GELU-2            [-1, 8, 40, 40]               0
            Conv2d-3            [-1, 8, 40, 40]             584
              GELU-4            [-1, 8, 40, 40]               0
            Conv2d-5           [-1, 16, 20, 20]           1,168
              GELU-6           [-1, 16, 20, 20]               0
            Conv2d-7           [-1, 16, 20, 20]           2,320
              GELU-8           [-1, 16, 20, 20]               0
            Conv2d-9           [-1, 32, 10, 10]           4,640
             GELU-10           [-1, 32, 10, 10]               0
          Flatten-11                 [-1, 3200]               0
           Linear-12                  [-1, 512]       1,638,912
           Linear-13                 [-1, 3200]       1,641,600
        Unflatten-14           [-1, 32, 10, 10]               0
  ConvTranspose2d-15           [-1, 16, 20, 20]           4,624
             GELU-16           [-1, 16, 20, 20]               0
           Conv2d-17           [-1, 16, 20, 20]           2,320
             GELU-18           [-1, 16, 20, 20]               0
  ConvTranspose2d-19            [-1, 8, 40, 40]           1,160
             GELU-20            [-1, 8, 40, 40]               0
           Conv2d-21            [-1, 8, 40, 40]             584
             GELU-22            [-1, 8, 40, 40]               0
  ConvTranspose2d-23            [-1, 1, 80, 80]              73
================================================================
Total params: 3,298,065
Trainable params: 3,298,065
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.02
Forward/backward pass size (MB): 1.35
Params size (MB): 12.58
Estimated Total Size (MB): 13.95
----------------------------------------------------------------</code></pre>
</div>
</div>
<div id="cell-100" class="cell">
<div class="sourceCode cell-code" id="cb1190" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1190-1">summary(model, input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1            [-1, 8, 40, 40]              80
              GELU-2            [-1, 8, 40, 40]               0
            Conv2d-3            [-1, 8, 40, 40]             584
              GELU-4            [-1, 8, 40, 40]               0
            Conv2d-5           [-1, 16, 20, 20]           1,168
              GELU-6           [-1, 16, 20, 20]               0
            Conv2d-7           [-1, 16, 20, 20]           2,320
              GELU-8           [-1, 16, 20, 20]               0
            Conv2d-9           [-1, 32, 10, 10]           4,640
             GELU-10           [-1, 32, 10, 10]               0
          Flatten-11                 [-1, 3200]               0
           Linear-12                 [-1, 1024]       3,277,824
          Encoder-13                 [-1, 1024]               0
           Linear-14                 [-1, 3200]       3,280,000
        Unflatten-15           [-1, 32, 10, 10]               0
  ConvTranspose2d-16           [-1, 16, 20, 20]           4,624
             GELU-17           [-1, 16, 20, 20]               0
           Conv2d-18           [-1, 16, 20, 20]           2,320
             GELU-19           [-1, 16, 20, 20]               0
  ConvTranspose2d-20            [-1, 8, 40, 40]           1,160
             GELU-21            [-1, 8, 40, 40]               0
           Conv2d-22            [-1, 8, 40, 40]             584
             GELU-23            [-1, 8, 40, 40]               0
  ConvTranspose2d-24            [-1, 1, 80, 80]              73
          Decoder-25            [-1, 1, 80, 80]               0
================================================================
Total params: 6,575,377
Trainable params: 6,575,377
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.02
Forward/backward pass size (MB): 1.41
Params size (MB): 25.08
Estimated Total Size (MB): 26.51
----------------------------------------------------------------</code></pre>
</div>
</div>
</section>
<section id="single-channel-input-single-channel-outputp10-unet" class="level2">
<h2 class="anchored" data-anchor-id="single-channel-input-single-channel-outputp10-unet">Single channel input single channel output(P10) UNET</h2>
<div id="cell-102" class="cell">
<div class="sourceCode cell-code" id="cb1192" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1192-1">test_loss_list_P_10_conv_auto_unet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [] </span>
<span id="cb1192-2">y_channel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># selecting P10 as output</span></span>
<span id="cb1192-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x_channel = 0</span></span>
<span id="cb1192-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x_channel <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):</span>
<span id="cb1192-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">####################### Selecting the channel #######################</span></span>
<span id="cb1192-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X Channel name : '</span>, target_var_96_list[x_channel])</span>
<span id="cb1192-7">    X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train_all[:, x_channel:x_channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :,:]</span>
<span id="cb1192-8">    X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_test_all[:, x_channel:x_channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :,:]</span>
<span id="cb1192-9">    y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_train_all[:, y_channel:y_channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :,:]</span>
<span id="cb1192-10">    y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_test_all[:, y_channel:y_channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :,:]</span>
<span id="cb1192-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Shapes: '</span>, X_train.shape, X_test.shape, y_train.shape, y_test.shape)</span>
<span id="cb1192-12"></span>
<span id="cb1192-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">####################### Creating the dataset loader #######################</span></span>
<span id="cb1192-14">    train_custom_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomDataset(X_train, y_train)</span>
<span id="cb1192-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(train_custom_dataset))</span></span>
<span id="cb1192-16">    batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb1192-17">    train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.DataLoader(train_custom_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1192-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(train_loader))</span></span>
<span id="cb1192-19">    </span>
<span id="cb1192-20">    test_custom_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomDataset(X_test, y_test)</span>
<span id="cb1192-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(test_custom_dataset))</span></span>
<span id="cb1192-22">    batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb1192-23">    test_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.DataLoader(test_custom_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb1192-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(test_loader))</span></span>
<span id="cb1192-25">    </span>
<span id="cb1192-26"></span>
<span id="cb1192-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#################### Training the model ####################</span></span>
<span id="cb1192-28">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Autoencoder_UNET(image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, num_input_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_output_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.GELU)</span>
<span id="cb1192-29"></span>
<span id="cb1192-30">    model.to(device)</span>
<span id="cb1192-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the loss function and optimizer</span></span>
<span id="cb1192-32">    criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MSELoss()</span>
<span id="cb1192-33">    optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb1192-34">    losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1192-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training loop</span></span>
<span id="cb1192-36">    num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb1192-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> trange(num_epochs):</span>
<span id="cb1192-38">        model.train()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to training mode</span></span>
<span id="cb1192-39">        total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb1192-40">        </span>
<span id="cb1192-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> inputs, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> train_loader:</span>
<span id="cb1192-42">            optimizer.zero_grad()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zero the gradients</span></span>
<span id="cb1192-43">            inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device)</span>
<span id="cb1192-44">            targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets.to(device)</span>
<span id="cb1192-45">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb1192-46">            outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb1192-47">            </span>
<span id="cb1192-48">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the loss</span></span>
<span id="cb1192-49">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, targets)</span>
<span id="cb1192-50">            </span>
<span id="cb1192-51">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backpropagation</span></span>
<span id="cb1192-52">            loss.backward()</span>
<span id="cb1192-53">            optimizer.step()</span>
<span id="cb1192-54">            </span>
<span id="cb1192-55">            total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb1192-56"></span>
<span id="cb1192-57">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the average loss for this epoch</span></span>
<span id="cb1192-58">        average_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_loader)</span>
<span id="cb1192-59">        losses.append(average_loss)</span>
<span id="cb1192-60">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1192-61">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Epoch [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_epochs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>average_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1192-62">    </span>
<span id="cb1192-63">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">############################# testing the model #############################</span></span>
<span id="cb1192-64">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to evaluation mode</span></span>
<span id="cb1192-65">    test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb1192-66"></span>
<span id="cb1192-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb1192-68">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> inputs, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_loader:</span>
<span id="cb1192-69">            inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device)</span>
<span id="cb1192-70">            targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets.to(device)</span>
<span id="cb1192-71">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb1192-72">            outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb1192-73">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the loss</span></span>
<span id="cb1192-74">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, targets)</span>
<span id="cb1192-75">            test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb1192-76"></span>
<span id="cb1192-77">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the average test loss</span></span>
<span id="cb1192-78">    average_test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_loader)</span>
<span id="cb1192-79">    test_loss_list_P_10_conv_auto_unet.append(average_test_loss)</span>
<span id="cb1192-80">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Average Test Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>average_test_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1192-81">    plt.plot(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), losses)</span>
<span id="cb1192-82">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Epoch'</span>)</span>
<span id="cb1192-83">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss'</span>)</span>
<span id="cb1192-84">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Train Loss vs. Epoch for channel '</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>target_var_96_list[x_channel])</span>
<span id="cb1192-85">    plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb1192-86">    plt.show() </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  TSURF_K
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;01:04,  3.10it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 9347.3935</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:55,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 445.2209</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:49,  3.24it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 421.8352</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:19&lt;00:43,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 411.4913</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:25&lt;00:37,  3.20it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 406.5355</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:31&lt;00:31,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 410.0266</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:37&lt;00:24,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 403.3963</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:44&lt;00:18,  3.24it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 402.2838</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:50&lt;00:12,  3.14it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 404.5083</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:56&lt;00:05,  3.23it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 408.9846</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [01:02&lt;00:00,  3.18it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 393.9739</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-74-output-25.png" class="lightbox" data-gallery="quarto-lightbox-gallery-78"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-74-output-25.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  SNOWEW_M
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;01:01,  3.23it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1062.0485</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:57,  3.13it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 425.7831</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:50,  3.16it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 414.1087</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:19&lt;00:43,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 407.9692</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:25&lt;00:37,  3.13it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 409.0262</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:31&lt;00:29,  3.32it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 413.5665</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:37&lt;00:24,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 406.8342</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:44&lt;00:18,  3.20it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 401.0203</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:50&lt;00:12,  3.16it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 403.7887</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:56&lt;00:05,  3.18it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 412.0851</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [01:02&lt;00:00,  3.18it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 384.9228</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-74-output-49.png" class="lightbox" data-gallery="quarto-lightbox-gallery-79"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-74-output-49.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  SNOWAGE_HR
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;01:02,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1334.1772</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:55,  3.24it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 432.3582</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:51,  3.09it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 416.2745</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:19&lt;00:42,  3.27it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 412.7553</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:25&lt;00:36,  3.29it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 411.6587</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:31&lt;00:30,  3.28it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 409.5164</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:37&lt;00:25,  3.11it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 409.2917</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:43&lt;00:18,  3.17it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 414.7216</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:50&lt;00:12,  3.23it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 405.0483</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:56&lt;00:05,  3.18it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 404.8374</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [01:02&lt;00:00,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 366.9726</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-74-output-73.png" class="lightbox" data-gallery="quarto-lightbox-gallery-80"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-74-output-73.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  PRATE_MMpH
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;01:07,  2.95it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1228.4596</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:56,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 418.4353</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:13&lt;00:49,  3.20it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 411.4351</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:19&lt;00:42,  3.30it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 411.3802</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:25&lt;00:36,  3.27it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 408.2070</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:31&lt;00:30,  3.29it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 402.7285</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:38&lt;00:24,  3.26it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 405.0596</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:44&lt;00:18,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 401.6986</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:50&lt;00:12,  3.22it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 401.9078</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:56&lt;00:06,  3.16it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 405.1741</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [01:02&lt;00:00,  3.19it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 397.5330</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-74-output-98.png" class="lightbox" data-gallery="quarto-lightbox-gallery-81"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-74-output-98.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  CLOUD_OD
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;01:00,  3.28it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1086.5345</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:54,  3.29it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 115.0784</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:48,  3.26it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 55.1418</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:18&lt;00:41,  3.35it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 35.0410</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:24&lt;00:35,  3.32it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 25.9328</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:31&lt;00:30,  3.27it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 22.8977</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:37&lt;00:23,  3.32it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 22.6624</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:43&lt;00:18,  3.15it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 18.5878</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:49&lt;00:11,  3.25it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 16.7638</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:55&lt;00:05,  3.31it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 18.7935</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [01:01&lt;00:00,  3.27it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 16.7694</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-74-output-123.png" class="lightbox" data-gallery="quarto-lightbox-gallery-82"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-74-output-123.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  U10_MpS
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:58,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1370.2549</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:53,  3.35it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 253.0794</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:48,  3.29it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 73.3127</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:18&lt;00:44,  3.12it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 34.2972</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:24&lt;00:37,  3.16it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 23.2712</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:31&lt;00:30,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 18.8157</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:37&lt;00:25,  3.14it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 17.0560</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:43&lt;00:17,  3.46it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 13.7983</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:49&lt;00:12,  3.23it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 12.2436</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:55&lt;00:05,  3.21it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 11.2890</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [01:01&lt;00:00,  3.26it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 16.9951</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-74-output-148.png" class="lightbox" data-gallery="quarto-lightbox-gallery-83"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-74-output-148.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  V10_MpS
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;01:00,  3.28it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1202.3667</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:54,  3.29it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 284.9583</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:48,  3.26it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 49.5132</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:18&lt;00:42,  3.29it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 23.7217</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:24&lt;00:37,  3.18it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 16.5870</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:31&lt;00:29,  3.36it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 13.4451</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:39&lt;00:33,  2.34it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 11.5799</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:47&lt;00:25,  2.32it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 10.4765</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:55&lt;00:15,  2.44it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 13.5249</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [01:03&lt;00:06,  3.06it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 9.1645</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [01:10&lt;00:00,  2.85it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 8.1653</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-74-output-172.png" class="lightbox" data-gallery="quarto-lightbox-gallery-84"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-74-output-172.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  T2_K
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;01:01,  3.25it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1344.0557</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:08&lt;01:31,  1.95it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 410.2120</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:15&lt;00:48,  3.25it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 409.9936</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:21&lt;00:42,  3.27it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 403.0425</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:27&lt;00:34,  3.47it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 413.2495</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:33&lt;00:32,  3.06it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 410.5454</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:41&lt;00:22,  3.51it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 408.9813</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:46&lt;00:16,  3.63it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 404.3268</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:52&lt;00:11,  3.53it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 402.1354</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:58&lt;00:05,  3.47it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 403.1094</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [01:03&lt;00:00,  3.14it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 370.9240</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-74-output-196.png" class="lightbox" data-gallery="quarto-lightbox-gallery-85"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-74-output-196.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  SWSFC_WpM2
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;01:13,  2.70it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1138.2640</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:51,  3.49it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 428.3663</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:11&lt;00:45,  3.49it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 428.3100</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:39,  3.49it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 411.9817</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:34,  3.50it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 406.6649</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:29,  3.36it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 406.5036</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:22,  3.47it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 404.4717</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:16,  3.52it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 413.3260</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:46&lt;00:10,  3.61it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 404.8024</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:52&lt;00:05,  3.50it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 408.2683</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:58&lt;00:00,  3.45it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 375.5593</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-74-output-220.png" class="lightbox" data-gallery="quarto-lightbox-gallery-86"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-74-output-220.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  SOLM_M3pM3
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:57,  3.47it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1171.9761</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:52,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 311.1736</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:11&lt;00:46,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 213.8882</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:40,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 86.1118</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:35,  3.37it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 43.9884</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:34&lt;00:50,  1.95it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 33.4366</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:48&lt;00:21,  3.66it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 26.7442</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:54&lt;00:17,  3.45it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 25.1023</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:59&lt;00:12,  3.17it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 19.1235</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [01:05&lt;00:05,  3.38it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 16.5218</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [01:12&lt;00:00,  2.74it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 17.8878</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-74-output-244.png" class="lightbox" data-gallery="quarto-lightbox-gallery-87"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-74-output-244.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  CLDTOP_KM
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:58,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1209.7468</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:51,  3.46it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 418.6483</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:48,  3.31it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 411.9460</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:40,  3.44it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 416.4541</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:34,  3.48it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 410.3450</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:28,  3.49it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 404.6752</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:22,  3.50it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 411.7702</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:40&lt;00:17,  3.45it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 404.7753</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:46&lt;00:11,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 410.6092</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:52&lt;00:05,  3.49it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 406.9762</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:58&lt;00:00,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 364.9331</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-74-output-269.png" class="lightbox" data-gallery="quarto-lightbox-gallery-88"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-74-output-269.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  CAPE
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;01:05,  3.05it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1286.6324</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:50,  3.56it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 416.3279</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:11&lt;00:45,  3.46it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 412.8959</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:39,  3.53it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 432.9754</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:35,  3.37it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 423.2503</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:26,  3.68it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 407.6195</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:34&lt;00:22,  3.56it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 405.0848</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:40&lt;00:16,  3.55it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 418.5362</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:46&lt;00:11,  3.53it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 398.3066</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:51&lt;00:05,  3.50it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 399.7189</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:57&lt;00:00,  3.49it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 366.6939</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-74-output-293.png" class="lightbox" data-gallery="quarto-lightbox-gallery-89"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-74-output-293.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  PBL_WRF_M
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:57,  3.44it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1160.2099</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:52,  3.40it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 410.9463</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:11&lt;00:46,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 407.0937</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:18&lt;00:40,  3.42it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 406.6331</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:33,  3.57it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 405.4273</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:29&lt;00:27,  3.55it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 406.6442</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:35&lt;00:23,  3.32it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 405.2662</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:41&lt;00:17,  3.47it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 400.4130</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:46&lt;00:11,  3.43it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 403.3931</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:52&lt;00:05,  3.47it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 409.0273</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [00:57&lt;00:00,  3.45it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 364.0550</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-74-output-317.png" class="lightbox" data-gallery="quarto-lightbox-gallery-90"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-74-output-317.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>X Channel name :  PBL_YSU_M
Shapes:  (1324, 1, 80, 80) (332, 1, 80, 80) (1324, 1, 80, 80) (332, 1, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 1/200 [00:00&lt;00:54,  3.64it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/200] Loss: 1176.6661</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 21/200 [00:06&lt;00:49,  3.63it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/200] Loss: 410.8530</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 41/200 [00:12&lt;00:47,  3.35it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/200] Loss: 408.6113</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 61/200 [00:17&lt;00:40,  3.41it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/200] Loss: 400.7242</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 81/200 [00:23&lt;00:36,  3.23it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/200] Loss: 407.2048</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 101/200 [00:30&lt;00:30,  3.24it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [101/200] Loss: 407.0074</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 121/200 [00:36&lt;00:25,  3.12it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [121/200] Loss: 405.1491</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 141/200 [00:42&lt;00:18,  3.27it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [141/200] Loss: 428.9850</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 161/200 [00:48&lt;00:11,  3.32it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [161/200] Loss: 411.7955</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 181/200 [00:54&lt;00:05,  3.29it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [181/200] Loss: 412.6084</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 200/200 [01:00&lt;00:00,  3.29it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 375.2351</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-74-output-342.png" class="lightbox" data-gallery="quarto-lightbox-gallery-91"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-74-output-342.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-103" class="cell">
<div class="sourceCode cell-code" id="cb1521" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1521-1">test_loss_list_P_10_conv_auto_unet</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[393.97390192205256,
 384.9228349165483,
 366.9725619229403,
 397.5330338911577,
 16.76939444108443,
 16.99508944424716,
 8.165278738195246,
 370.9240167791193,
 375.55933172052556,
 17.88784339211204,
 364.93308327414775,
 366.69390869140625,
 364.0550065474077,
 375.23513239080256]</code></pre>
</div>
</div>
<div id="cell-104" class="cell">
<div class="sourceCode cell-code" id="cb1523" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1523-1">name_loss_pairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(target_var_96_list, test_loss_list_P_10_conv_auto_unet))</span>
<span id="cb1523-2"></span>
<span id="cb1523-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort based on loss values</span></span>
<span id="cb1523-4">sorted_name_loss_pairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(name_loss_pairs, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb1523-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pair <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sorted_name_loss_pairs:</span>
<span id="cb1523-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(pair)</span>
<span id="cb1523-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(sorted_name_loss_pairs)</span></span>
<span id="cb1523-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the lowest 3 names</span></span>
<span id="cb1523-9">lowest_3_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [pair[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pair <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sorted_name_loss_pairs[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]]</span>
<span id="cb1523-10"></span>
<span id="cb1523-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lowest 3 names:"</span>, lowest_3_names)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>('V10_MpS', 8.165278738195246)
('CLOUD_OD', 16.76939444108443)
('U10_MpS', 16.99508944424716)
('SOLM_M3pM3', 17.88784339211204)
('PBL_WRF_M', 364.0550065474077)
('CLDTOP_KM', 364.93308327414775)
('CAPE', 366.69390869140625)
('SNOWAGE_HR', 366.9725619229403)
('T2_K', 370.9240167791193)
('PBL_YSU_M', 375.23513239080256)
('SWSFC_WpM2', 375.55933172052556)
('SNOWEW_M', 384.9228349165483)
('TSURF_K', 393.97390192205256)
('PRATE_MMpH', 397.5330338911577)
Lowest 3 names: ['V10_MpS', 'CLOUD_OD', 'U10_MpS']</code></pre>
</div>
</div>
</section>
<section id="insights-2" class="level2">
<h2 class="anchored" data-anchor-id="insights-2">Insights</h2>
<div id="cell-106" class="cell">
<div class="sourceCode cell-code" id="cb1525" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1525-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adding values at corresponding indices</span></span>
<span id="cb1525-2">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x, y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(test_loss_list_P_10_conv_auto_unet, test_loss_list_P_25_conv_auto_unet)]</span>
<span id="cb1525-3"></span>
<span id="cb1525-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a DataFrame</span></span>
<span id="cb1525-5">data_frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Input channel'</span>: target_var_96_list, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P10'</span>: test_loss_list_P_10_conv_auto_unet, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P25'</span>: test_loss_list_P_25_conv_auto_unet, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P10+P25 avg'</span>: result}</span>
<span id="cb1525-6">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(data_frame)</span>
<span id="cb1525-7"></span>
<span id="cb1525-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sorting the DataFrame based on "List1 + List2"</span></span>
<span id="cb1525-9">df_sorted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.sort_values(by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P10+P25 avg'</span>)</span>
<span id="cb1525-10"></span>
<span id="cb1525-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Displaying the sorted DataFrame</span></span>
<span id="cb1525-12"></span>
<span id="cb1525-13">df_rounded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_sorted.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1525-14">df_rounded.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/rishabh.mondal/climax_alternative/Climax_2/results/test_loss_list_P_10_P25_conv_auto_unet.csv'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb1525-15"></span>
<span id="cb1525-16">df_rounded</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Input channel</th>
<th data-quarto-table-cell-role="th">P10</th>
<th data-quarto-table-cell-role="th">P25</th>
<th data-quarto-table-cell-role="th">P10+P25 avg</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>V10_MpS</td>
<td>8.2</td>
<td>3.5</td>
<td>5.8</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>U10_MpS</td>
<td>17.0</td>
<td>3.2</td>
<td>10.1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">9</td>
<td>SOLM_M3pM3</td>
<td>17.9</td>
<td>5.3</td>
<td>11.6</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4</td>
<td>CLOUD_OD</td>
<td>16.8</td>
<td>8.0</td>
<td>12.4</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>CLDTOP_KM</td>
<td>364.9</td>
<td>191.1</td>
<td>278.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">12</td>
<td>PBL_WRF_M</td>
<td>364.1</td>
<td>192.7</td>
<td>278.4</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">11</td>
<td>CAPE</td>
<td>366.7</td>
<td>191.7</td>
<td>279.2</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>T2_K</td>
<td>370.9</td>
<td>192.5</td>
<td>281.7</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>SNOWAGE_HR</td>
<td>367.0</td>
<td>198.3</td>
<td>282.6</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">8</td>
<td>SWSFC_WpM2</td>
<td>375.6</td>
<td>191.1</td>
<td>283.3</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">13</td>
<td>PBL_YSU_M</td>
<td>375.2</td>
<td>194.3</td>
<td>284.8</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>SNOWEW_M</td>
<td>384.9</td>
<td>191.9</td>
<td>288.4</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>TSURF_K</td>
<td>394.0</td>
<td>192.9</td>
<td>293.4</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>PRATE_MMpH</td>
<td>397.5</td>
<td>199.4</td>
<td>298.4</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="training-on-top-4-channel-and-predicting-on-all-channel-unet" class="level2">
<h2 class="anchored" data-anchor-id="training-on-top-4-channel-and-predicting-on-all-channel-unet">Training on top 4 channel and predicting on all channel UNET</h2>
<div id="cell-108" class="cell">
<div class="sourceCode cell-code" id="cb1526" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1526-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># target_var_96_list =['TSURF_K',</span></span>
<span id="cb1526-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#        'SNOWEW_M', 'SNOWAGE_HR', 'PRATE_MMpH', 'CLOUD_OD', 'U10_MpS',</span></span>
<span id="cb1526-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#        'V10_MpS', 'T2_K', 'SWSFC_WpM2', 'SOLM_M3pM3', 'CLDTOP_KM', 'CAPE',</span></span>
<span id="cb1526-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#        'PBL_WRF_M', 'PBL_YSU_M']  # ['U10_MpS', 'T2_K', 'V10_MpS']</span></span>
<span id="cb1526-5">target_var_96_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V10_MpS'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'U10_MpS'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SOLM_M3pM3'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CLOUD_OD'</span>]</span>
<span id="cb1526-6">target_var_120_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P25'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P10'</span>] </span>
<span id="cb1526-7">X,y  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_data(target_var_96_list, target_var_120_list)</span>
<span id="cb1526-8"></span>
<span id="cb1526-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb1526-10">X_train_all, X_test_all, y_train_all, y_test_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb1526-11">X_train_all.shape, X_test_all.shape, y_train_all.shape, y_test_all.shape</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>X shape  (1656, 4, 80, 80)
y shape (1656, 2, 80, 80)</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>((1324, 4, 80, 80), (332, 4, 80, 80), (1324, 2, 80, 80), (332, 2, 80, 80))</code></pre>
</div>
</div>
<div id="cell-109" class="cell">
<div class="sourceCode cell-code" id="cb1529" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1529-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(X_train_all.shape, X_test_all.shape, y_train_all.shape, y_test_all.shape)</span>
<span id="cb1529-2">train_custom_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomDataset(X_train_all, y_train_all)</span>
<span id="cb1529-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(train_custom_dataset))</span></span>
<span id="cb1529-4">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb1529-5">train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.DataLoader(train_custom_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1529-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(train_loader))</span></span>
<span id="cb1529-7"></span>
<span id="cb1529-8">test_custom_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomDataset(X_test_all, y_test_all)</span>
<span id="cb1529-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(test_custom_dataset))</span></span>
<span id="cb1529-10">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb1529-11">test_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.DataLoader(test_custom_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb1529-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(len(test_loader))</span></span>
<span id="cb1529-13"></span>
<span id="cb1529-14"></span>
<span id="cb1529-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#################### Training the model ####################</span></span>
<span id="cb1529-16">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Autoencoder_UNET(image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, num_input_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, num_output_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.GELU)</span>
<span id="cb1529-17">model.to(device) </span>
<span id="cb1529-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchinfo <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> summary</span>
<span id="cb1529-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(summary(model, input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1656</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)))</span>
<span id="cb1529-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the loss function and optimizer</span></span>
<span id="cb1529-21">criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MSELoss()</span>
<span id="cb1529-22">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb1529-23">losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [] </span>
<span id="cb1529-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training loop</span></span>
<span id="cb1529-25">num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb1529-26"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> trange(num_epochs):</span>
<span id="cb1529-27">    model.train()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to training mode</span></span>
<span id="cb1529-28">    total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb1529-29">    </span>
<span id="cb1529-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> inputs, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> train_loader:</span>
<span id="cb1529-31">        optimizer.zero_grad()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zero the gradients</span></span>
<span id="cb1529-32">        inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device)</span>
<span id="cb1529-33">        targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets.to(device)</span>
<span id="cb1529-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb1529-35">        outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb1529-36">        </span>
<span id="cb1529-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the loss</span></span>
<span id="cb1529-38">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, targets)</span>
<span id="cb1529-39">        </span>
<span id="cb1529-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backpropagation</span></span>
<span id="cb1529-41">        loss.backward()</span>
<span id="cb1529-42">        optimizer.step()</span>
<span id="cb1529-43">        </span>
<span id="cb1529-44">        total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb1529-45"></span>
<span id="cb1529-46">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the average loss for this epoch</span></span>
<span id="cb1529-47">    average_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_loader)</span>
<span id="cb1529-48">    losses.append(average_loss)</span>
<span id="cb1529-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: </span>
<span id="cb1529-50">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Epoch [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_epochs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>average_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1529-51"></span>
<span id="cb1529-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">############################# testing the model #############################</span></span>
<span id="cb1529-53">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to evaluation mode</span></span>
<span id="cb1529-54">test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb1529-55"></span>
<span id="cb1529-56"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb1529-57">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> inputs, targets <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_loader:</span>
<span id="cb1529-58">        inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.to(device)</span>
<span id="cb1529-59">        targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets.to(device)</span>
<span id="cb1529-60"></span>
<span id="cb1529-61">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb1529-62">        outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs)</span>
<span id="cb1529-63"></span>
<span id="cb1529-64">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the loss</span></span>
<span id="cb1529-65">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(outputs, targets)</span>
<span id="cb1529-66"></span>
<span id="cb1529-67">        test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb1529-68"></span>
<span id="cb1529-69"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the average test loss</span></span>
<span id="cb1529-70">average_test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_loader)</span>
<span id="cb1529-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test_loss_list_P_25.append(average_test_loss)</span></span>
<span id="cb1529-72"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Average Test Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>average_test_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1529-73"></span>
<span id="cb1529-74">plt.plot(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), losses)</span>
<span id="cb1529-75">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Epoch'</span>)</span>
<span id="cb1529-76">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss'</span>)</span>
<span id="cb1529-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.title('Train Loss vs. Epoch for channel '+target_var_96_list[x_channel])</span></span>
<span id="cb1529-78">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb1529-79">plt.show() </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(1324, 4, 80, 80) (332, 4, 80, 80) (1324, 2, 80, 80) (332, 2, 80, 80)
==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
Autoencoder_UNET                         [1656, 2, 80, 80]         --
├─Encoder: 1-1                           --                        --
│    └─Sequential: 2-1                   --                        --
│    │    └─Conv2d: 3-1                  [1656, 64, 40, 40]        2,368
│    │    └─GELU: 3-2                    [1656, 64, 40, 40]        --
│    │    └─Conv2d: 3-3                  [1656, 64, 40, 40]        36,928
│    │    └─GELU: 3-4                    [1656, 64, 40, 40]        --
│    │    └─Conv2d: 3-5                  [1656, 128, 20, 20]       73,856
│    │    └─GELU: 3-6                    [1656, 128, 20, 20]       --
│    │    └─Conv2d: 3-7                  [1656, 128, 20, 20]       147,584
│    │    └─GELU: 3-8                    [1656, 128, 20, 20]       --
│    │    └─Conv2d: 3-9                  [1656, 256, 10, 10]       295,168
│    │    └─GELU: 3-10                   [1656, 256, 10, 10]       --
│    │    └─Flatten: 3-11                [1656, 25600]             --
│    │    └─Linear: 3-12                 [1656, 2048]              52,430,848
├─Decoder: 1-2                           --                        --
│    └─Sequential: 2-2                   --                        --
│    │    └─Linear: 3-13                 [1656, 25600]             52,454,400
│    │    └─Unflatten: 3-14              [1656, 256, 10, 10]       --
│    │    └─ConvTranspose2d: 3-15        [1656, 128, 20, 20]       295,040
│    │    └─GELU: 3-16                   [1656, 128, 20, 20]       --
│    │    └─Conv2d: 3-17                 [1656, 128, 20, 20]       147,584
│    │    └─GELU: 3-18                   [1656, 128, 20, 20]       --
│    │    └─ConvTranspose2d: 3-19        [1656, 64, 40, 40]        73,792
│    │    └─GELU: 3-20                   [1656, 64, 40, 40]        --
│    │    └─Conv2d: 3-21                 [1656, 64, 40, 40]        36,928
│    │    └─GELU: 3-22                   [1656, 64, 40, 40]        --
│    │    └─ConvTranspose2d: 3-23        [1656, 2, 80, 80]         1,154
==========================================================================================
Total params: 105,995,650
Trainable params: 105,995,650
Non-trainable params: 0
Total mult-adds (Units.TERABYTES): 1.07
==========================================================================================
Input size (MB): 169.57
Forward/backward pass size (MB): 9014.58
Params size (MB): 423.98
Estimated Total Size (MB): 9608.13
==========================================================================================</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  1%|          | 1/100 [00:01&lt;03:17,  1.99s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [1/100] Loss: 519.4141</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 21%|██        | 21/100 [00:36&lt;02:15,  1.72s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [21/100] Loss: 10.5276</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 41%|████      | 41/100 [01:10&lt;01:41,  1.72s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [41/100] Loss: 2.6655</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 61%|██████    | 61/100 [01:44&lt;01:06,  1.72s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [61/100] Loss: 5.3309</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 81%|████████  | 81/100 [02:19&lt;00:32,  1.72s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch [81/100] Loss: 2.3606</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 100/100 [02:52&lt;00:00,  1.72s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Average Test Loss: 0.9041</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Autoencoder_files/figure-html/cell-79-output-14.png" class="lightbox" data-gallery="quarto-lightbox-gallery-92"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder_files/figure-html/cell-79-output-14.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-110" class="cell">
<div class="sourceCode cell-code" id="cb1543" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1543-1">torch.save(model.state_dict(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model/auto_conv_unet_in4_out2.pt'</span>)</span>
<span id="cb1543-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Autoencoder_UNET(image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, num_input_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, num_output_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, c_hid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.GELU)</span>
<span id="cb1543-3">model.to(device) </span>
<span id="cb1543-4">model.load_state_dict(torch.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model/auto_conv_unet_in4_out2.pt'</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;All keys matched successfully&gt;</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>Deep Learning</category>
  <guid>https://jaiswalsuraj487.github.io/publications_and_projects/data/Autoencoder.html</guid>
  <pubDate>Fri, 17 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Hypernet and Neural Processes on CelebA</title>
  <dc:creator>Suraj Jaiswal</dc:creator>
  <link>https://jaiswalsuraj487.github.io/publications_and_projects/data/Hypernet_neural_process.html</link>
  <description><![CDATA[ 




<p>Our goal is constructing the whole image from its few context points.</p>
<p><strong>Motivation</strong>: Why are we doing this? Say, for example, you have less bandwidth, but you want to send an image to your friend. What you can do is to compress the image to few context points using NN model and give this compressed image and the model to your friend. Your friend can use this model and these few context points of the original image to reconstruct the whole image. We can also use this for image inpainting, super-resolution, etc.</p>
<p>Simple ways can be as follows, but we have some issues with these approaches: - For this, if we learn a single neural network for all images, then this will be a general model, but at testing time, we don’t have the whole image, so we won’t be able to use the same model. - And if we learn a neural network for each image, then this will be a task-specific model, but at testing time, we don’t know which image model to pick for a new image.</p>
<p>So, we use a Meta learning setup using hypernet and neural processes to learn a task-specific neural network that predicts the whole image given a few context points of an image.</p>
<p><strong>Why meta?</strong> Because we are learning a model that learns the parameters of another model.</p>
<p>We use our version of the following to reproduce Figure 4 from the paper referenced at <a href="https://proceedings.mlr.press/v80/garnelo18a/garnelo18a.pdf">link</a> conditional neural network paper. - Hypernet - Neural Processes</p>
<p><img src="https://jaiswalsuraj487.github.io/publications_and_projects/images/hypernet_neural_process/hypernet_neural.png" width="700"></p>
<p><a href="https://colab.research.google.com/github/jaiswalsuraj487/Climax_project_autoencoder/blob/main/Hypernet_neural_process_cifar.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"></a></p>
<div id="cell-4" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.optim <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> optim</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> preprocessing</span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> trange</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb1-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tabulate <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tabulate</span></code></pre></div>
</div>
<div id="cell-5" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># select gpu</span></span>
<span id="cb2-2">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda:3"</span>)</span>
<span id="cb2-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(device)</span>
<span id="cb2-4">current_device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> device <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#torch.cuda.current_device()</span></span>
<span id="cb2-5">device_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cuda.get_device_name(current_device)</span>
<span id="cb2-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Current GPU assigned: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>current_device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>cuda:3
Current GPU assigned: cuda:3, Name: NVIDIA A100-SXM4-80GB</code></pre>
</div>
</div>
<section id="loading-and-preprocessing" class="level1">
<h1>Loading and preprocessing</h1>
<ul>
<li><p>You can download CelebA data from <a href="https://mmlab.ie.cuhk.edu.hk/projects/CelebA.html">link</a>. We only need images for our task. Extract these images in the same folder as this notebook.</p></li>
<li><p>There are 2,02,599 images in total in CelebA dataset. We will use only 10,000 images for training and 2599 for test dataset. For better results, you can use full dataset.</p></li>
</ul>
<div id="cell-7" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> CustomImageDataset(Dataset):</span>
<span id="cb4-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data_root, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb4-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data_root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data_root</span>
<span id="cb4-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transform</span>
<span id="cb4-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [f <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> os.listdir(data_root) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> f.endswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.jpg'</span>)]</span>
<span id="cb4-6"></span>
<span id="cb4-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_files)</span>
<span id="cb4-9"></span>
<span id="cb4-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, idx):</span>
<span id="cb4-11">        img_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data_root, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_files[idx])</span>
<span id="cb4-12">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_name)</span>
<span id="cb4-13"></span>
<span id="cb4-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.transform:</span>
<span id="cb4-15">            image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.transform(image)</span>
<span id="cb4-16"></span>
<span id="cb4-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> image</span></code></pre></div>
</div>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># keep this to 1</span></span>
<span id="cb5-2">img_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Change as needed</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify the root directory where the dataset is located</span></span>
<span id="cb5-5">data_root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/celeba/img_align_celeba_10000'</span></span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the data transformations</span></span>
<span id="cb5-8">transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb5-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># transforms.Resize((img_size, img_size)),  # Resize the images to a common size (adjust as needed)</span></span>
<span id="cb5-10">    transforms.ToTensor(),   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert images to tensors</span></span>
<span id="cb5-11">])</span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># default shape is torch.Size([3, 218, 178])</span></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the custom dataset</span></span>
<span id="cb5-14">celeba_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomImageDataset(data_root, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transform)</span>
<span id="cb5-15"></span>
<span id="cb5-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a data loader</span></span>
<span id="cb5-17">data_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(celeba_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
<p>Original image</p>
<div id="cell-10" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">plt.imshow(torch.einsum(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chw -&gt; hwc'</span>, data_loader.dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">33</span>]))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f800aac09d0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Hypernet_neural_process_files/figure-html/cell-6-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Hypernet_neural_process_files/figure-html/cell-6-output-2.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-11" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the data transformations</span></span>
<span id="cb8-2">transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb8-3">    transforms.Resize((img_size, img_size)),  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the images to a common size (adjust as needed)</span></span>
<span id="cb8-4">    transforms.ToTensor(),   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert images to tensors</span></span>
<span id="cb8-5">])</span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># default shape is torch.Size([3, 218, 178])</span></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the custom dataset</span></span>
<span id="cb8-8">celeba_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomImageDataset(data_root, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transform)</span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a data loader</span></span>
<span id="cb8-11">data_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(celeba_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
<p>Original image after transformation (applying resize to 32x32 to reduce computational cost)</p>
<div id="cell-13" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">plt.imshow(torch.einsum(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chw -&gt; hwc'</span>, data_loader.dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">33</span>]))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7ff83c94fdf0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Hypernet_neural_process_files/figure-html/cell-8-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Hypernet_neural_process_files/figure-html/cell-8-output-2.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>Create a coordinate dataset from the image</p>
<div id="cell-15" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> create_coordinate_map(img):</span>
<span id="cb11-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    img: torch.Tensor of shape (num_channels, height, width)</span></span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    return: tuple of torch.Tensor of shape (height* width, 2) and torch.tensor containing the (num_channels)</span></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb11-7">    num_channels, height, width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img.shape</span>
<span id="cb11-8"></span>
<span id="cb11-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a 2D grid of (x,y) coordinates</span></span>
<span id="cb11-10">    x_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(width).repeat(height, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-11">    y_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(height).repeat(width, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).t()</span>
<span id="cb11-12">    x_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_coords.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-13">    y_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_coords.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-14"></span>
<span id="cb11-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine the x and y coordinates into a single tensor</span></span>
<span id="cb11-16">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack([x_coords, y_coords], dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb11-17"></span>
<span id="cb11-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move X to GPU if available</span></span>
<span id="cb11-19">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.to(device)</span>
<span id="cb11-20"></span>
<span id="cb11-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a tensor containing the image pixel values</span></span>
<span id="cb11-22">    Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_channels).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>().to(device)</span>
<span id="cb11-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> X, Y</span></code></pre></div>
</div>
<p><img src="https://jaiswalsuraj487.github.io/publications_and_projects/images/hypernet_neural_process/input_network.png" width="300"></p>
<p>Below is our Loss function. It is negative log likelihood loss. We will use this to train our model. This takes: - y_pred which is the mean of the predicted distribution and y_true which is the actual value for RGB channels. - log_sigma which is the log of standard deviation of the predicted distribution for each RGB channel. - y_true which is the actual value for RGB channels.</p>
<p>We convert list of sigma into identity covariance matrix and then calculate the log probability of the actual value given the predicted distribution with mean list y_pred for each RGB channel and covariance matrix of log_sigma.</p>
<div id="cell-18" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> neg_loglikelyhood(y_pred,log_sigma,y_true):</span>
<span id="cb12-2">    cov_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.diag_embed(log_sigma.exp())</span>
<span id="cb12-3">    dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.distributions.MultivariateNormal(y_pred,cov_matrix,validate_args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb12-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dist.log_prob(y_true).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
</div>
<p>To count the parameter in any model, you can use following code:</p>
<div id="cell-20" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> count_params(model):</span>
<span id="cb13-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return torch.sum(p.numel() for p in model.parameters() if p.requires_grad)</span></span>
<span id="cb13-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(torch.tensor([p.numel() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> model.parameters()]))</span></code></pre></div>
</div>
</section>
<section id="hyper-network" class="level1">
<h1>Hyper Network</h1>
<p>Training phase architecture</p>
<p><img src="https://jaiswalsuraj487.github.io/publications_and_projects/images/hypernet_neural_process/hypernet_archi_train.png" width="600"></p>
<section id="model-defination" class="level2">
<h2 class="anchored" data-anchor-id="model-defination">Model defination</h2>
<section id="target-net-defination" class="level3">
<h3 class="anchored" data-anchor-id="target-net-defination">Target net defination</h3>
<div id="cell-25" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a MLP with 5 hidden layers with 256 neurons each and ReLU activations.</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input is (x, y) and output is (r, g, b) or (g) for grayscale</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># here we output 6 values (3 for RGB mean and 3 for RGB std)</span></span>
<span id="cb14-4">s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hidden dim of model</span></span>
<span id="cb14-5"></span>
<span id="cb14-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> TargetNet(nn.Module):</span>
<span id="cb14-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _init_siren(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, activation_scale):</span>
<span id="cb14-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc1.weight.data.uniform_(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc1.in_features, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc1.in_features)</span>
<span id="cb14-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> layers <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc2, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc3, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc4, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc5]:</span>
<span id="cb14-10">            layers.weight.data.uniform_(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc2.in_features)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>activation_scale,</span>
<span id="cb14-11">                                        np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc2.in_features)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>activation_scale)</span>
<span id="cb14-12"></span>
<span id="cb14-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.relu, n_out<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, activation_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>):</span>
<span id="cb14-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb14-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation</span>
<span id="cb14-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation_scale</span>
<span id="cb14-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, s) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># input size is 2 (x, y) location of pixel</span></span>
<span id="cb14-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(s, s)</span>
<span id="cb14-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(s, s)</span>
<span id="cb14-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(s, s)</span>
<span id="cb14-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(s, n_out) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#gray scale image (1) or RGB (3)</span></span>
<span id="cb14-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> torch.sin:</span>
<span id="cb14-23">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># init weights and biases for sine activation</span></span>
<span id="cb14-24">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._init_siren(activation_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation_scale)</span>
<span id="cb14-25"></span>
<span id="cb14-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb14-27">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc1(x))</span>
<span id="cb14-28">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc2(x))</span>
<span id="cb14-29">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc3(x))</span>
<span id="cb14-30">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc4(x))</span>
<span id="cb14-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc5(x)</span></code></pre></div>
</div>
</section>
<section id="hypernetwork-defination" class="level3">
<h3 class="anchored" data-anchor-id="hypernetwork-defination">Hypernetwork defination</h3>
<p>Input: (x, y, R, G, B)</p>
<p>Output: Our Hypernetwork should have the output equal to the number of parameters in the main network.</p>
<div id="cell-27" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pass total params of target network before calling the hypernetwork model</span></span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> HyperNet(nn.Module):</span>
<span id="cb15-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, total_params, num_neurons<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.relu):</span>
<span id="cb15-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb15-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation</span>
<span id="cb15-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_params</span>
<span id="cb15-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, num_neurons)</span>
<span id="cb15-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(num_neurons, num_neurons)</span>
<span id="cb15-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(num_neurons, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_out)</span>
<span id="cb15-10"></span>
<span id="cb15-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb15-12">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc1(x))</span>
<span id="cb15-13">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc2(x))</span>
<span id="cb15-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc3(x)</span></code></pre></div>
</div>
</section>
</section>
<section id="initialize-the-model-and-input" class="level2">
<h2 class="anchored" data-anchor-id="initialize-the-model-and-input">Initialize the model and input</h2>
<section id="initialize-the-target-network" class="level3">
<h3 class="anchored" data-anchor-id="initialize-the-target-network">Initialize the target network</h3>
<div id="cell-30" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchinfo <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> summary</span>
<span id="cb16-2">targetnet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TargetNet(activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.relu, n_out<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, activation_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).to(device)</span>
<span id="cb16-3">summary(targetnet, input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(img_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> img_size, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#32*32 =1024 is the image size lentgh, 2 is x,y coordinate</span></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># outputs 6: 1,2,3 mean of each channel and 4,5,6 are log sigma of each channel</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
TargetNet                                [1024, 6]                 --
├─Linear: 1-1                            [1024, 128]               384
├─Linear: 1-2                            [1024, 128]               16,512
├─Linear: 1-3                            [1024, 128]               16,512
├─Linear: 1-4                            [1024, 128]               16,512
├─Linear: 1-5                            [1024, 6]                 774
==========================================================================================
Total params: 50,694
Trainable params: 50,694
Non-trainable params: 0
Total mult-adds (M): 51.91
==========================================================================================
Input size (MB): 0.01
Forward/backward pass size (MB): 4.24
Params size (MB): 0.20
Estimated Total Size (MB): 4.45
==========================================================================================</code></pre>
</div>
</div>
<div id="cell-31" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">targetnet</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>TargetNet(
  (fc1): Linear(in_features=2, out_features=128, bias=True)
  (fc2): Linear(in_features=128, out_features=128, bias=True)
  (fc3): Linear(in_features=128, out_features=128, bias=True)
  (fc4): Linear(in_features=128, out_features=128, bias=True)
  (fc5): Linear(in_features=128, out_features=6, bias=True)
)</code></pre>
</div>
</div>
<div id="cell-32" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">count_params(targetnet)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor(50694)</code></pre>
</div>
</div>
</section>
<section id="initialize-the-hypernetwork-model" class="level3">
<h3 class="anchored" data-anchor-id="initialize-the-hypernetwork-model">initialize the hypernetwork model</h3>
<div id="cell-34" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">hypernet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HyperNet(total_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>count_params(targetnet), activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.sin).to(device)</span>
<span id="cb22-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(hypernet)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>HyperNet(
  (fc1): Linear(in_features=5, out_features=128, bias=True)
  (fc2): Linear(in_features=128, out_features=128, bias=True)
  (fc3): Linear(in_features=128, out_features=50694, bias=True)
)</code></pre>
</div>
</div>
<div id="cell-35" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">summary(hypernet,input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(img_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> img_size,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 32*32 = 1024 is the image size length, 5 is the input(x,y,r,g,b) to hypernet</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
HyperNet                                 [1024, 50694]             --
├─Linear: 1-1                            [1024, 128]               768
├─Linear: 1-2                            [1024, 128]               16,512
├─Linear: 1-3                            [1024, 50694]             6,539,526
==========================================================================================
Total params: 6,556,806
Trainable params: 6,556,806
Non-trainable params: 0
Total mult-adds (G): 6.71
==========================================================================================
Input size (MB): 0.02
Forward/backward pass size (MB): 417.38
Params size (MB): 26.23
Estimated Total Size (MB): 443.63
==========================================================================================</code></pre>
</div>
</div>
<div id="cell-36" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">table_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb26-2">total_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb26-3">start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb26-4">start_end_mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb26-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> name, param <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> targetnet.named_parameters():</span>
<span id="cb26-6">    param_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.prod(torch.tensor(param.shape)).item()</span>
<span id="cb26-7">    total_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> param_count</span>
<span id="cb26-8">    end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_params</span>
<span id="cb26-9">    table_data.append([name, param.shape, param_count, start, end])</span>
<span id="cb26-10">    start_end_mapping[name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (start, end)</span>
<span id="cb26-11">    start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> end</span>
<span id="cb26-12"></span>
<span id="cb26-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tabulate(table_data, headers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Layer Name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Shape"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Parameter Count"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Start Index"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"End Index"</span>]))</span>
<span id="cb26-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Total number of parameters: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>total_params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Layer Name    Shape                     Parameter Count    Start Index    End Index
------------  ----------------------  -----------------  -------------  -----------
fc1.weight    torch.Size([128, 2])                  256              0          256
fc1.bias      torch.Size([128])                     128            256          384
fc2.weight    torch.Size([128, 128])              16384            384        16768
fc2.bias      torch.Size([128])                     128          16768        16896
fc3.weight    torch.Size([128, 128])              16384          16896        33280
fc3.bias      torch.Size([128])                     128          33280        33408
fc4.weight    torch.Size([128, 128])              16384          33408        49792
fc4.bias      torch.Size([128])                     128          49792        49920
fc5.weight    torch.Size([6, 128])                  768          49920        50688
fc5.bias      torch.Size([6])                         6          50688        50694
Total number of parameters: 50694</code></pre>
</div>
</div>
</section>
<section id="initialize-the-input" class="level3">
<h3 class="anchored" data-anchor-id="initialize-the-input">Initialize the input</h3>
<div id="cell-38" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">corr, vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_coordinate_map(data_loader.dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb28-2">corr, vals</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(tensor([[ 0.,  0.],
         [ 1.,  0.],
         [ 2.,  0.],
         ...,
         [29., 31.],
         [30., 31.],
         [31., 31.]], device='cuda:3'),
 tensor([[0.4510, 0.4706, 0.4824],
         [0.4745, 0.4745, 0.4471],
         [0.4667, 0.4353, 0.5412],
         ...,
         [0.0314, 0.0549, 0.0471],
         [0.0431, 0.0392, 0.0510],
         [0.0549, 0.0392, 0.0549]], device='cuda:3'))</code></pre>
</div>
</div>
<div id="cell-39" class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">scaler_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preprocessing.MinMaxScaler().fit(corr.cpu())</span>
<span id="cb30-2">xy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(scaler_img.transform(corr.cpu())).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>().to(device)</span>
<span id="cb30-3">xy, xy.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(tensor([[0.0000, 0.0000],
         [0.0323, 0.0000],
         [0.0645, 0.0000],
         ...,
         [0.9355, 1.0000],
         [0.9677, 1.0000],
         [1.0000, 1.0000]], device='cuda:3'),
 torch.Size([1024, 2]))</code></pre>
</div>
</div>
</section>
</section>
<section id="training-loop" class="level2">
<h2 class="anchored" data-anchor-id="training-loop">Training loop</h2>
<div id="cell-41" class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">n_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb32-2">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.003</span></span>
<span id="cb32-3"></span>
<span id="cb32-4">targetnet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TargetNet(activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.relu, n_out<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, activation_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).to(device)</span>
<span id="cb32-5">hypernet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HyperNet(total_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>count_params(targetnet), activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.relu).to(device)</span>
<span id="cb32-6">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optim.Adam(hypernet.parameters(),lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only hypernet is updated</span></span>
<span id="cb32-7"></span>
<span id="cb32-8">n_context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb32-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Context Points="</span>,n_context)</span>
<span id="cb32-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> trange(n_epochs):</span>
<span id="cb32-11"></span>
<span id="cb32-12">    c_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(random.sample(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1023</span>),n_context))</span>
<span id="cb32-13"></span>
<span id="cb32-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Epoch="</span>,epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb32-15">    epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb32-16">    i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb32-17"></span>
<span id="cb32-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> data <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data_loader:</span>
<span id="cb32-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(data.shape)</span></span>
<span id="cb32-20">        optimizer.zero_grad()</span>
<span id="cb32-21"></span>
<span id="cb32-22">        pixel_intensity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).T.to(device).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb32-23">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.concatenate([xy[c_idx],pixel_intensity[c_idx]],axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb32-24"></span>
<span id="cb32-25">        hyper_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hypernet(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>)</span>
<span id="cb32-26">        hyper_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.mean(hyper_out,dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb32-27"></span>
<span id="cb32-28">        target_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{}</span>
<span id="cb32-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> name,param <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> targetnet.named_parameters():</span>
<span id="cb32-30">            start,end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start_end_mapping[name]</span>
<span id="cb32-31">            target_dict[name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hyper_out[start:end].reshape(param.shape)</span>
<span id="cb32-32"></span>
<span id="cb32-33">        img_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.func.functional_call(targetnet, target_dict, xy)</span>
<span id="cb32-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(img_out.shape, img_out[:,:3].shape, img_out[:,3:].shape, pixel_intensity.shape)</span></span>
<span id="cb32-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print( img_out[:,:3], img_out[:,3:], pixel_intensity)</span></span>
<span id="cb32-36">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> neg_loglikelyhood(img_out[:,:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],img_out[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:],pixel_intensity)</span>
<span id="cb32-37">        loss.backward()</span>
<span id="cb32-38">        optimizer.step()</span>
<span id="cb32-39"></span>
<span id="cb32-40">        epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> loss.item()</span>
<span id="cb32-41">        i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb32-42"></span>
<span id="cb32-43">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Epoch Loss="</span>,epoch_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_loader))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Context Points= 100</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 0/20 [00:00&lt;?, ?it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch= 1</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  5%|▌         | 1/20 [01:05&lt;20:42, 65.40s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -395.47315481672285
Epoch= 2</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 2/20 [02:10&lt;19:37, 65.41s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -915.5049703121185
Epoch= 3</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 15%|█▌        | 3/20 [03:15&lt;18:29, 65.26s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1166.0503022047044
Epoch= 4</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 4/20 [04:21&lt;17:24, 65.28s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1349.56748127985
Epoch= 5</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 25%|██▌       | 5/20 [05:26&lt;16:19, 65.30s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1396.8538594449997
Epoch= 6</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 6/20 [06:31&lt;15:14, 65.31s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1479.6613237543106
Epoch= 7</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 35%|███▌      | 7/20 [07:37&lt;14:09, 65.36s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1449.8615832103728
Epoch= 8</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 8/20 [08:42&lt;13:04, 65.38s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1528.4998937654495
Epoch= 9</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 45%|████▌     | 9/20 [09:47&lt;11:58, 65.31s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1538.7266953744888
Epoch= 10</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 10/20 [10:53&lt;10:53, 65.36s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1574.4109719749451
Epoch= 11</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 55%|█████▌    | 11/20 [11:58&lt;09:48, 65.35s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1558.2231241334914
Epoch= 12</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 12/20 [13:03&lt;08:42, 65.32s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1585.886608516693
Epoch= 13</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 65%|██████▌   | 13/20 [14:09&lt;07:36, 65.27s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1586.6056880670546
Epoch= 14</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 14/20 [15:14&lt;06:31, 65.23s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1561.2374246302604
Epoch= 15</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 75%|███████▌  | 15/20 [16:19&lt;05:25, 65.20s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1606.3488553873062
Epoch= 16</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 16/20 [17:24&lt;04:20, 65.24s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1637.4123486403466
Epoch= 17</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 85%|████████▌ | 17/20 [18:30&lt;03:15, 65.29s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1656.406247360611
Epoch= 18</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 18/20 [19:33&lt;02:09, 64.69s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1621.5405502536773
Epoch= 19</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 95%|█████████▌| 19/20 [20:38&lt;01:04, 64.88s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1708.3212175039291
Epoch= 20</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 20/20 [21:44&lt;00:00, 65.21s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1700.857941632271</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
</div>
<section id="saving-and-loading-the-model" class="level3">
<h3 class="anchored" data-anchor-id="saving-and-loading-the-model">saving and loading the model</h3>
<div id="cell-43" class="cell">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1">torch.save(hypernet.state_dict(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hypernet_model_10000.pth'</span>)</span>
<span id="cb77-2">torch.save(targetnet.state_dict(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'targetnet_model_10000.pth'</span>)</span></code></pre></div>
</div>
<div id="cell-44" class="cell">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the hypernet and targetnet models</span></span>
<span id="cb78-2">hypernet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HyperNet(total_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>count_params(targetnet), activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.relu).to(device)</span>
<span id="cb78-3">hypernet.load_state_dict(torch.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hypernet_model_10000.pth'</span>))</span>
<span id="cb78-4">hypernet.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to evaluation mode</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>HyperNet(
  (fc1): Linear(in_features=5, out_features=128, bias=True)
  (fc2): Linear(in_features=128, out_features=128, bias=True)
  (fc3): Linear(in_features=128, out_features=50694, bias=True)
)</code></pre>
</div>
</div>
<div id="cell-45" class="cell">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1">targetnet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TargetNet(activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.relu, n_out<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, activation_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).to(device)</span>
<span id="cb80-2">targetnet.load_state_dict(torch.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'targetnet_model_10000.pth'</span>))</span>
<span id="cb80-3">targetnet.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>TargetNet(
  (fc1): Linear(in_features=2, out_features=128, bias=True)
  (fc2): Linear(in_features=128, out_features=128, bias=True)
  (fc3): Linear(in_features=128, out_features=128, bias=True)
  (fc4): Linear(in_features=128, out_features=128, bias=True)
  (fc5): Linear(in_features=128, out_features=6, bias=True)
)</code></pre>
</div>
</div>
</section>
</section>
<section id="testing" class="level2">
<h2 class="anchored" data-anchor-id="testing">Testing</h2>
<p>Testing phase architecture</p>
<p><img src="https://jaiswalsuraj487.github.io/publications_and_projects/images/hypernet_neural_process/hypernet_archi_test_.png" width="600"></p>
<p>loading the test data</p>
<div id="cell-49" class="cell">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># keep this to 1</span></span>
<span id="cb82-2">img_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Change as needed</span></span>
<span id="cb82-3"></span>
<span id="cb82-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify the root directory where the dataset is located</span></span>
<span id="cb82-5">data_root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/jaiswalsuraj/suraj_work/projects/data/celeba/img_align_celeba_2599'</span></span>
<span id="cb82-6"></span>
<span id="cb82-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the data transformations</span></span>
<span id="cb82-8">transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb82-9">    transforms.Resize((img_size, img_size)),  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the images to a common size (adjust as needed)</span></span>
<span id="cb82-10">    transforms.ToTensor(),   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert images to tensors</span></span>
<span id="cb82-11">])</span>
<span id="cb82-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># default shape is torch.Size([3, 218, 178])</span></span>
<span id="cb82-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the custom dataset</span></span>
<span id="cb82-14">celeba_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomImageDataset(data_root, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transform)</span>
<span id="cb82-15"></span>
<span id="cb82-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a data loader</span></span>
<span id="cb82-17">test_data_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(celeba_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
<section id="plotting-the-results" class="level3">
<h3 class="anchored" data-anchor-id="plotting-the-results">Plotting the results</h3>
<div id="cell-51" class="cell">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_hypernet(data,hypernet,targetnet,c_idx):</span>
<span id="cb83-2"></span>
<span id="cb83-3">    pixel_intensity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).T.to(device).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb83-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.concatenate([xy[c_idx],pixel_intensity[c_idx]],axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb83-5"></span>
<span id="cb83-6">    hyper_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hypernet(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hyper_out is a tensor of shape (n_context, total_params)</span></span>
<span id="cb83-7">    hyper_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.mean(hyper_out,dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># aggregate across context points</span></span>
<span id="cb83-8"></span>
<span id="cb83-9">    target_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{}</span>
<span id="cb83-10">    start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb83-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> name,param <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> targetnet.named_parameters():</span>
<span id="cb83-12">        end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> param.numel()</span>
<span id="cb83-13">        target_dict[name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hyper_out[start:end].reshape(param.shape)</span>
<span id="cb83-14">        start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> end</span>
<span id="cb83-15"></span>
<span id="cb83-16">    img_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.func.functional_call(targetnet, target_dict, xy)</span>
<span id="cb83-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> img_out.cpu().detach()</span></code></pre></div>
</div>
<div id="cell-52" class="cell">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1">c_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(random.sample(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(img_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>img_size),<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb84-2">c_10 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(random.sample(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(img_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>img_size),<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb84-3">c_100 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(random.sample(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(img_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>img_size),<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb84-4">c_1000 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(random.sample(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(img_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>img_size),<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>))</span>
<span id="cb84-5"></span>
<span id="cb84-6">image_any <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_data_loader.dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb84-7">idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb84-8">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_any</span></code></pre></div>
</div>
<div id="cell-53" class="cell">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb85-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>),constrained_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb85-2">plt.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HyperNetworks"</span>,fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb85-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_image(i,j,k, data,hypernet,targetnet, c_idx):</span>
<span id="cb85-4">    plt.subplot(i,j,k)</span>
<span id="cb85-5">    img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb85-6">    mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb85-7">    mask[c_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,c_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb85-8">    plt.imshow(img<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>mask)</span>
<span id="cb85-9">    plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Context: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(c_idx)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb85-10">    plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb85-11"></span>
<span id="cb85-12">    plt.subplot(i,j,k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb85-13">    plot_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_hypernet(data,hypernet,targetnet,c_idx)</span>
<span id="cb85-14">    plt.imshow(plot_image[:,:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>].T.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>).permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb85-15">    plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb85-16"></span>
<span id="cb85-17">    plt.subplot(i,j,k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb85-18">    var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plot_image[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:].exp().T.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>).permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb85-19">    var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> var<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>var.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()</span>
<span id="cb85-20">    var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> var<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>var.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb85-21">    plt.imshow(var)</span>
<span id="cb85-22">    plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;Figure size 900x700 with 0 Axes&gt;</code></pre>
</div>
</div>
<div id="cell-54" class="cell">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1">plot_image(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,data,hypernet,targetnet,c_1)</span>
<span id="cb87-2">plot_image(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,data,hypernet,targetnet,c_10)</span>
<span id="cb87-3">plot_image(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,data,hypernet,targetnet,c_100)</span>
<span id="cb87-4">plot_image(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,data,hypernet,targetnet,c_1000)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
/home/jaiswalsuraj/miniconda3/envs/tf_gpu/lib/python3.10/site-packages/matplotlib/cm.py:478: RuntimeWarning: invalid value encountered in cast
  xx = (xx * 255).astype(np.uint8)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Hypernet_neural_process_files/figure-html/cell-30-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Hypernet_neural_process_files/figure-html/cell-30-output-2.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>The first row shows the test context points, second row shows our model prediction and third row shows the variance of the predicted image.</p>
</section>
</section>
</section>
<section id="neural-processes" class="level1">
<h1>Neural Processes</h1>
<p>Training phase architecture</p>
<p><img src="https://jaiswalsuraj487.github.io/publications_and_projects/images/hypernet_neural_process/neural_process_archi_train.png" width="600"></p>
<section id="encoder-decoder-model-defination" class="level2">
<h2 class="anchored" data-anchor-id="encoder-decoder-model-defination">Encoder Decoder model defination</h2>
<div id="cell-59" class="cell">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Encoder(nn.Module):</span>
<span id="cb89-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, input_dim, hidden_dim, z_dim,activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.sin,activation_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">30.0</span>):</span>
<span id="cb89-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb89-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation</span>
<span id="cb89-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation_scale</span>
<span id="cb89-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> torch.sin:</span>
<span id="cb89-7">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb89-8"></span>
<span id="cb89-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linear1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(input_dim, hidden_dim)</span>
<span id="cb89-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linear2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(hidden_dim, hidden_dim)</span>
<span id="cb89-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linear3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(hidden_dim, z_dim)</span>
<span id="cb89-12"></span>
<span id="cb89-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb89-14">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linear1(x)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation_scale)</span>
<span id="cb89-15">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linear2(x)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation_scale)</span>
<span id="cb89-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linear3(x)</span>
<span id="cb89-17"></span>
<span id="cb89-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Decoder(nn.Module):</span>
<span id="cb89-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, z_dim, hidden_dim, output_dim,activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.sin,activation_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">30.0</span>):</span>
<span id="cb89-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb89-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation</span>
<span id="cb89-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activation_scale</span>
<span id="cb89-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> torch.sin:</span>
<span id="cb89-24">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb89-25">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linear1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(z_dim, hidden_dim)</span>
<span id="cb89-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linear2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(hidden_dim, hidden_dim)</span>
<span id="cb89-27">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linear3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(hidden_dim, hidden_dim)</span>
<span id="cb89-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linear4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(hidden_dim, hidden_dim)</span>
<span id="cb89-29">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linear5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(hidden_dim, output_dim)</span>
<span id="cb89-30"></span>
<span id="cb89-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb89-32">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linear1(x)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation_scale)</span>
<span id="cb89-33">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linear2(x)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation_scale)</span>
<span id="cb89-34">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linear3(x)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation_scale)</span>
<span id="cb89-35">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linear4(x)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation_scale)</span>
<span id="cb89-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linear5(x)</span></code></pre></div>
</div>
<div id="cell-60" class="cell">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchinfo <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> summary</span>
<span id="cb90-2">encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Encoder(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.relu,activation_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb90-3">summary(encoder,input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(img_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>img_size,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 32*32 = 1024 is the image size length, 5 is the input(x,y,r,g,b) to hypernet</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
Encoder                                  [1024, 128]               --
├─Linear: 1-1                            [1024, 256]               1,536
├─Linear: 1-2                            [1024, 256]               65,792
├─Linear: 1-3                            [1024, 128]               32,896
==========================================================================================
Total params: 100,224
Trainable params: 100,224
Non-trainable params: 0
Total mult-adds (M): 102.63
==========================================================================================
Input size (MB): 0.02
Forward/backward pass size (MB): 5.24
Params size (MB): 0.40
Estimated Total Size (MB): 5.66
==========================================================================================</code></pre>
</div>
</div>
<div id="cell-61" class="cell">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb92-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(encoder)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Encoder(
  (linear1): Linear(in_features=5, out_features=256, bias=True)
  (linear2): Linear(in_features=256, out_features=256, bias=True)
  (linear3): Linear(in_features=256, out_features=128, bias=True)
)</code></pre>
</div>
</div>
<div id="cell-62" class="cell">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1">decoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Decoder(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.relu,activation_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb94-2">summary(decoder,input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(img_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>img_size,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
Decoder                                  [1024, 6]                 --
├─Linear: 1-1                            [1024, 256]               33,536
├─Linear: 1-2                            [1024, 256]               65,792
├─Linear: 1-3                            [1024, 256]               65,792
├─Linear: 1-4                            [1024, 256]               65,792
├─Linear: 1-5                            [1024, 6]                 1,542
==========================================================================================
Total params: 232,454
Trainable params: 232,454
Non-trainable params: 0
Total mult-adds (M): 238.03
==========================================================================================
Input size (MB): 0.53
Forward/backward pass size (MB): 8.44
Params size (MB): 0.93
Estimated Total Size (MB): 9.90
==========================================================================================</code></pre>
</div>
</div>
<div id="cell-63" class="cell">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(decoder)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Decoder(
  (linear1): Linear(in_features=130, out_features=256, bias=True)
  (linear2): Linear(in_features=256, out_features=256, bias=True)
  (linear3): Linear(in_features=256, out_features=256, bias=True)
  (linear4): Linear(in_features=256, out_features=256, bias=True)
  (linear5): Linear(in_features=256, out_features=6, bias=True)
)</code></pre>
</div>
</div>
</section>
<section id="initialize-the-input-1" class="level2">
<h2 class="anchored" data-anchor-id="initialize-the-input-1">Initialize the input</h2>
<div id="cell-65" class="cell">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1">corr, vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_coordinate_map(data_loader.dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb98-2">corr, vals</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(tensor([[ 0.,  0.],
         [ 1.,  0.],
         [ 2.,  0.],
         ...,
         [29., 31.],
         [30., 31.],
         [31., 31.]], device='cuda:2'),
 tensor([[0.4510, 0.4706, 0.4824],
         [0.4745, 0.4745, 0.4471],
         [0.4667, 0.4353, 0.5412],
         ...,
         [0.0314, 0.0549, 0.0471],
         [0.0431, 0.0392, 0.0510],
         [0.0549, 0.0392, 0.0549]], device='cuda:2'))</code></pre>
</div>
</div>
<div id="cell-66" class="cell">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1">scaler_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preprocessing.MinMaxScaler().fit(corr.cpu())</span>
<span id="cb100-2">xy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(scaler_img.transform(corr.cpu())).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>().to(device)</span>
<span id="cb100-3">xy, xy.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(tensor([[0.0000, 0.0000],
         [0.0323, 0.0000],
         [0.0645, 0.0000],
         ...,
         [0.9355, 1.0000],
         [0.9677, 1.0000],
         [1.0000, 1.0000]], device='cuda:2'),
 torch.Size([1024, 2]))</code></pre>
</div>
</div>
</section>
<section id="training-loop-1" class="level2">
<h2 class="anchored" data-anchor-id="training-loop-1">Training loop</h2>
<div id="cell-68" class="cell">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb102-1">n_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb102-2">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.003</span></span>
<span id="cb102-3">n_context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb102-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Context Points="</span>,n_context)</span>
<span id="cb102-5"></span>
<span id="cb102-6">encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Encoder(input_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, hidden_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, z_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>,activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.relu,activation_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).to(device)</span>
<span id="cb102-7">decoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Decoder(z_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span>, hidden_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, output_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.relu,activation_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).to(device)</span>
<span id="cb102-8">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optim.Adam(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(encoder.parameters())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(decoder.parameters()),lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr)</span>
<span id="cb102-9"></span>
<span id="cb102-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> trange(n_epochs):</span>
<span id="cb102-11"></span>
<span id="cb102-12">    c_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(random.sample(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1023</span>),n_context))</span>
<span id="cb102-13"></span>
<span id="cb102-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Epoch="</span>,epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb102-15">    epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb102-16">    i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb102-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> data <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data_loader:</span>
<span id="cb102-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(data.shape)</span></span>
<span id="cb102-19"></span>
<span id="cb102-20">        optimizer.zero_grad()</span>
<span id="cb102-21"></span>
<span id="cb102-22">        pixel_intensity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).T.to(device).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb102-23">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.concatenate([xy[c_idx],pixel_intensity[c_idx]],axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb102-24"></span>
<span id="cb102-25">        encoder_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoder(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>)</span>
<span id="cb102-26">        encoder_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.mean(encoder_out,dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb102-27"></span>
<span id="cb102-28">        decoder_in <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoder_out.repeat(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb102-29">        decoder_in <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.concatenate([xy,decoder_in],axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb102-30"></span>
<span id="cb102-31">        img_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decoder(decoder_in)</span>
<span id="cb102-32"></span>
<span id="cb102-33">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> neg_loglikelyhood(img_out[:,:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],img_out[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:],pixel_intensity)</span>
<span id="cb102-34">        loss.backward()</span>
<span id="cb102-35">        optimizer.step()</span>
<span id="cb102-36"></span>
<span id="cb102-37">        epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> loss.item()</span>
<span id="cb102-38">        i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb102-39">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Epoch Loss="</span>,epoch_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_loader))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Context Points= 200</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 0/20 [00:00&lt;?, ?it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch= 1</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  5%|▌         | 1/20 [00:58&lt;18:27, 58.30s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= 47.26116828255653
Epoch= 2</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 2/20 [01:50&lt;16:27, 54.89s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -455.4421627301693
Epoch= 3</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 15%|█▌        | 3/20 [02:43&lt;15:16, 53.92s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -683.1707640041351
Epoch= 4</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 4/20 [03:35&lt;14:13, 53.32s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -761.2885692318916
Epoch= 5</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 25%|██▌       | 5/20 [04:36&lt;13:56, 55.78s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -827.9153870079041
Epoch= 6</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 6/20 [05:35&lt;13:20, 57.17s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -938.4062066322326
Epoch= 7</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 35%|███▌      | 7/20 [06:30&lt;12:11, 56.24s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1007.5277942465782
Epoch= 8</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 8/20 [07:30&lt;11:28, 57.39s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1048.726986592865
Epoch= 9</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 45%|████▌     | 9/20 [08:20&lt;10:06, 55.15s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1057.8311284263611
Epoch= 10</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 10/20 [09:17&lt;09:17, 55.74s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1070.1760208235742
Epoch= 11</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 55%|█████▌    | 11/20 [09:56&lt;07:34, 50.50s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1065.5062245418549
Epoch= 12</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 12/20 [10:35&lt;06:16, 47.06s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1078.0465439793586
Epoch= 13</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 65%|██████▌   | 13/20 [11:14&lt;05:13, 44.75s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1088.4120592634201
Epoch= 14</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 14/20 [11:53&lt;04:17, 42.99s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1078.4957633354188
Epoch= 15</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 75%|███████▌  | 15/20 [12:32&lt;03:28, 41.78s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1084.8360796244622
Epoch= 16</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 16/20 [13:11&lt;02:43, 40.94s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1093.4410486424447
Epoch= 17</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 85%|████████▌ | 17/20 [13:50&lt;02:01, 40.44s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1113.8205106693267
Epoch= 18</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 18/20 [14:29&lt;01:19, 39.99s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1110.6333978479386
Epoch= 19</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 95%|█████████▌| 19/20 [15:25&lt;00:44, 44.66s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1098.3281953195572
Epoch= 20</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 20/20 [16:25&lt;00:00, 49.28s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch Loss= -1106.2516599431992</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
</div>
<section id="saving-and-loading-the-model-1" class="level3">
<h3 class="anchored" data-anchor-id="saving-and-loading-the-model-1">saving and loading the model</h3>
<div id="cell-70" class="cell">
<div class="sourceCode cell-code" id="cb147" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb147-1">torch.save(encoder.state_dict(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'encoder_model_10000.pth'</span>)</span>
<span id="cb147-2">torch.save(decoder.state_dict(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'decoder_model_10000.pth'</span>)</span></code></pre></div>
</div>
<div id="cell-71" class="cell">
<div class="sourceCode cell-code" id="cb148" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb148-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the hypernet and targetnet models</span></span>
<span id="cb148-2">encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Encoder(input_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, hidden_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, z_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>,activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.relu,activation_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).to(device)</span>
<span id="cb148-3"></span>
<span id="cb148-4">encoder.load_state_dict(torch.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'encoder_model_10000.pth'</span>))</span>
<span id="cb148-5">encoder.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to evaluation mode</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Encoder(
  (linear1): Linear(in_features=5, out_features=128, bias=True)
  (linear2): Linear(in_features=128, out_features=128, bias=True)
  (linear3): Linear(in_features=128, out_features=128, bias=True)
)</code></pre>
</div>
</div>
<div id="cell-72" class="cell">
<div class="sourceCode cell-code" id="cb150" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb150-1">decoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Decoder(z_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span>, hidden_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, output_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.relu,activation_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).to(device)</span>
<span id="cb150-2">decoder.load_state_dict(torch.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'decoder_model_10000.pth'</span>))</span>
<span id="cb150-3">decoder.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Decoder(
  (linear1): Linear(in_features=130, out_features=256, bias=True)
  (linear2): Linear(in_features=256, out_features=256, bias=True)
  (linear3): Linear(in_features=256, out_features=256, bias=True)
  (linear4): Linear(in_features=256, out_features=256, bias=True)
  (linear5): Linear(in_features=256, out_features=6, bias=True)
)</code></pre>
</div>
</div>
</section>
</section>
<section id="testing-1" class="level2">
<h2 class="anchored" data-anchor-id="testing-1">Testing</h2>
<p>Testing phase architecture</p>
<p><img src="https://jaiswalsuraj487.github.io/publications_and_projects/images/hypernet_neural_process/neural_process_archi_test.png" width="600"></p>
<p>Loading the test data</p>
<div id="cell-76" class="cell">
<div class="sourceCode cell-code" id="cb152" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb152-1">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># keep this to 1</span></span>
<span id="cb152-2">img_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Change as needed</span></span>
<span id="cb152-3"></span>
<span id="cb152-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify the root directory where the dataset is located</span></span>
<span id="cb152-5">data_root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/celeba/img_align_celeba_2599'</span></span>
<span id="cb152-6"></span>
<span id="cb152-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the data transformations</span></span>
<span id="cb152-8">transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb152-9">    transforms.Resize((img_size, img_size)),  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the images to a common size (adjust as needed)</span></span>
<span id="cb152-10">    transforms.ToTensor(),   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert images to tensors</span></span>
<span id="cb152-11">])</span>
<span id="cb152-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># default shape is torch.Size([3, 218, 178])</span></span>
<span id="cb152-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the custom dataset</span></span>
<span id="cb152-14">celeba_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomImageDataset(data_root, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transform)</span>
<span id="cb152-15"></span>
<span id="cb152-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a data loader</span></span>
<span id="cb152-17">test_data_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(celeba_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
<section id="plotting-the-results-1" class="level3">
<h3 class="anchored" data-anchor-id="plotting-the-results-1">Plotting the results</h3>
<div id="cell-78" class="cell">
<div class="sourceCode cell-code" id="cb153" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb153-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_enc_dec(data,encoder,decoder,c_idx):</span>
<span id="cb153-2"></span>
<span id="cb153-3">    pixel_intensity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).T.to(device).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb153-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.concatenate([xy[c_idx],pixel_intensity[c_idx]],axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb153-5"></span>
<span id="cb153-6">    encoder_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoder(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>)</span>
<span id="cb153-7">    encoder_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.mean(encoder_out,dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb153-8"></span>
<span id="cb153-9">    decoder_in <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoder_out.repeat(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb153-10">    decoder_in <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.concatenate([xy,decoder_in],axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb153-11"></span>
<span id="cb153-12">    img_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decoder(decoder_in)</span>
<span id="cb153-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> img_out.cpu().detach()</span></code></pre></div>
</div>
<div id="cell-79" class="cell">
<div class="sourceCode cell-code" id="cb154" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb154-1">c_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(random.sample(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(img_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>img_size),<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb154-2">c_10 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(random.sample(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(img_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>img_size),<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb154-3">c_100 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(random.sample(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(img_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>img_size),<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb154-4">c_1000 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(random.sample(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(img_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>img_size),<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>))</span>
<span id="cb154-5"></span>
<span id="cb154-6">idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb154-7">image_any <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_data_loader.dataset[idx]</span>
<span id="cb154-8">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_any</span></code></pre></div>
</div>
<div id="cell-80" class="cell">
<div class="sourceCode cell-code" id="cb155" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb155-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>),constrained_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb155-2">plt.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Neural process"</span>,fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb155-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_image(i,j,k, data,encoder,decoder, c_idx):</span>
<span id="cb155-4">    plt.subplot(i,j,k)</span>
<span id="cb155-5">    img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb155-6">    mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb155-7">    mask[c_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,c_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb155-8">    plt.imshow(img<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>mask)</span>
<span id="cb155-9">    plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Context: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(c_idx)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb155-10">    plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb155-11"></span>
<span id="cb155-12">    plt.subplot(i,j,k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb155-13">    plot_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_enc_dec(data,encoder,decoder,c_idx)</span>
<span id="cb155-14">    plt.imshow(plot_image[:,:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>].T.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>).permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb155-15">    plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb155-16"></span>
<span id="cb155-17">    plt.subplot(i,j,k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb155-18">    var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plot_image[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:].exp().T.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>).permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb155-19">    var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> var<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>var.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()</span>
<span id="cb155-20">    var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> var<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>var.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb155-21">    plt.imshow(var)</span>
<span id="cb155-22">    plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;Figure size 900x700 with 0 Axes&gt;</code></pre>
</div>
</div>
<div id="cell-81" class="cell">
<div class="sourceCode cell-code" id="cb157" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb157-1">plot_image(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,data,encoder,decoder,c_1)</span>
<span id="cb157-2">plot_image(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,data,encoder,decoder,c_10)</span>
<span id="cb157-3">plot_image(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,data,encoder,decoder,c_100)</span>
<span id="cb157-4">plot_image(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,data,encoder,decoder,c_1000)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="Hypernet_neural_process_files/figure-html/cell-46-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/Hypernet_neural_process_files/figure-html/cell-46-output-2.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>The first row shows the test context points, second row shows our model prediction and third row shows the variance of the predicted image.</p>
</section>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<ul>
<li>Here we have seen some implementaion of meta learning using hypernet and neural processes.</li>
<li>Further we can improve if we use sin activation function in the model for image like data. Refer <a href="https://arxiv.org/pdf/2006.09661.pdf">link</a> for more details.</li>
</ul>
<p>The saga concludes with a symphony of learning, as Hypernets and Neural Processes rewrite the narrative of image reconstruction on CelebA, transforming a complex challenge into a melodious solution.</p>


</section>

 ]]></description>
  <category>Deep Learning</category>
  <category>Meta Learning</category>
  <guid>https://jaiswalsuraj487.github.io/publications_and_projects/data/Hypernet_neural_process.html</guid>
  <pubDate>Wed, 08 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Active Learning for CNN: A Core-Set Approach</title>
  <dc:creator>Suraj Jaiswal</dc:creator>
  <link>https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL.html</link>
  <description><![CDATA[ 




<p>Here I have implemented Active learning on CIFAR10 dataset using ResNet18 as the base model. We currently use the following active learning strategies: - Diversity acquisition - Random acquisition</p>
<p>and compare their performance.</p>
<p>Reference Paper: <a href="https://arxiv.org/abs/1708.00489">link</a>, Reference Notebook: <a href="https://github.com/nipunbatra/pml-teaching/blob/master/notebooks/ssl.ipynb">link</a></p>
<p><img src="https://jaiswalsuraj487.github.io/publications_and_projects/images/diversity_acq_AL/diversity_al_image.png" width="700"></p>
<section id="intuition-behind-diversity-active-learning" class="level1">
<h1>Intuition behind Diversity Active Learning</h1>
<p>We want to select the most uncertain samples from the unlabeled pool. However, we also want to ensure that the selected samples are diverse. This is because if we select similar samples, we will not be able to learn much from them.</p>
<p>Here we wish to work on images, so we can use their latent representation to select a pool point which is furthest in the latent dimension space from the train data.</p>
<p>Let’s see how we can do this. Below is an example of random points in 2D space. We want to select the point which is furthest from the train data. We can do this by finding the point which has the maximum distance from the train data. This is the intuition behind diversity acquisition.</p>
<p>Importing the required libraries and modules.</p>
<div id="cell-4" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb1-2">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> astra.torch.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ResNetClassifier</span>
<span id="cb1-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'installed'</span>) </span>
<span id="cb1-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span>:</span>
<span id="cb1-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'not installed'</span>)</span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb1-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>pip install git<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>github.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>sustainability<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>ASTRA</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>installed</code></pre>
</div>
</div>
<div id="cell-5" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb3-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.optim <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> optim</span>
<span id="cb3-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb3-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> models</span>
<span id="cb3-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb3-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb3-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb3-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb3-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm, trange</span>
<span id="cb3-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retina display</span></span>
<span id="cb3-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'retina'</span></span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Confusion matrix</span></span>
<span id="cb3-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> confusion_matrix</span>
<span id="cb3-20"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ConfusionMatrixDisplay</span>
<span id="cb3-21"></span>
<span id="cb3-22"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchsummary</span>
<span id="cb3-23"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb3-24"></span>
<span id="cb3-25"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> umap</span>
<span id="cb3-26"></span>
<span id="cb3-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ASTRA</span></span>
<span id="cb3-28"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> astra.torch.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_cifar_10</span>
<span id="cb3-29"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> astra.torch.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_fn</span>
<span id="cb3-30"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> astra.torch.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ResNetClassifier</span>
<span id="cb3-31"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> astra.torch.al <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Furthest, Centroid, DiversityStrategy, UniformRandomAcquisition, RandomStrategy</span>
<span id="cb3-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Netron, ONNX for model visualization</span></span>
<span id="cb3-33"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> netron</span>
<span id="cb3-34"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> onnx</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/jaiswalsuraj/miniconda3/envs/torch_gpu/lib/python3.10/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html
  from .autonotebook import tqdm as notebook_tqdm
/home/jaiswalsuraj/suraj_work/ASTRA/astra/torch/data.py:12: UserWarning: TORCH_HOME not set, setting it to /home/jaiswalsuraj/.cache/torch
  warnings.warn(f"TORCH_HOME not set, setting it to {os.environ['TORCH_HOME']}")</code></pre>
</div>
</div>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda:2"</span>)</span>
<span id="cb5-2">current_device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> device <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#torch.cuda.current_device()</span></span>
<span id="cb5-3">device_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cuda.get_device_name(current_device)</span>
<span id="cb5-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Current GPU assigned: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>current_device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Current GPU assigned: cuda:2, Name: NVIDIA A100-SXM4-80GB, cuda:2</code></pre>
</div>
</div>
<div id="cell-7" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create dummy data</span></span>
<span id="cb7-2">n_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb7-3">n_pool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb7-4">n_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb7-5">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate random train and pool features</span></span>
<span id="cb7-7">train_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand(n_train, n_features)</span>
<span id="cb7-8">pool_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand(n_pool, n_features)</span>
<span id="cb7-9"></span>
<span id="cb7-10">plt.scatter(train_features[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], train_features[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Train Data'</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>)</span>
<span id="cb7-11">plt.scatter(pool_features[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], pool_features[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pool Data'</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.scatter(centroid_feature[0], centroid_feature[1], label='Centroid', marker='s', c='red')</span></span>
<span id="cb7-14">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Feature 1'</span>)</span>
<span id="cb7-15">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Feature 2'</span>)</span>
<span id="cb7-16">plt.legend()</span>
<span id="cb7-17">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Train and Pool Data farthest from Centroid'</span>)</span>
<span id="cb7-18">plt.grid()</span>
<span id="cb7-19">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-5-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of samples to select from pool</span></span>
<span id="cb8-2">acquisition <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Furthest()</span>
<span id="cb8-3">selected_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> acquisition.acquire_scores(</span>
<span id="cb8-4">                    train_features.cpu(), pool_features.cpu(), n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples</span>
<span id="cb8-5">                )</span>
<span id="cb8-6">selected_indices </span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[8, 9]</code></pre>
</div>
</div>
<div id="cell-9" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index of the n farthest Pool Feature from train features:"</span>, selected_indices)</span>
<span id="cb10-2"></span>
<span id="cb10-3">plt.scatter(pool_features[selected_indices][:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], pool_features[selected_indices][:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Selected data'</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s'</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>)</span>
<span id="cb10-4">plt.scatter(train_features[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], train_features[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Train Data'</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>)</span>
<span id="cb10-5">plt.scatter(pool_features[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], pool_features[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pool Data'</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb10-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Feature 1'</span>)</span>
<span id="cb10-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Feature 2'</span>)</span>
<span id="cb10-8">plt.legend()</span>
<span id="cb10-9">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Train and Pool Data farthest from Centroid'</span>)</span>
<span id="cb10-10">plt.grid()</span>
<span id="cb10-11">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Index of the n farthest Pool Feature from train features: [8, 9]</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-7-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-7-output-2.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="cifar10-dataset" class="level1">
<h1>CIFAR10 Dataset</h1>
<p>let’s now work on CIFAR10 dataset.</p>
<div id="cell-12" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_cifar_10()</span>
<span id="cb12-2">dataset </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Files already downloaded and verified
Files already downloaded and verified</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>
CIFAR-10 Dataset
length of dataset: 60000
shape of images: torch.Size([3, 32, 32])
len of classes: 10
classes: ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']
dtype of images: torch.float32
dtype of labels: torch.int64
            </code></pre>
</div>
</div>
<div id="cell-13" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot some images</span></span>
<span id="cb15-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb15-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>):</span>
<span id="cb15-4">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb15-5">    plt.imshow(torch.einsum(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chw-&gt;hwc"</span>, dataset.data[i].cpu()))</span>
<span id="cb15-6">    plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb15-7">    plt.title(dataset.classes[dataset.targets[i]])</span>
<span id="cb15-8">plt.tight_layout()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-9-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-9-output-1.png" width="581" height="589" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<section id="train-val-test-split" class="level2">
<h2 class="anchored" data-anchor-id="train-val-test-split">Train val test split</h2>
<div id="cell-15" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">n_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb16-2">n_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20000</span></span>
<span id="cb16-3"></span>
<span id="cb16-4">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.data.to(device)</span>
<span id="cb16-5">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.targets.to(device)</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(X.shape)</span>
<span id="cb16-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(X.shape, X.dtype)</span>
<span id="cb16-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(X.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), X.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>())</span>
<span id="cb16-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(y.shape, y.dtype)</span>
<span id="cb16-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(X.device, y.device)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([60000, 3, 32, 32])
torch.Size([60000, 3, 32, 32]) torch.float32
tensor(0., device='cuda:2') tensor(1., device='cuda:2')
torch.Size([60000]) torch.int64
cuda:2 cuda:2</code></pre>
</div>
</div>
<div id="cell-16" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb18-2">idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randperm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(X))</span>
<span id="cb18-3">train_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx[:n_train]</span>
<span id="cb18-4">pool_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx[n_train:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n_test]</span>
<span id="cb18-5">test_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n_test:] </span>
<span id="cb18-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_idx), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(pool_idx), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_idx))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1000 39000 20000</code></pre>
</div>
</div>
</section>
</section>
<section id="without-active-learning" class="level1">
<h1>Without Active Learning</h1>
<section id="checking-out-untrained-model" class="level2">
<h2 class="anchored" data-anchor-id="checking-out-untrained-model">Checking out untrained model</h2>
<p>Before we start training the model, let’s see how the model performs without training so we can get lowerbound on the performance of the model.</p>
<div id="cell-20" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">resnet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResNetClassifier(models.resnet18, models.ResNet18_Weights.DEFAULT, n_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>).to(device)</span></code></pre></div>
</div>
<div id="cell-21" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export to ONNX and visualize with Netron</span></span>
<span id="cb21-2">dummy_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>).to(device)</span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># torch.onnx.export(resnet, dummy_input, "resnet.onnx", verbose=True)</span></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># netron.start("resnet.onnx")</span></span></code></pre></div>
</div>
<div id="cell-22" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">accuracy_summary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span></code></pre></div>
</div>
<div id="cell-23" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_accuracy(net, X, y):</span>
<span id="cb23-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb23-3">        logits_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> net(X)</span>
<span id="cb23-4">        y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits_pred.argmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb23-5">        acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>().mean()</span>
<span id="cb23-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> y_pred, acc</span>
<span id="cb23-7"></span>
<span id="cb23-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> predict(net, classes, plot_confusion_matrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, train_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_idx, pool_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pool_idx, test_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_idx):</span>
<span id="cb23-9">    accuracies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb23-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, (name, idx) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pool"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>), [train_idx, pool_idx, test_idx])):</span>
<span id="cb23-11">        X_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[idx].to(device)</span>
<span id="cb23-12">        y_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y[idx].to(device)</span>
<span id="cb23-13">        y_pred, acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_accuracy(net, X_dataset, y_dataset)</span>
<span id="cb23-14">        accuracies[name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> acc.item() </span>
<span id="cb23-15">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> set accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%'</span>)</span>
<span id="cb23-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> plot_confusion_matrix:</span>
<span id="cb23-17">            cm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(y_dataset.cpu(), y_pred.cpu())</span>
<span id="cb23-18">            cm_display <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConfusionMatrixDisplay(cm, display_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>classes).plot(values_format<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span></span>
<span id="cb23-19">                                                                                , cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Blues'</span>)</span>
<span id="cb23-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rotate the labels on x-axis to make them readable</span></span>
<span id="cb23-21">            _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.xticks(rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb23-22">            plt.show() </span>
<span id="cb23-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> accuracies </span></code></pre></div>
</div>
<div id="cell-24" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">accuracy_summary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'untrain_acc'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predict(resnet, dataset.classes, plot_confusion_matrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb24-2">accuracy_summary</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>train set accuracy: 7.70%
pool set accuracy: 8.37%
test set accuracy: 8.58%</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>{'untrain_acc': {'train': 0.07700000703334808,
  'pool': 0.08366666734218597,
  'test': 0.08579999953508377}}</code></pre>
</div>
</div>
<div id="cell-25" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> viz_embeddings(net, X, y, device):</span>
<span id="cb27-2">    reducer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> umap.UMAP()</span>
<span id="cb27-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb27-4">        emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> net.featurizer(X.to(device))</span>
<span id="cb27-5">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emb.cpu().numpy()</span>
<span id="cb27-6">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reducer.fit_transform(emb)</span>
<span id="cb27-7">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb27-8">    plt.scatter(emb[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], emb[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y.cpu().numpy(), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tab10'</span>)</span>
<span id="cb27-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a colorbar legend to mark color to class mapping</span></span>
<span id="cb27-10">    cb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.colorbar(boundaries<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb27-11">    cb.set_ticks(np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb27-12">    cb.set_ticklabels(dataset.classes)</span>
<span id="cb27-13">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UMAP embeddings"</span>)</span>
<span id="cb27-14">    plt.tight_layout()</span></code></pre></div>
</div>
<div id="cell-26" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">viz_embeddings(resnet, X[train_idx], y[train_idx], device)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-18-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-18-output-1.png" width="394" height="388" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="train-the-model-on-labeled-train-set1000" class="level2">
<h2 class="anchored" data-anchor-id="train-the-model-on-labeled-train-set1000">Train the model on labeled train set(1000)</h2>
<div id="cell-28" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">resnet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResNetClassifier(models.resnet18, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, n_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nn.GELU(), dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>).to(device)</span>
<span id="cb29-2">iter_losses, epoch_losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_fn(resnet, X[train_idx], y[train_idx], nn.CrossEntropyLoss(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3e-4</span>, </span>
<span id="cb29-3">                                     batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
<div id="cell-29" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">plt.plot(iter_losses)</span>
<span id="cb30-2">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Iteration"</span>)</span>
<span id="cb30-3">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Training loss"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>Text(0, 0.5, 'Training loss')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-20-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-20-output-2.png" width="578" height="432" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-30" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">accuracy_summary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train_1000"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predict(resnet, dataset.classes, plot_confusion_matrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-21-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-21-output-2.png" width="576" height="497" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 36.06%</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-21-output-4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-21-output-4.png" width="585" height="497" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>test set accuracy: 36.24%</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-21-output-6.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-21-output-6.png" width="576" height="497" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-31" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">viz_embeddings(resnet, X[train_idx], y[train_idx], device)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-22-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-22-output-1.png" width="396" height="388" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-32" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">viz_embeddings(resnet, X[test_idx[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>]], y[test_idx[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>]], device)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-23-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-23-output-1.png" width="394" height="388" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-33" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">accuracy_summary</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>{'untrain_acc': {'train': 0.07700000703334808,
  'pool': 0.08366666734218597,
  'test': 0.08579999953508377},
 'train_1000': {'train': 1.0,
  'pool': 0.36056411266326904,
  'test': 0.3624500036239624}}</code></pre>
</div>
</div>
</section>
<section id="train-on-train-labeled1000-labeled-pool5000" class="level2">
<h2 class="anchored" data-anchor-id="train-on-train-labeled1000-labeled-pool5000">Train on train labeled(1000)+ labeled pool(5000)</h2>
<div id="cell-35" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb40-2">idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randperm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(X))</span>
<span id="cb40-3">train_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx[:n_train]</span>
<span id="cb40-4">pool_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx[n_train:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n_test]</span>
<span id="cb40-5">test_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n_test:] </span>
<span id="cb40-6"></span>
<span id="cb40-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### Train on train + pool</span></span>
<span id="cb40-8">train_plus_pool_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([train_idx, pool_idx[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>]])</span>
<span id="cb40-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(train_plus_pool_idx.shape)</span>
<span id="cb40-10">resnet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResNetClassifier(models.resnet18, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, n_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nn.GELU(), dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>).to(device)</span>
<span id="cb40-11"></span>
<span id="cb40-12">iter_losses, epoch_losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_fn(resnet, X[train_plus_pool_idx], y[train_plus_pool_idx], loss_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nn.CrossEntropyLoss(),</span>
<span id="cb40-13">                                        lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3e-4</span>,</span>
<span id="cb40-14">                                        batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([6000])</code></pre>
</div>
</div>
<div id="cell-36" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">plt.plot(iter_losses)   </span>
<span id="cb42-2">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Iteration"</span>)</span>
<span id="cb42-3">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Training loss"</span>) </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>Text(0, 0.5, 'Training loss')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-26-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-26-output-2.png" width="567" height="432" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-37" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">viz_embeddings(resnet, X[train_idx], y[train_idx], device)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-27-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-12"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-27-output-1.png" width="396" height="388" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-38" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">viz_embeddings(resnet, X[test_idx[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>]], y[test_idx[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>]], device)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-28-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-13"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-28-output-1.png" width="392" height="388" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-39" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># predict(resnet, dataset.classes, plot_confusion_matrix=True)</span></span>
<span id="cb46-2">accuracy_summary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train_1000_pool_5000"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predict(resnet, dataset.classes, plot_confusion_matrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>train set accuracy: 99.20%</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-29-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-14"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-29-output-2.png" width="576" height="497" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 49.98%</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-29-output-4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-15"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-29-output-4.png" width="585" height="497" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>test set accuracy: 42.73%</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-29-output-6.png" class="lightbox" data-gallery="quarto-lightbox-gallery-16"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-29-output-6.png" width="585" height="501" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="train-on-labled-train1000-labeled-pool-whole39000" class="level2">
<h2 class="anchored" data-anchor-id="train-on-labled-train1000-labeled-pool-whole39000">Train on labled train(1000) + labeled pool whole(39000)</h2>
<div id="cell-41" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb50-2">idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randperm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(X))</span>
<span id="cb50-3">train_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx[:n_train]</span>
<span id="cb50-4">pool_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx[n_train:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n_test]</span>
<span id="cb50-5">test_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n_test:] </span>
<span id="cb50-6"></span>
<span id="cb50-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### Train on train + pool</span></span>
<span id="cb50-8">train_plus_pool_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([train_idx, pool_idx])</span>
<span id="cb50-9"></span>
<span id="cb50-10">resnet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResNetClassifier(models.resnet18, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, n_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nn.GELU(), dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>).to(device)</span>
<span id="cb50-11"></span>
<span id="cb50-12">iter_losses, epoch_losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_fn(resnet, X[train_plus_pool_idx], y[train_plus_pool_idx], loss_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nn.CrossEntropyLoss(),</span>
<span id="cb50-13">                                     lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3e-4</span>,</span>
<span id="cb50-14">                                        batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
<div id="cell-42" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">plt.plot(iter_losses)   </span>
<span id="cb51-2">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Iteration"</span>)</span>
<span id="cb51-3">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Training loss"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>Text(0, 0.5, 'Training loss')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-31-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-17"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-31-output-2.png" width="567" height="432" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-43" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">viz_embeddings(resnet, X[train_idx], y[train_idx], device)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-32-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-18"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-32-output-1.png" width="394" height="388" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-44" class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">viz_embeddings(resnet, X[test_idx[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>]], y[test_idx[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>]], device)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-33-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-19"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-33-output-1.png" width="392" height="388" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-45" class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">accuracy_summary[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_1000_pool_39000"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predict(resnet, dataset.classes, plot_confusion_matrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>train set accuracy: 99.60%</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-34-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-20"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-34-output-2.png" width="576" height="497" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 99.43%</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-34-output-4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-21"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-34-output-4.png" width="585" height="497" class="figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>test set accuracy: 61.61%</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-34-output-6.png" class="lightbox" data-gallery="quarto-lightbox-gallery-22"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-34-output-6.png" width="585" height="497" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-46" class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">accuracy_summary </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>{'untrain_acc': {'train': 0.07700000703334808,
  'pool': 0.08366666734218597,
  'test': 0.08579999953508377},
 'train_1000': {'train': 1.0,
  'pool': 0.36056411266326904,
  'test': 0.3624500036239624},
 'train_1000_pool_5000': {'train': 0.9920000433921814,
  'pool': 0.4998205304145813,
  'test': 0.4273499846458435},
 'train_1000_pool_39000': {'train': 0.9960000514984131,
  'pool': 0.994282066822052,
  'test': 0.616100013256073}}</code></pre>
</div>
</div>
<p>loading accuracy results</p>
<div id="cell-48" class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import json</span></span>
<span id="cb61-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># file_path = "/home/jaiswalsuraj/suraj_work/ASTRA/notebooks/al/accuracy_summary_without.json"</span></span>
<span id="cb61-3"></span>
<span id="cb61-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with open(file_path, 'w') as json_file:</span></span>
<span id="cb61-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     json.dump(accuracy_summary, json_file)</span></span>
<span id="cb61-6"></span>
<span id="cb61-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"Accuracy summary has been saved to {file_path}.")</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy summary has been saved to /home/jaiswalsuraj/suraj_work/ASTRA/notebooks/al/accuracy_summary_without.json.</code></pre>
</div>
</div>
<div id="cell-49" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1">file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/jaiswalsuraj/suraj_work/ASTRA/notebooks/al/accuracy_summary_without.json"</span></span>
<span id="cb63-2"></span>
<span id="cb63-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the accuracy summary from the JSON file</span></span>
<span id="cb63-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> json_file:</span>
<span id="cb63-5">    accuracy_summary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(json_file)</span></code></pre></div>
</div>
<div id="cell-50" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">accuracy_summary </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>{'untrain_acc': {'train': 0.07700000703334808,
  'pool': 0.08366666734218597,
  'test': 0.08579999953508377},
 'train_1000': {'train': 1.0,
  'pool': 0.36056411266326904,
  'test': 0.3624500036239624},
 'train_1000_pool_5000': {'train': 0.9920000433921814,
  'pool': 0.4998205304145813,
  'test': 0.4273499846458435},
 'train_1000_pool_39000': {'train': 0.9960000514984131,
  'pool': 0.994282066822052,
  'test': 0.616100013256073}}</code></pre>
</div>
</div>
</section>
</section>
<section id="active-learning-for-convolutional-neural-networks-a-core-set-approach" class="level1">
<h1>Active Learning for Convolutional Neural Networks: A Core-Set Approach</h1>
<p>Paper <a href="https://arxiv.org/abs/1708.00489">link</a></p>
<div id="cell-52" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb66-2">idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randperm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(X))</span>
<span id="cb66-3">train_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx[:n_train]</span>
<span id="cb66-4">pool_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx[n_train:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n_test]</span>
<span id="cb66-5">test_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n_test:] </span>
<span id="cb66-6"></span>
<span id="cb66-7">accuracy_AL_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb66-8">class_count_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span></code></pre></div>
</div>
<div id="cell-53" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> AL_loop(train_idx, pool_idx, strategy, acquisition, n_query_samples, num_iter):</span>
<span id="cb67-2">    train_idx_copy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_idx.clone().to(device)</span>
<span id="cb67-3">    pool_idx_copy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pool_idx.clone().to(device)</span>
<span id="cb67-4"></span>
<span id="cb67-5">    n_query_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_query_samples <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of samples to add to training set at each iteration</span></span>
<span id="cb67-6">    num_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_iter <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of iterations to run active learning for</span></span>
<span id="cb67-7">    accuracy_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List to store accuracies</span></span>
<span id="cb67-8">    class_count_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List to store class counts</span></span>
<span id="cb67-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> trange(num_iter):</span>
<span id="cb67-10">        resnet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResNetClassifier(models.resnet18, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, n_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nn.GELU(), dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>).to(device)</span>
<span id="cb67-11">        iter_losses, epoch_losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_fn(resnet, X[train_idx_copy], y[train_idx_copy], nn.CrossEntropyLoss(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3e-4</span>, </span>
<span id="cb67-12">                                        batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb67-13">        </span>
<span id="cb67-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> strategy.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__class__</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DiversityStrategy'</span>:</span>
<span id="cb67-15">            best_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> strategy.query(</span>
<span id="cb67-16">                resnet.featurizer, pool_idx_copy.to(device), train_idx_copy.to(device), n_query_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_query_samples</span>
<span id="cb67-17">            )</span>
<span id="cb67-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> strategy.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__class__</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RandomStrategy'</span>:</span>
<span id="cb67-19">            best_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> strategy.query(</span>
<span id="cb67-20">                resnet, pool_idx_copy.to(device), n_query_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_query_samples</span>
<span id="cb67-21">            )</span>
<span id="cb67-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb67-23">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Invalid strategy'</span>)</span>
<span id="cb67-24">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb67-25">        accuracy_list.append(predict(resnet, dataset.classes, plot_confusion_matrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, train_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_idx_copy, pool_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pool_idx_copy, test_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_idx))</span>
<span id="cb67-26">        class_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.bincount(y[train_idx_copy], minlength<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset.classes))</span>
<span id="cb67-27">        class_count_list.append(class_counts) </span>
<span id="cb67-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(train_idx_copy.device, pool_idx_copy.device, best_indices[acquisition.__class__.__name__].device)</span></span>
<span id="cb67-29">        train_idx_copy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([train_idx_copy, best_indices[acquisition.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__class__</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span>]])</span>
<span id="cb67-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pool_idx_copy = torch.cat([pool_idx_copy[i:i + 1] for i in range(len(pool_idx_copy)) if i not in best_indices[acquisition.__class__.__name__]], dim=0)</span></span>
<span id="cb67-31">        pool_idx_copy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pool_idx_copy[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>torch.isin(pool_idx_copy, best_indices[acquisition.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__class__</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span>])]</span>
<span id="cb67-32">    class_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.bincount(y[train_idx_copy], minlength<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset.classes))</span>
<span id="cb67-33">    class_count_list.append(class_counts)</span>
<span id="cb67-34">    accuracy_list.append(predict(resnet, dataset.classes, plot_confusion_matrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, train_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_idx_copy, pool_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pool_idx_copy, test_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_idx))</span>
<span id="cb67-35">    </span>
<span id="cb67-36">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train length: '</span>, train_idx_copy.shape,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pool lenght: '</span>, pool_idx_copy.shape)</span>
<span id="cb67-37">    selected_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_idx_copy </span>
<span id="cb67-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> accuracy_list, accuracy_list[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], class_count_list <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># returns accuracy list(over al iterations) and accuracy at end(train, pool, test)</span></span></code></pre></div>
</div>
<section id="furtherst-acquistion-strategy" class="level2">
<h2 class="anchored" data-anchor-id="furtherst-acquistion-strategy">Furtherst acquistion Strategy</h2>
<div id="cell-55" class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">acquisition <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Furthest()</span>
<span id="cb68-2">strategy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DiversityStrategy(acquisition, X, y)</span>
<span id="cb68-3"></span>
<span id="cb68-4">strategy.to(device)</span>
<span id="cb68-5"></span>
<span id="cb68-6">seeds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> ]<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#, 1, 2, 3, 4]</span></span>
<span id="cb68-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> seed <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> seeds: </span>
<span id="cb68-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(strategy.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__class__</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' For seed: '</span>, seed, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' ----------------------------------------- '</span>)</span>
<span id="cb68-9">    n_query_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb68-10">    num_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb68-11">    a, b, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AL_loop(train_idx, pool_idx, strategy, acquisition, n_query_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_query_samples, num_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_iter)</span>
<span id="cb68-12">    accuracy_AL_list[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_1000_pool_query_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n_query_samples<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_iter_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_iter<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>strategy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__class__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_seed_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>seed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a</span>
<span id="cb68-13">    accuracy_summary[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_1000_pool_query_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n_query_samples<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_iter_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_iter<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>strategy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__class__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_seed_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>seed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b </span>
<span id="cb68-14">    class_count_dict[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_1000_pool_query_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n_query_samples<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_iter_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_iter<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>strategy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__class__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_seed_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>seed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>DiversityStrategy  For seed:  0  ----------------------------------------- </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 0/50 [00:00&lt;?, ?it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  2%|▏         | 1/50 [00:04&lt;03:44,  4.58s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 36.18%
test set accuracy: 36.43%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  4%|▍         | 2/50 [00:09&lt;03:48,  4.76s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 36.20%
test set accuracy: 36.69%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  6%|▌         | 3/50 [00:14&lt;03:55,  5.02s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 37.16%
test set accuracy: 37.14%
train set accuracy: 99.54%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  8%|▊         | 4/50 [00:20&lt;04:02,  5.27s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 36.48%
test set accuracy: 36.71%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 5/50 [00:26&lt;04:04,  5.43s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 38.77%
test set accuracy: 38.72%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 12%|█▏        | 6/50 [00:32&lt;04:08,  5.64s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 39.10%
test set accuracy: 39.38%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 14%|█▍        | 7/50 [00:38&lt;04:13,  5.91s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 39.21%
test set accuracy: 39.09%
train set accuracy: 99.82%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 16%|█▌        | 8/50 [00:45&lt;04:19,  6.18s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 38.07%
test set accuracy: 38.21%
train set accuracy: 99.61%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 18%|█▊        | 9/50 [00:52&lt;04:27,  6.52s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 38.90%
test set accuracy: 39.38%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 10/50 [00:59&lt;04:29,  6.74s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 39.75%
test set accuracy: 39.89%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 22%|██▏       | 11/50 [01:07&lt;04:31,  6.96s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 39.51%
test set accuracy: 39.52%
train set accuracy: 99.67%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 24%|██▍       | 12/50 [01:15&lt;04:35,  7.26s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 39.12%
test set accuracy: 39.17%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 26%|██▌       | 13/50 [01:23&lt;04:39,  7.55s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 40.86%
test set accuracy: 40.92%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 28%|██▊       | 14/50 [01:31&lt;04:41,  7.82s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 39.84%
test set accuracy: 39.86%
train set accuracy: 96.38%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 15/50 [01:40&lt;04:44,  8.14s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 38.85%
test set accuracy: 38.47%
train set accuracy: 99.92%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 32%|███▏      | 16/50 [01:49&lt;04:46,  8.44s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 40.29%
test set accuracy: 40.52%
train set accuracy: 95.46%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 34%|███▍      | 17/50 [01:59&lt;04:50,  8.80s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 40.26%
test set accuracy: 40.57%
train set accuracy: 99.30%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 36%|███▌      | 18/50 [02:09&lt;04:55,  9.23s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 39.75%
test set accuracy: 40.44%
train set accuracy: 99.61%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 38%|███▊      | 19/50 [02:20&lt;04:54,  9.51s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 39.95%
test set accuracy: 40.60%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 20/50 [02:30&lt;04:56,  9.89s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 41.72%
test set accuracy: 42.24%
train set accuracy: 99.97%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 42%|████▏     | 21/50 [02:41&lt;04:56, 10.23s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 41.81%
test set accuracy: 42.22%
train set accuracy: 99.68%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 44%|████▍     | 22/50 [02:53&lt;04:58, 10.68s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 41.07%
test set accuracy: 42.00%
train set accuracy: 99.81%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 46%|████▌     | 23/50 [03:05&lt;04:55, 10.93s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 42.33%
test set accuracy: 42.37%
train set accuracy: 99.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 48%|████▊     | 24/50 [03:17&lt;04:55, 11.35s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 39.79%
test set accuracy: 41.30%
train set accuracy: 99.47%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 25/50 [03:30&lt;04:55, 11.80s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 42.15%
test set accuracy: 42.94%
train set accuracy: 99.74%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 52%|█████▏    | 26/50 [03:43&lt;04:53, 12.24s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 40.05%
test set accuracy: 40.45%
train set accuracy: 99.31%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 54%|█████▍    | 27/50 [03:57&lt;04:54, 12.81s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 43.81%
test set accuracy: 43.76%
train set accuracy: 99.57%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 56%|█████▌    | 28/50 [04:11&lt;04:51, 13.24s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 41.94%
test set accuracy: 42.24%
train set accuracy: 98.95%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 58%|█████▊    | 29/50 [04:26&lt;04:49, 13.79s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 41.29%
test set accuracy: 42.16%
train set accuracy: 99.82%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 30/50 [04:42&lt;04:44, 14.24s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 43.28%
test set accuracy: 43.58%
train set accuracy: 99.45%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 62%|██████▏   | 31/50 [04:58&lt;04:42, 14.85s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 41.29%
test set accuracy: 42.22%
train set accuracy: 99.93%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 64%|██████▍   | 32/50 [05:15&lt;04:38, 15.46s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 44.22%
test set accuracy: 44.94%
train set accuracy: 99.48%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 66%|██████▌   | 33/50 [05:32&lt;04:29, 15.84s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 43.57%
test set accuracy: 44.35%
train set accuracy: 98.74%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 68%|██████▊   | 34/50 [05:49&lt;04:21, 16.33s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 42.53%
test set accuracy: 42.91%
train set accuracy: 99.55%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 35/50 [06:07&lt;04:12, 16.85s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 43.60%
test set accuracy: 44.20%
train set accuracy: 99.13%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 72%|███████▏  | 36/50 [06:26&lt;04:02, 17.32s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.06%
test set accuracy: 46.16%
train set accuracy: 99.91%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 74%|███████▍  | 37/50 [06:44&lt;03:50, 17.74s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 44.80%
test set accuracy: 45.64%
train set accuracy: 99.23%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 76%|███████▌  | 38/50 [07:03&lt;03:37, 18.15s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 42.77%
test set accuracy: 43.78%
train set accuracy: 99.85%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 78%|███████▊  | 39/50 [07:23&lt;03:24, 18.62s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.19%
test set accuracy: 45.91%
train set accuracy: 99.78%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 40/50 [07:43&lt;03:09, 18.99s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.17%
test set accuracy: 47.22%
train set accuracy: 99.92%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 82%|████████▏ | 41/50 [08:04&lt;02:55, 19.52s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.44%
test set accuracy: 46.54%
train set accuracy: 99.55%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 84%|████████▍ | 42/50 [08:24&lt;02:38, 19.87s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.56%
test set accuracy: 46.45%
train set accuracy: 99.88%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 86%|████████▌ | 43/50 [08:46&lt;02:22, 20.34s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.21%
test set accuracy: 46.16%
train set accuracy: 98.98%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 88%|████████▊ | 44/50 [09:08&lt;02:05, 20.86s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 43.86%
test set accuracy: 44.58%
train set accuracy: 99.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 45/50 [09:31&lt;01:47, 21.52s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.94%
test set accuracy: 46.47%
train set accuracy: 99.35%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 92%|█████████▏| 46/50 [09:54&lt;01:27, 21.89s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.94%
test set accuracy: 47.50%
train set accuracy: 99.91%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 94%|█████████▍| 47/50 [10:17&lt;01:06, 22.31s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.90%
test set accuracy: 48.71%
train set accuracy: 99.84%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 96%|█████████▌| 48/50 [10:41&lt;00:45, 22.75s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.50%
test set accuracy: 48.06%
train set accuracy: 99.67%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 98%|█████████▊| 49/50 [11:06&lt;00:23, 23.58s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.27%
test set accuracy: 48.16%
train set accuracy: 99.85%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 50/50 [11:31&lt;00:00, 13.84s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.33%
test set accuracy: 48.04%
train set accuracy: 98.82%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.44%
test set accuracy: 48.17%
train length:  torch.Size([6000]) pool lenght:  torch.Size([34000])</code></pre>
</div>
</div>
</section>
<section id="random-acquistion-strategy" class="level2">
<h2 class="anchored" data-anchor-id="random-acquistion-strategy">Random acquistion Strategy</h2>
<div id="cell-57" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb174" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb174-1">acquisition <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> UniformRandomAcquisition()</span>
<span id="cb174-2">strategy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomStrategy(acquisition, X, y)</span>
<span id="cb174-3"></span>
<span id="cb174-4">seeds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb174-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> seed <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> seeds: </span>
<span id="cb174-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(strategy.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__class__</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' For seed: '</span>, seed, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' ----------------------------------------- '</span>)</span>
<span id="cb174-7">    n_query_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb174-8">    num_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span> </span>
<span id="cb174-9">    torch.manual_seed(seed)</span>
<span id="cb174-10">    a, b, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AL_loop(train_idx, pool_idx, strategy, acquisition, n_query_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_query_samples, num_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_iter)</span>
<span id="cb174-11">    accuracy_AL_list[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_1000_pool_query_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n_query_samples<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_iter_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_iter<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>strategy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__class__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_seed_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>seed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a</span>
<span id="cb174-12">    accuracy_summary[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_1000_pool_query_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n_query_samples<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_iter_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_iter<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>strategy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__class__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_seed_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>seed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b </span>
<span id="cb174-13">    class_count_dict[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_1000_pool_query_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n_query_samples<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_iter_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_iter<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>strategy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__class__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_seed_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>seed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>RandomStrategy  For seed:  0  ----------------------------------------- </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 0/50 [00:00&lt;?, ?it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>train set accuracy: 99.90%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  2%|▏         | 1/50 [00:03&lt;03:07,  3.82s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 36.75%
test set accuracy: 37.28%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  4%|▍         | 2/50 [00:07&lt;03:03,  3.82s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 37.13%
test set accuracy: 36.95%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  6%|▌         | 3/50 [00:11&lt;03:07,  4.00s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 37.36%
test set accuracy: 37.30%
train set accuracy: 99.31%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  8%|▊         | 4/50 [00:16&lt;03:14,  4.22s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 36.82%
test set accuracy: 36.89%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 5/50 [00:21&lt;03:16,  4.38s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 39.26%
test set accuracy: 39.49%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 12%|█▏        | 6/50 [00:26&lt;03:22,  4.60s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 40.21%
test set accuracy: 40.17%
train set accuracy: 99.94%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 14%|█▍        | 7/50 [00:31&lt;03:29,  4.88s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 40.04%
test set accuracy: 40.26%
train set accuracy: 98.94%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 16%|█▌        | 8/50 [00:37&lt;03:38,  5.19s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 38.73%
test set accuracy: 38.51%
train set accuracy: 99.11%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 18%|█▊        | 9/50 [00:43&lt;03:46,  5.52s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 39.41%
test set accuracy: 39.38%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 10/50 [00:49&lt;03:49,  5.74s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 41.66%
test set accuracy: 40.93%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 22%|██▏       | 11/50 [00:56&lt;03:54,  6.02s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 40.68%
test set accuracy: 41.06%
train set accuracy: 99.33%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 24%|██▍       | 12/50 [01:03&lt;04:00,  6.33s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 40.79%
test set accuracy: 40.35%
train set accuracy: 99.41%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 26%|██▌       | 13/50 [01:11&lt;04:06,  6.67s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 41.95%
test set accuracy: 42.38%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 28%|██▊       | 14/50 [01:18&lt;04:08,  6.91s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 43.02%
test set accuracy: 42.95%
train set accuracy: 99.79%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 15/50 [01:26&lt;04:10,  7.15s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 42.26%
test set accuracy: 41.33%
train set accuracy: 99.08%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 32%|███▏      | 16/50 [01:34&lt;04:11,  7.40s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 42.47%
test set accuracy: 42.95%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 34%|███▍      | 17/50 [01:42&lt;04:14,  7.72s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.05%
test set accuracy: 44.65%
train set accuracy: 99.15%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 36%|███▌      | 18/50 [01:51&lt;04:18,  8.07s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 43.83%
test set accuracy: 43.52%
train set accuracy: 96.46%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 38%|███▊      | 19/50 [02:00&lt;04:17,  8.32s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 40.97%
test set accuracy: 40.78%
train set accuracy: 98.07%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 20/50 [02:09&lt;04:18,  8.62s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 42.18%
test set accuracy: 42.10%
train set accuracy: 96.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 42%|████▏     | 21/50 [02:19&lt;04:21,  9.01s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 42.37%
test set accuracy: 42.40%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 44%|████▍     | 22/50 [02:29&lt;04:22,  9.39s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.65%
test set accuracy: 45.89%
train set accuracy: 99.66%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 46%|████▌     | 23/50 [02:40&lt;04:20,  9.65s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.22%
test set accuracy: 45.42%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 48%|████▊     | 24/50 [02:50&lt;04:19,  9.97s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.08%
test set accuracy: 46.19%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 25/50 [03:02&lt;04:19, 10.39s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.51%
test set accuracy: 45.74%
train set accuracy: 99.69%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 52%|█████▏    | 26/50 [03:14&lt;04:18, 10.79s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.97%
test set accuracy: 45.96%
train set accuracy: 99.97%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 54%|█████▍    | 27/50 [03:26&lt;04:18, 11.24s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.10%
test set accuracy: 46.11%
train set accuracy: 99.68%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 56%|█████▌    | 28/50 [03:38&lt;04:16, 11.65s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.29%
test set accuracy: 45.72%
train set accuracy: 99.87%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 58%|█████▊    | 29/50 [03:52&lt;04:14, 12.10s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.46%
test set accuracy: 47.24%
train set accuracy: 99.69%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 30/50 [04:05&lt;04:11, 12.60s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.62%
test set accuracy: 46.11%
train set accuracy: 99.95%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 62%|██████▏   | 31/50 [04:20&lt;04:08, 13.08s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.58%
test set accuracy: 47.62%
train set accuracy: 96.80%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 64%|██████▍   | 32/50 [04:34&lt;04:04, 13.59s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.16%
test set accuracy: 46.98%
train set accuracy: 98.36%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 66%|██████▌   | 33/50 [04:49&lt;03:57, 13.97s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.82%
test set accuracy: 46.95%
train set accuracy: 99.21%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 68%|██████▊   | 34/50 [05:04&lt;03:49, 14.35s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.16%
test set accuracy: 46.65%
train set accuracy: 97.61%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 35/50 [05:20&lt;03:42, 14.81s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.40%
test set accuracy: 45.27%
train set accuracy: 99.71%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 72%|███████▏  | 36/50 [05:37&lt;03:33, 15.27s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.11%
test set accuracy: 47.45%
train set accuracy: 99.57%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 74%|███████▍  | 37/50 [05:53&lt;03:22, 15.59s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.18%
test set accuracy: 47.20%
train set accuracy: 99.70%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 76%|███████▌  | 38/50 [06:10&lt;03:12, 16.02s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.92%
test set accuracy: 47.90%
train set accuracy: 99.23%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 78%|███████▊  | 39/50 [06:27&lt;03:00, 16.45s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.92%
test set accuracy: 47.75%
train set accuracy: 99.12%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 40/50 [06:45&lt;02:49, 16.91s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.58%
test set accuracy: 48.38%
train set accuracy: 99.32%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 82%|████████▏ | 41/50 [07:04&lt;02:35, 17.32s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.11%
test set accuracy: 48.56%
train set accuracy: 98.16%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 84%|████████▍ | 42/50 [07:22&lt;02:20, 17.60s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.28%
test set accuracy: 47.16%
train set accuracy: 99.60%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 86%|████████▌ | 43/50 [07:41&lt;02:05, 17.93s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 49.05%
test set accuracy: 48.90%
train set accuracy: 98.83%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 88%|████████▊ | 44/50 [08:00&lt;01:49, 18.31s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.64%
test set accuracy: 48.23%
train set accuracy: 99.31%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 45/50 [08:20&lt;01:33, 18.73s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.98%
test set accuracy: 48.22%
train set accuracy: 98.73%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 92%|█████████▏| 46/50 [08:40&lt;01:16, 19.11s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 49.87%
test set accuracy: 49.91%
train set accuracy: 99.61%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 94%|█████████▍| 47/50 [09:00&lt;00:58, 19.45s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 49.80%
test set accuracy: 50.30%
train set accuracy: 98.74%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 96%|█████████▌| 48/50 [09:21&lt;00:39, 19.84s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 49.02%
test set accuracy: 48.50%
train set accuracy: 99.22%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 98%|█████████▊| 49/50 [09:42&lt;00:20, 20.32s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 50.22%
test set accuracy: 50.20%
train set accuracy: 99.39%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 50/50 [10:04&lt;00:00, 12.09s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 50.98%
test set accuracy: 50.98%
train set accuracy: 98.63%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 50.91%
test set accuracy: 50.92%
train length:  torch.Size([6000]) pool lenght:  torch.Size([34000])
RandomStrategy  For seed:  1  ----------------------------------------- </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 0/50 [00:00&lt;?, ?it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  2%|▏         | 1/50 [00:04&lt;03:24,  4.18s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 35.72%
test set accuracy: 36.41%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  4%|▍         | 2/50 [00:08&lt;03:34,  4.47s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 37.39%
test set accuracy: 37.40%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  6%|▌         | 3/50 [00:14&lt;03:44,  4.78s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 37.63%
test set accuracy: 37.96%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  8%|▊         | 4/50 [00:19&lt;03:55,  5.11s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 38.02%
test set accuracy: 37.73%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 5/50 [00:25&lt;03:57,  5.27s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 39.50%
test set accuracy: 39.06%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 12%|█▏        | 6/50 [00:31&lt;04:03,  5.53s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 39.78%
test set accuracy: 40.08%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 14%|█▍        | 7/50 [00:37&lt;04:11,  5.84s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 39.65%
test set accuracy: 39.60%
train set accuracy: 99.88%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 16%|█▌        | 8/50 [00:44&lt;04:19,  6.18s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 40.05%
test set accuracy: 39.87%
train set accuracy: 99.06%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 18%|█▊        | 9/50 [00:52&lt;04:29,  6.57s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 39.13%
test set accuracy: 39.77%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 10/50 [00:59&lt;04:33,  6.84s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 41.85%
test set accuracy: 41.67%
train set accuracy: 98.55%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 22%|██▏       | 11/50 [01:07&lt;04:39,  7.17s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 39.45%
test set accuracy: 39.88%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 24%|██▍       | 12/50 [01:15&lt;04:46,  7.53s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 42.06%
test set accuracy: 41.87%
train set accuracy: 98.32%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 26%|██▌       | 13/50 [01:24&lt;04:53,  7.93s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 40.48%
test set accuracy: 40.22%
train set accuracy: 99.61%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 28%|██▊       | 14/50 [01:33&lt;04:54,  8.19s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 40.97%
test set accuracy: 41.18%
train set accuracy: 99.79%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 15/50 [01:42&lt;04:57,  8.51s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 41.43%
test set accuracy: 42.19%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 32%|███▏      | 16/50 [01:52&lt;05:01,  8.87s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 42.32%
test set accuracy: 41.87%
train set accuracy: 99.85%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 34%|███▍      | 17/50 [02:02&lt;05:05,  9.26s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 42.32%
test set accuracy: 42.17%
train set accuracy: 99.96%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 36%|███▌      | 18/50 [02:12&lt;05:07,  9.62s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 44.04%
test set accuracy: 44.11%
train set accuracy: 99.96%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 38%|███▊      | 19/50 [02:23&lt;05:07,  9.92s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 43.93%
test set accuracy: 43.18%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 20/50 [02:34&lt;05:09, 10.31s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 44.38%
test set accuracy: 44.37%
train set accuracy: 99.70%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 42%|████▏     | 21/50 [02:46&lt;05:09, 10.68s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 43.96%
test set accuracy: 43.90%
train set accuracy: 99.45%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 44%|████▍     | 22/50 [02:58&lt;05:11, 11.11s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 43.47%
test set accuracy: 42.73%
train set accuracy: 99.19%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 46%|████▌     | 23/50 [03:10&lt;05:06, 11.35s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 43.23%
test set accuracy: 43.10%
train set accuracy: 99.73%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 48%|████▊     | 24/50 [03:22&lt;05:04, 11.70s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 43.74%
test set accuracy: 43.37%
train set accuracy: 99.47%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 25/50 [03:35&lt;05:01, 12.08s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 43.39%
test set accuracy: 43.78%
train set accuracy: 99.83%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 52%|█████▏    | 26/50 [03:49&lt;04:58, 12.45s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.58%
test set accuracy: 45.03%
train set accuracy: 96.89%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 54%|█████▍    | 27/50 [04:02&lt;04:55, 12.85s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 44.22%
test set accuracy: 44.20%
train set accuracy: 99.97%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 56%|█████▌    | 28/50 [04:16&lt;04:49, 13.17s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.64%
test set accuracy: 46.04%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 58%|█████▊    | 29/50 [04:31&lt;04:44, 13.54s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.92%
test set accuracy: 46.88%
train set accuracy: 97.67%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 30/50 [04:46&lt;04:38, 13.92s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 44.22%
test set accuracy: 45.09%
train set accuracy: 99.93%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 62%|██████▏   | 31/50 [05:01&lt;04:31, 14.31s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.12%
test set accuracy: 47.29%
train set accuracy: 98.61%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 64%|██████▍   | 32/50 [05:16&lt;04:24, 14.71s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.78%
test set accuracy: 46.44%
train set accuracy: 99.88%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 66%|██████▌   | 33/50 [05:32&lt;04:13, 14.93s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.82%
test set accuracy: 46.79%
train set accuracy: 99.14%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 68%|██████▊   | 34/50 [05:48&lt;04:04, 15.30s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.20%
test set accuracy: 46.61%
train set accuracy: 99.68%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 35/50 [06:05&lt;03:55, 15.69s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.55%
test set accuracy: 47.23%
train set accuracy: 99.53%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 72%|███████▏  | 36/50 [06:22&lt;03:45, 16.09s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.96%
test set accuracy: 47.06%
train set accuracy: 99.26%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 74%|███████▍  | 37/50 [06:39&lt;03:32, 16.36s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.62%
test set accuracy: 46.71%
train set accuracy: 99.04%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 76%|███████▌  | 38/50 [06:56&lt;03:20, 16.69s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.56%
test set accuracy: 46.51%
train set accuracy: 98.42%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 78%|███████▊  | 39/50 [07:14&lt;03:08, 17.10s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.53%
test set accuracy: 48.99%
train set accuracy: 99.96%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 40/50 [07:33&lt;02:55, 17.51s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.66%
test set accuracy: 48.12%
train set accuracy: 99.06%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 82%|████████▏ | 41/50 [07:51&lt;02:41, 17.91s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.45%
test set accuracy: 48.01%
train set accuracy: 99.55%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 84%|████████▍ | 42/50 [08:10&lt;02:25, 18.15s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.75%
test set accuracy: 47.28%
train set accuracy: 98.94%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 86%|████████▌ | 43/50 [08:29&lt;02:09, 18.49s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.38%
test set accuracy: 48.28%
train set accuracy: 99.02%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 88%|████████▊ | 44/50 [08:49&lt;01:53, 18.84s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.15%
test set accuracy: 47.45%
train set accuracy: 99.15%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 45/50 [09:09&lt;01:36, 19.27s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.05%
test set accuracy: 48.33%
train set accuracy: 99.93%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 92%|█████████▏| 46/50 [09:30&lt;01:18, 19.56s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 49.98%
test set accuracy: 49.54%
train set accuracy: 99.30%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 94%|█████████▍| 47/50 [09:50&lt;00:59, 19.87s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.43%
test set accuracy: 47.73%
train set accuracy: 98.98%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 96%|█████████▌| 48/50 [10:11&lt;00:40, 20.21s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.38%
test set accuracy: 49.05%
train set accuracy: 99.21%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 98%|█████████▊| 49/50 [10:33&lt;00:20, 20.59s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.79%
test set accuracy: 49.01%
train set accuracy: 99.51%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 50/50 [10:55&lt;00:00, 13.11s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 50.57%
test set accuracy: 50.98%
train set accuracy: 98.67%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 50.54%
test set accuracy: 50.91%
train length:  torch.Size([6000]) pool lenght:  torch.Size([34000])
RandomStrategy  For seed:  2  ----------------------------------------- </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 0/50 [00:00&lt;?, ?it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  2%|▏         | 1/50 [00:04&lt;03:27,  4.23s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 37.07%
test set accuracy: 36.98%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  4%|▍         | 2/50 [00:08&lt;03:36,  4.51s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 36.33%
test set accuracy: 36.39%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  6%|▌         | 3/50 [00:14&lt;03:45,  4.80s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 37.08%
test set accuracy: 37.59%
train set accuracy: 99.62%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  8%|▊         | 4/50 [00:19&lt;03:55,  5.12s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 36.81%
test set accuracy: 36.99%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 5/50 [00:25&lt;03:56,  5.26s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 38.37%
test set accuracy: 38.68%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 12%|█▏        | 6/50 [00:31&lt;04:03,  5.53s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 38.73%
test set accuracy: 39.20%
train set accuracy: 99.44%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 14%|█▍        | 7/50 [00:37&lt;04:10,  5.84s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 38.01%
test set accuracy: 37.38%
train set accuracy: 99.35%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 16%|█▌        | 8/50 [00:44&lt;04:20,  6.20s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 38.35%
test set accuracy: 38.17%
train set accuracy: 99.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 18%|█▊        | 9/50 [00:52&lt;04:28,  6.55s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 39.31%
test set accuracy: 39.16%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 10/50 [00:59&lt;04:32,  6.80s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 40.93%
test set accuracy: 41.33%
train set accuracy: 96.60%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 22%|██▏       | 11/50 [01:07&lt;04:39,  7.18s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 39.05%
test set accuracy: 39.37%
train set accuracy: 99.14%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 24%|██▍       | 12/50 [01:15&lt;04:46,  7.54s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 40.25%
test set accuracy: 40.12%
train set accuracy: 99.68%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 26%|██▌       | 13/50 [01:24&lt;04:54,  7.95s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 41.62%
test set accuracy: 41.22%
train set accuracy: 99.09%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 28%|██▊       | 14/50 [01:33&lt;04:56,  8.24s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 40.56%
test set accuracy: 40.86%
train set accuracy: 99.96%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 15/50 [01:42&lt;04:58,  8.54s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 42.18%
test set accuracy: 42.26%
train set accuracy: 99.56%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 32%|███▏      | 16/50 [01:52&lt;05:02,  8.89s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 43.10%
test set accuracy: 43.32%
train set accuracy: 98.46%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 34%|███▍      | 17/50 [02:02&lt;05:06,  9.28s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 41.04%
test set accuracy: 41.33%
train set accuracy: 99.81%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 36%|███▌      | 18/50 [02:13&lt;05:08,  9.64s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 43.68%
test set accuracy: 43.55%
train set accuracy: 99.96%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 38%|███▊      | 19/50 [02:23&lt;05:07,  9.92s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 43.65%
test set accuracy: 43.53%
train set accuracy: 99.28%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 20/50 [02:34&lt;05:06, 10.22s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 42.56%
test set accuracy: 43.53%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 42%|████▏     | 21/50 [02:46&lt;05:08, 10.62s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.20%
test set accuracy: 45.12%
train set accuracy: 99.52%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 44%|████▍     | 22/50 [02:58&lt;05:09, 11.05s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 44.52%
test set accuracy: 44.42%
train set accuracy: 99.88%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 46%|████▌     | 23/50 [03:10&lt;05:05, 11.32s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 44.88%
test set accuracy: 45.14%
train set accuracy: 98.61%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 48%|████▊     | 24/50 [03:22&lt;05:02, 11.63s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 43.54%
test set accuracy: 43.58%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 25/50 [03:35&lt;04:59, 12.00s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.71%
test set accuracy: 46.47%
train set accuracy: 99.69%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 52%|█████▏    | 26/50 [03:48&lt;04:56, 12.37s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.08%
test set accuracy: 45.17%
train set accuracy: 99.19%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 54%|█████▍    | 27/50 [04:02&lt;04:53, 12.75s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.53%
test set accuracy: 46.11%
train set accuracy: 99.46%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 56%|█████▌    | 28/50 [04:16&lt;04:47, 13.06s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.35%
test set accuracy: 45.52%
train set accuracy: 99.87%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 58%|█████▊    | 29/50 [04:30&lt;04:42, 13.44s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.80%
test set accuracy: 47.13%
train set accuracy: 99.08%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 30/50 [04:45&lt;04:36, 13.83s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.27%
test set accuracy: 46.46%
train set accuracy: 99.38%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 62%|██████▏   | 31/50 [05:00&lt;04:30, 14.25s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.46%
test set accuracy: 47.09%
train set accuracy: 95.15%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 64%|██████▍   | 32/50 [05:15&lt;04:23, 14.64s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.45%
test set accuracy: 46.71%
train set accuracy: 99.43%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 66%|██████▌   | 33/50 [05:31&lt;04:13, 14.91s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.03%
test set accuracy: 47.15%
train set accuracy: 98.63%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 68%|██████▊   | 34/50 [05:47&lt;04:03, 15.23s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.75%
test set accuracy: 45.94%
train set accuracy: 98.41%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 35/50 [06:04&lt;03:54, 15.66s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.16%
test set accuracy: 47.42%
train set accuracy: 99.53%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 72%|███████▏  | 36/50 [06:21&lt;03:45, 16.08s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.53%
test set accuracy: 47.82%
train set accuracy: 99.13%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 74%|███████▍  | 37/50 [06:38&lt;03:33, 16.39s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.05%
test set accuracy: 47.92%
train set accuracy: 99.26%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 76%|███████▌  | 38/50 [06:55&lt;03:20, 16.70s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.91%
test set accuracy: 47.00%
train set accuracy: 99.52%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 78%|███████▊  | 39/50 [07:13&lt;03:07, 17.07s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.27%
test set accuracy: 46.81%
train set accuracy: 99.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 40/50 [07:31&lt;02:54, 17.44s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.35%
test set accuracy: 48.15%
train set accuracy: 97.28%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 82%|████████▏ | 41/50 [07:50&lt;02:41, 17.90s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.87%
test set accuracy: 48.11%
train set accuracy: 98.92%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 84%|████████▍ | 42/50 [08:10&lt;02:26, 18.30s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 49.28%
test set accuracy: 48.49%
train set accuracy: 99.60%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 86%|████████▌ | 43/50 [08:29&lt;02:10, 18.62s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 49.51%
test set accuracy: 49.32%
train set accuracy: 99.32%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 88%|████████▊ | 44/50 [08:49&lt;01:53, 18.95s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.38%
test set accuracy: 48.70%
train set accuracy: 99.61%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 45/50 [09:09&lt;01:36, 19.33s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 49.62%
test set accuracy: 49.55%
train set accuracy: 99.64%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 92%|█████████▏| 46/50 [09:29&lt;01:18, 19.61s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.61%
test set accuracy: 48.56%
train set accuracy: 98.88%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 94%|█████████▍| 47/50 [09:50&lt;00:59, 19.94s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.15%
test set accuracy: 48.02%
train set accuracy: 99.18%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 96%|█████████▌| 48/50 [10:11&lt;00:40, 20.20s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 50.68%
test set accuracy: 50.92%
train set accuracy: 98.97%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 98%|█████████▊| 49/50 [10:32&lt;00:20, 20.52s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 50.27%
test set accuracy: 51.03%
train set accuracy: 99.80%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 50/50 [10:54&lt;00:00, 13.09s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 50.67%
test set accuracy: 51.59%
train set accuracy: 98.83%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 50.75%
test set accuracy: 51.61%
train length:  torch.Size([6000]) pool lenght:  torch.Size([34000])
RandomStrategy  For seed:  3  ----------------------------------------- </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 0/50 [00:00&lt;?, ?it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>train set accuracy: 99.80%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  2%|▏         | 1/50 [00:04&lt;03:29,  4.28s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 35.89%
test set accuracy: 35.80%
train set accuracy: 99.82%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  4%|▍         | 2/50 [00:09&lt;03:37,  4.54s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 37.30%
test set accuracy: 37.31%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  6%|▌         | 3/50 [00:14&lt;03:46,  4.82s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 36.98%
test set accuracy: 37.20%
train set accuracy: 99.08%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  8%|▊         | 4/50 [00:19&lt;03:55,  5.12s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 37.41%
test set accuracy: 37.72%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 5/50 [00:25&lt;03:58,  5.31s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 38.41%
test set accuracy: 37.81%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 12%|█▏        | 6/50 [00:31&lt;04:05,  5.57s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 38.99%
test set accuracy: 38.59%
train set accuracy: 99.06%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 14%|█▍        | 7/50 [00:37&lt;04:11,  5.86s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 38.25%
test set accuracy: 38.35%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 16%|█▌        | 8/50 [00:44&lt;04:20,  6.20s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 39.57%
test set accuracy: 39.32%
train set accuracy: 97.83%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 18%|█▊        | 9/50 [00:52&lt;04:28,  6.56s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 38.43%
test set accuracy: 38.65%
train set accuracy: 96.53%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 10/50 [00:59&lt;04:32,  6.81s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 39.05%
test set accuracy: 38.99%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 22%|██▏       | 11/50 [01:07&lt;04:37,  7.13s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 40.94%
test set accuracy: 41.22%
train set accuracy: 99.33%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 24%|██▍       | 12/50 [01:15&lt;04:43,  7.47s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 40.68%
test set accuracy: 40.56%
train set accuracy: 99.95%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 26%|██▌       | 13/50 [01:24&lt;04:50,  7.86s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 42.06%
test set accuracy: 42.33%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 28%|██▊       | 14/50 [01:33&lt;04:53,  8.14s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 41.50%
test set accuracy: 42.03%
train set accuracy: 99.83%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 15/50 [01:42&lt;04:55,  8.45s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 41.11%
test set accuracy: 41.32%
train set accuracy: 99.68%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 32%|███▏      | 16/50 [01:52&lt;04:59,  8.82s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 42.66%
test set accuracy: 42.49%
train set accuracy: 99.27%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 34%|███▍      | 17/50 [02:02&lt;05:04,  9.22s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 42.14%
test set accuracy: 42.21%
train set accuracy: 97.74%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 36%|███▌      | 18/50 [02:12&lt;05:08,  9.63s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 41.28%
test set accuracy: 40.80%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 38%|███▊      | 19/50 [02:23&lt;05:07,  9.91s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.58%
test set accuracy: 46.01%
train set accuracy: 98.24%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 20/50 [02:34&lt;05:06, 10.22s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 41.72%
test set accuracy: 42.25%
train set accuracy: 99.67%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 42%|████▏     | 21/50 [02:45&lt;05:07, 10.61s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 42.78%
test set accuracy: 42.68%
train set accuracy: 99.23%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 44%|████▍     | 22/50 [02:57&lt;05:08, 11.00s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 43.62%
test set accuracy: 43.41%
train set accuracy: 98.53%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 46%|████▌     | 23/50 [03:09&lt;05:05, 11.31s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 41.91%
test set accuracy: 41.89%
train set accuracy: 99.94%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 48%|████▊     | 24/50 [03:22&lt;05:03, 11.67s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 44.48%
test set accuracy: 44.77%
train set accuracy: 99.32%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 25/50 [03:35&lt;05:00, 12.03s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 44.60%
test set accuracy: 44.26%
train set accuracy: 99.91%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 52%|█████▏    | 26/50 [03:48&lt;04:56, 12.37s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.16%
test set accuracy: 45.97%
train set accuracy: 99.61%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 54%|█████▍    | 27/50 [04:01&lt;04:52, 12.72s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.07%
test set accuracy: 44.92%
train set accuracy: 99.35%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 56%|█████▌    | 28/50 [04:15&lt;04:46, 13.04s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.71%
test set accuracy: 45.42%
train set accuracy: 99.79%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 58%|█████▊    | 29/50 [04:29&lt;04:40, 13.37s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.21%
test set accuracy: 45.19%
train set accuracy: 99.28%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 30/50 [04:44&lt;04:35, 13.78s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.39%
test set accuracy: 45.01%
train set accuracy: 98.10%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 62%|██████▏   | 31/50 [04:59&lt;04:30, 14.22s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.05%
test set accuracy: 45.19%
train set accuracy: 98.37%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 64%|██████▍   | 32/50 [05:15&lt;04:23, 14.66s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.32%
test set accuracy: 47.18%
train set accuracy: 99.83%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 66%|██████▌   | 33/50 [05:31&lt;04:14, 14.96s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.89%
test set accuracy: 47.47%
train set accuracy: 99.77%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 68%|██████▊   | 34/50 [05:46&lt;04:03, 15.21s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.24%
test set accuracy: 45.42%
train set accuracy: 98.86%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 35/50 [06:03&lt;03:53, 15.55s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.10%
test set accuracy: 45.33%
train set accuracy: 99.47%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 72%|███████▏  | 36/50 [06:20&lt;03:43, 15.99s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.35%
test set accuracy: 47.38%
train set accuracy: 99.80%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 74%|███████▍  | 37/50 [06:37&lt;03:31, 16.30s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.29%
test set accuracy: 47.27%
train set accuracy: 99.45%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 76%|███████▌  | 38/50 [06:54&lt;03:19, 16.65s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.19%
test set accuracy: 47.61%
train set accuracy: 98.71%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 78%|███████▊  | 39/50 [07:12&lt;03:07, 17.04s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.17%
test set accuracy: 46.40%
train set accuracy: 99.86%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 40/50 [07:30&lt;02:53, 17.38s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.77%
test set accuracy: 49.12%
train set accuracy: 99.98%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 82%|████████▏ | 41/50 [07:49&lt;02:40, 17.81s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 50.20%
test set accuracy: 50.24%
train set accuracy: 99.53%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 84%|████████▍ | 42/50 [08:08&lt;02:24, 18.10s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.43%
test set accuracy: 47.42%
train set accuracy: 98.56%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 86%|████████▌ | 43/50 [08:27&lt;02:08, 18.43s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.58%
test set accuracy: 47.99%
train set accuracy: 98.85%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 88%|████████▊ | 44/50 [08:47&lt;01:52, 18.78s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.15%
test set accuracy: 47.79%
train set accuracy: 98.65%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 45/50 [09:07&lt;01:35, 19.17s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.90%
test set accuracy: 48.65%
train set accuracy: 99.02%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 92%|█████████▏| 46/50 [09:27&lt;01:17, 19.47s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.53%
test set accuracy: 48.22%
train set accuracy: 99.57%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 94%|█████████▍| 47/50 [09:48&lt;00:59, 19.88s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 49.10%
test set accuracy: 48.96%
train set accuracy: 98.89%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 96%|█████████▌| 48/50 [10:09&lt;00:40, 20.20s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 50.22%
test set accuracy: 50.13%
train set accuracy: 99.76%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 98%|█████████▊| 49/50 [10:30&lt;00:20, 20.56s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 50.31%
test set accuracy: 50.01%
train set accuracy: 98.97%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 50/50 [10:52&lt;00:00, 13.05s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 50.53%
test set accuracy: 49.58%
train set accuracy: 98.03%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 50.60%
test set accuracy: 49.55%
train length:  torch.Size([6000]) pool lenght:  torch.Size([34000])
RandomStrategy  For seed:  4  ----------------------------------------- </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  0%|          | 0/50 [00:00&lt;?, ?it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  2%|▏         | 1/50 [00:04&lt;03:30,  4.30s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 37.15%
test set accuracy: 37.13%
train set accuracy: 98.73%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  4%|▍         | 2/50 [00:09&lt;03:37,  4.54s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 35.28%
test set accuracy: 35.24%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  6%|▌         | 3/50 [00:14&lt;03:45,  4.80s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 39.10%
test set accuracy: 39.35%
train set accuracy: 97.69%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  8%|▊         | 4/50 [00:19&lt;03:53,  5.08s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 36.62%
test set accuracy: 35.85%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 10%|█         | 5/50 [00:25&lt;03:56,  5.25s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 38.76%
test set accuracy: 39.25%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 12%|█▏        | 6/50 [00:31&lt;04:02,  5.52s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 39.26%
test set accuracy: 38.87%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 14%|█▍        | 7/50 [00:37&lt;04:11,  5.84s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 39.17%
test set accuracy: 39.69%
train set accuracy: 99.59%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 16%|█▌        | 8/50 [00:44&lt;04:19,  6.18s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 39.60%
test set accuracy: 39.82%
train set accuracy: 96.50%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 18%|█▊        | 9/50 [00:51&lt;04:28,  6.55s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 38.41%
test set accuracy: 38.51%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 20%|██        | 10/50 [00:59&lt;04:31,  6.79s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 40.59%
test set accuracy: 41.12%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 22%|██▏       | 11/50 [01:07&lt;04:38,  7.13s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 41.53%
test set accuracy: 41.60%
train set accuracy: 99.67%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 24%|██▍       | 12/50 [01:15&lt;04:44,  7.48s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 40.49%
test set accuracy: 40.06%
train set accuracy: 99.95%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 26%|██▌       | 13/50 [01:24&lt;04:49,  7.84s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 41.60%
test set accuracy: 41.17%
train set accuracy: 99.52%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 28%|██▊       | 14/50 [01:32&lt;04:51,  8.10s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 40.09%
test set accuracy: 40.39%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 30%|███       | 15/50 [01:42&lt;04:55,  8.43s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 42.34%
test set accuracy: 42.35%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 32%|███▏      | 16/50 [01:51&lt;05:00,  8.82s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 41.83%
test set accuracy: 42.60%
train set accuracy: 99.46%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 34%|███▍      | 17/50 [02:01&lt;05:04,  9.23s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 42.99%
test set accuracy: 42.93%
train set accuracy: 98.26%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 36%|███▌      | 18/50 [02:12&lt;05:08,  9.63s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 41.61%
test set accuracy: 41.24%
train set accuracy: 99.96%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 38%|███▊      | 19/50 [02:23&lt;05:07,  9.92s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 42.74%
test set accuracy: 43.03%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 40%|████      | 20/50 [02:34&lt;05:06, 10.21s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 43.67%
test set accuracy: 43.20%
train set accuracy: 100.00%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 42%|████▏     | 21/50 [02:45&lt;05:06, 10.56s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 44.78%
test set accuracy: 45.42%
train set accuracy: 99.74%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 44%|████▍     | 22/50 [02:57&lt;05:05, 10.93s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 43.89%
test set accuracy: 43.42%
train set accuracy: 99.72%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 46%|████▌     | 23/50 [03:08&lt;05:01, 11.18s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 42.16%
test set accuracy: 42.58%
train set accuracy: 99.97%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 48%|████▊     | 24/50 [03:21&lt;05:00, 11.55s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 44.74%
test set accuracy: 44.31%
train set accuracy: 99.53%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 50%|█████     | 25/50 [03:34&lt;04:58, 11.93s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 44.83%
test set accuracy: 44.15%
train set accuracy: 99.83%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 52%|█████▏    | 26/50 [03:47&lt;04:55, 12.33s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 44.77%
test set accuracy: 44.92%
train set accuracy: 99.72%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 54%|█████▍    | 27/50 [04:00&lt;04:52, 12.70s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.96%
test set accuracy: 46.24%
train set accuracy: 98.95%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 56%|█████▌    | 28/50 [04:14&lt;04:45, 12.98s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 43.96%
test set accuracy: 43.83%
train set accuracy: 99.47%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 58%|█████▊    | 29/50 [04:28&lt;04:39, 13.32s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.95%
test set accuracy: 46.07%
train set accuracy: 99.87%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 60%|██████    | 30/50 [04:43&lt;04:34, 13.71s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 46.82%
test set accuracy: 46.68%
train set accuracy: 99.18%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 62%|██████▏   | 31/50 [04:58&lt;04:29, 14.18s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.98%
test set accuracy: 45.68%
train set accuracy: 98.71%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 64%|██████▍   | 32/50 [05:14&lt;04:22, 14.60s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.79%
test set accuracy: 45.53%
train set accuracy: 99.33%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 66%|██████▌   | 33/50 [05:29&lt;04:13, 14.91s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.30%
test set accuracy: 46.70%
train set accuracy: 97.79%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 68%|██████▊   | 34/50 [05:45&lt;04:03, 15.21s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.08%
test set accuracy: 44.92%
train set accuracy: 99.11%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 70%|███████   | 35/50 [06:01&lt;03:52, 15.52s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 45.37%
test set accuracy: 45.58%
train set accuracy: 99.98%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 72%|███████▏  | 36/50 [06:18&lt;03:42, 15.87s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.57%
test set accuracy: 47.87%
train set accuracy: 99.59%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 74%|███████▍  | 37/50 [06:35&lt;03:30, 16.20s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.28%
test set accuracy: 48.73%
train set accuracy: 99.94%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 76%|███████▌  | 38/50 [06:53&lt;03:18, 16.58s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.44%
test set accuracy: 47.51%
train set accuracy: 99.35%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 78%|███████▊  | 39/50 [07:10&lt;03:06, 16.97s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.37%
test set accuracy: 48.11%
train set accuracy: 99.82%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 80%|████████  | 40/50 [07:29&lt;02:53, 17.33s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.07%
test set accuracy: 47.68%
train set accuracy: 98.80%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 82%|████████▏ | 41/50 [07:47&lt;02:39, 17.73s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.57%
test set accuracy: 48.01%
train set accuracy: 99.47%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 84%|████████▍ | 42/50 [08:06&lt;02:24, 18.03s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.10%
test set accuracy: 47.86%
train set accuracy: 99.40%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 86%|████████▌ | 43/50 [08:25&lt;02:08, 18.38s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 47.59%
test set accuracy: 47.60%
train set accuracy: 99.74%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 88%|████████▊ | 44/50 [08:45&lt;01:52, 18.75s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.26%
test set accuracy: 48.35%
train set accuracy: 98.04%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 90%|█████████ | 45/50 [09:05&lt;01:35, 19.15s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.60%
test set accuracy: 48.44%
train set accuracy: 99.45%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 92%|█████████▏| 46/50 [09:25&lt;01:17, 19.36s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.88%
test set accuracy: 48.99%
train set accuracy: 99.73%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 94%|█████████▍| 47/50 [09:45&lt;00:59, 19.68s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 48.19%
test set accuracy: 48.47%
train set accuracy: 98.56%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 96%|█████████▌| 48/50 [10:06&lt;00:40, 20.07s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 49.66%
test set accuracy: 49.45%
train set accuracy: 99.72%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 98%|█████████▊| 49/50 [10:28&lt;00:20, 20.44s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 49.89%
test set accuracy: 49.45%
train set accuracy: 99.12%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 50/50 [10:49&lt;00:00, 13.00s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 51.40%
test set accuracy: 50.55%
train set accuracy: 98.27%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pool set accuracy: 51.48%
test set accuracy: 50.55%
train length:  torch.Size([6000]) pool lenght:  torch.Size([34000])</code></pre>
</div>
</div>
<section id="saving-the-metrics" class="level3">
<h3 class="anchored" data-anchor-id="saving-the-metrics">Saving the metrics</h3>
<div id="cell-59" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb696" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb696-1">accuracy_summary </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>{'untrain_acc': {'train': 0.07700000703334808,
  'pool': 0.08366666734218597,
  'test': 0.08579999953508377},
 'train_1000': {'train': 1.0,
  'pool': 0.36056411266326904,
  'test': 0.3624500036239624},
 'train_1000_pool_5000': {'train': 0.9920000433921814,
  'pool': 0.4998205304145813,
  'test': 0.4273499846458435},
 'train_1000_pool_39000': {'train': 0.9960000514984131,
  'pool': 0.994282066822052,
  'test': 0.616100013256073},
 'train_1000_pool_query_100_iter_50_DiversityStrategy_seed_0': {'train': 0.9881666302680969,
  'pool': 0.47435295581817627,
  'test': 0.4817499816417694}}</code></pre>
</div>
</div>
<div id="cell-60" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb698" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb698-1">accuracy_summary</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>{'untrain_acc': {'train': 0.07700000703334808,
  'pool': 0.08366666734218597,
  'test': 0.08579999953508377},
 'train_1000': {'train': 1.0,
  'pool': 0.36056411266326904,
  'test': 0.3624500036239624},
 'train_1000_pool_5000': {'train': 0.9920000433921814,
  'pool': 0.4998205304145813,
  'test': 0.4273499846458435},
 'train_1000_pool_39000': {'train': 0.9960000514984131,
  'pool': 0.994282066822052,
  'test': 0.616100013256073},
 'train_1000_pool_query_100_iter_50_DiversityStrategy_seed_0': {'train': 0.9881666302680969,
  'pool': 0.47435295581817627,
  'test': 0.4817499816417694},
 'train_1000_pool_query_100_iter_50_RandomStrategy_seed_0': {'train': 0.9863333106040955,
  'pool': 0.5091176629066467,
  'test': 0.5091999769210815},
 'train_1000_pool_query_100_iter_50_RandomStrategy_seed_1': {'train': 0.9866666793823242,
  'pool': 0.5054118037223816,
  'test': 0.5090500116348267},
 'train_1000_pool_query_100_iter_50_RandomStrategy_seed_2': {'train': 0.9883333444595337,
  'pool': 0.5074999928474426,
  'test': 0.5161499977111816},
 'train_1000_pool_query_100_iter_50_RandomStrategy_seed_3': {'train': 0.9803333282470703,
  'pool': 0.5059705972671509,
  'test': 0.49549999833106995},
 'train_1000_pool_query_100_iter_50_RandomStrategy_seed_4': {'train': 0.9826666712760925,
  'pool': 0.5147647261619568,
  'test': 0.5054500102996826}}</code></pre>
</div>
</div>
<div id="cell-61" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb700" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb700-1">file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/jaiswalsuraj/suraj_work/ASTRA/notebooks/al/accuracy_summary_with_AL.json"</span></span>
<span id="cb700-2"></span>
<span id="cb700-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with open(file_path, 'w') as json_file:</span></span>
<span id="cb700-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     json.dump(accuracy_summary, json_file)</span></span>
<span id="cb700-5"></span>
<span id="cb700-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"Accuracy summary has been saved to {file_path}.") </span></span>
<span id="cb700-7"></span>
<span id="cb700-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the accuracy summary from the JSON file</span></span>
<span id="cb700-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> json_file:</span>
<span id="cb700-10">    accuracy_summary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(json_file)</span>
<span id="cb700-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Accuracy summary has been loaded from </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>file_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy summary has been loaded from /home/jaiswalsuraj/suraj_work/ASTRA/notebooks/al/accuracy_summary_with_AL.json.</code></pre>
</div>
</div>
<div id="cell-62" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb702" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb702-1">accuracy_AL_list</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>{'train_1000_pool_query_100_iter_50_DiversityStrategy_seed_0': [{'train': 1.0,
   'pool': 0.3618461489677429,
   'test': 0.36434999108314514},
  {'train': 1.0, 'pool': 0.3619794249534607, 'test': 0.3668999969959259},
  {'train': 1.0, 'pool': 0.37159794569015503, 'test': 0.3714499771595001},
  {'train': 0.9953846335411072,
   'pool': 0.364806205034256,
   'test': 0.3671000003814697},
  {'train': 1.0, 'pool': 0.3876684010028839, 'test': 0.3871999979019165},
  {'train': 1.0, 'pool': 0.39098700881004333, 'test': 0.3937999904155731},
  {'train': 1.0, 'pool': 0.39205729961395264, 'test': 0.39089998602867126},
  {'train': 0.9982352256774902,
   'pool': 0.38067886233329773,
   'test': 0.382099986076355},
  {'train': 0.9961111545562744,
   'pool': 0.38900521397590637,
   'test': 0.3938499987125397},
  {'train': 0.9999999403953552,
   'pool': 0.397480309009552,
   'test': 0.3989499807357788},
  {'train': 1.0, 'pool': 0.3950789272785187, 'test': 0.3951999843120575},
  {'train': 0.996666669845581,
   'pool': 0.39124009013175964,
   'test': 0.3917499780654907},
  {'train': 1.0, 'pool': 0.4085714519023895, 'test': 0.40915000438690186},
  {'train': 1.0, 'pool': 0.39838194847106934, 'test': 0.3985999822616577},
  {'train': 0.9637500047683716,
   'pool': 0.38851064443588257,
   'test': 0.38464999198913574},
  {'train': 0.9991999864578247,
   'pool': 0.4029066562652588,
   'test': 0.4052499830722809},
  {'train': 0.9546154141426086,
   'pool': 0.4025668501853943,
   'test': 0.4056999981403351},
  {'train': 0.9929629564285278,
   'pool': 0.39745309948921204,
   'test': 0.404449999332428},
  {'train': 0.9960713982582092,
   'pool': 0.39954301714897156,
   'test': 0.4059999883174896},
  {'train': 1.0, 'pool': 0.41716980934143066, 'test': 0.42239999771118164},
  {'train': 0.9996666312217712,
   'pool': 0.41810810565948486,
   'test': 0.42225000262260437},
  {'train': 0.9967742562294006,
   'pool': 0.4106775224208832,
   'test': 0.41999998688697815},
  {'train': 0.9981249570846558,
   'pool': 0.42331522703170776,
   'test': 0.4236999750137329},
  {'train': 0.9900000095367432,
   'pool': 0.3979291319847107,
   'test': 0.4129999876022339},
  {'train': 0.994705855846405,
   'pool': 0.4214754104614258,
   'test': 0.42944997549057007},
  {'train': 0.9974285364151001,
   'pool': 0.40052053332328796,
   'test': 0.4045499861240387},
  {'train': 0.9930555820465088,
   'pool': 0.4380769431591034,
   'test': 0.43764999508857727},
  {'train': 0.9956756830215454,
   'pool': 0.419393926858902,
   'test': 0.4224499762058258},
  {'train': 0.9894736409187317,
   'pool': 0.41287294030189514,
   'test': 0.42159998416900635},
  {'train': 0.9982050657272339,
   'pool': 0.4328254759311676,
   'test': 0.43584999442100525},
  {'train': 0.9945000410079956,
   'pool': 0.4129444360733032,
   'test': 0.4221999943256378},
  {'train': 0.9992682933807373,
   'pool': 0.44217267632484436,
   'test': 0.4493499994277954},
  {'train': 0.9947618842124939,
   'pool': 0.43572625517845154,
   'test': 0.44349998235702515},
  {'train': 0.987441897392273,
   'pool': 0.42532214522361755,
   'test': 0.429099977016449},
  {'train': 0.9954545497894287,
   'pool': 0.4360112249851227,
   'test': 0.4420499801635742},
  {'train': 0.9913333654403687,
   'pool': 0.4505915343761444,
   'test': 0.4615999758243561},
  {'train': 0.9991304278373718,
   'pool': 0.4479943513870239,
   'test': 0.4564499855041504},
  {'train': 0.9923403859138489,
   'pool': 0.4277053773403168,
   'test': 0.4378499984741211},
  {'train': 0.9985417127609253,
   'pool': 0.45193183422088623,
   'test': 0.4591499865055084},
  {'train': 0.9977551102638245,
   'pool': 0.4616524279117584,
   'test': 0.4721499979496002},
  {'train': 0.9991999864578247,
   'pool': 0.4643999934196472,
   'test': 0.46539998054504395},
  {'train': 0.9954901933670044,
   'pool': 0.4556446969509125,
   'test': 0.4645499885082245},
  {'train': 0.998846173286438,
   'pool': 0.4521264433860779,
   'test': 0.4615999758243561},
  {'train': 0.9898113012313843,
   'pool': 0.43855908513069153,
   'test': 0.44579997658729553},
  {'train': 0.9900000095367432,
   'pool': 0.45942196249961853,
   'test': 0.46469998359680176},
  {'train': 0.9934545159339905,
   'pool': 0.46942028403282166,
   'test': 0.4749999940395355},
  {'train': 0.9991071224212646,
   'pool': 0.4689534902572632,
   'test': 0.4870999753475189},
  {'train': 0.9984210729598999,
   'pool': 0.4750145673751831,
   'test': 0.4806499779224396},
  {'train': 0.9967241883277893,
   'pool': 0.4726608097553253,
   'test': 0.48159998655319214},
  {'train': 0.9984745979309082,
   'pool': 0.4733137786388397,
   'test': 0.4803999960422516},
  {'train': 0.9881666302680969,
   'pool': 0.47435295581817627,
   'test': 0.4817499816417694}]}</code></pre>
</div>
</div>
<div id="cell-63" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb704" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb704-1">accuracy_AL_list</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>{'train_1000_pool_query_100_iter_50_DiversityStrategy_seed_0': [{'train': 1.0,
   'pool': 0.3618461489677429,
   'test': 0.36434999108314514},
  {'train': 1.0, 'pool': 0.3619794249534607, 'test': 0.3668999969959259},
  {'train': 1.0, 'pool': 0.37159794569015503, 'test': 0.3714499771595001},
  {'train': 0.9953846335411072,
   'pool': 0.364806205034256,
   'test': 0.3671000003814697},
  {'train': 1.0, 'pool': 0.3876684010028839, 'test': 0.3871999979019165},
  {'train': 1.0, 'pool': 0.39098700881004333, 'test': 0.3937999904155731},
  {'train': 1.0, 'pool': 0.39205729961395264, 'test': 0.39089998602867126},
  {'train': 0.9982352256774902,
   'pool': 0.38067886233329773,
   'test': 0.382099986076355},
  {'train': 0.9961111545562744,
   'pool': 0.38900521397590637,
   'test': 0.3938499987125397},
  {'train': 0.9999999403953552,
   'pool': 0.397480309009552,
   'test': 0.3989499807357788},
  {'train': 1.0, 'pool': 0.3950789272785187, 'test': 0.3951999843120575},
  {'train': 0.996666669845581,
   'pool': 0.39124009013175964,
   'test': 0.3917499780654907},
  {'train': 1.0, 'pool': 0.4085714519023895, 'test': 0.40915000438690186},
  {'train': 1.0, 'pool': 0.39838194847106934, 'test': 0.3985999822616577},
  {'train': 0.9637500047683716,
   'pool': 0.38851064443588257,
   'test': 0.38464999198913574},
  {'train': 0.9991999864578247,
   'pool': 0.4029066562652588,
   'test': 0.4052499830722809},
  {'train': 0.9546154141426086,
   'pool': 0.4025668501853943,
   'test': 0.4056999981403351},
  {'train': 0.9929629564285278,
   'pool': 0.39745309948921204,
   'test': 0.404449999332428},
  {'train': 0.9960713982582092,
   'pool': 0.39954301714897156,
   'test': 0.4059999883174896},
  {'train': 1.0, 'pool': 0.41716980934143066, 'test': 0.42239999771118164},
  {'train': 0.9996666312217712,
   'pool': 0.41810810565948486,
   'test': 0.42225000262260437},
  {'train': 0.9967742562294006,
   'pool': 0.4106775224208832,
   'test': 0.41999998688697815},
  {'train': 0.9981249570846558,
   'pool': 0.42331522703170776,
   'test': 0.4236999750137329},
  {'train': 0.9900000095367432,
   'pool': 0.3979291319847107,
   'test': 0.4129999876022339},
  {'train': 0.994705855846405,
   'pool': 0.4214754104614258,
   'test': 0.42944997549057007},
  {'train': 0.9974285364151001,
   'pool': 0.40052053332328796,
   'test': 0.4045499861240387},
  {'train': 0.9930555820465088,
   'pool': 0.4380769431591034,
   'test': 0.43764999508857727},
  {'train': 0.9956756830215454,
   'pool': 0.419393926858902,
   'test': 0.4224499762058258},
  {'train': 0.9894736409187317,
   'pool': 0.41287294030189514,
   'test': 0.42159998416900635},
  {'train': 0.9982050657272339,
   'pool': 0.4328254759311676,
   'test': 0.43584999442100525},
  {'train': 0.9945000410079956,
   'pool': 0.4129444360733032,
   'test': 0.4221999943256378},
  {'train': 0.9992682933807373,
   'pool': 0.44217267632484436,
   'test': 0.4493499994277954},
  {'train': 0.9947618842124939,
   'pool': 0.43572625517845154,
   'test': 0.44349998235702515},
  {'train': 0.987441897392273,
   'pool': 0.42532214522361755,
   'test': 0.429099977016449},
  {'train': 0.9954545497894287,
   'pool': 0.4360112249851227,
   'test': 0.4420499801635742},
  {'train': 0.9913333654403687,
   'pool': 0.4505915343761444,
   'test': 0.4615999758243561},
  {'train': 0.9991304278373718,
   'pool': 0.4479943513870239,
   'test': 0.4564499855041504},
  {'train': 0.9923403859138489,
   'pool': 0.4277053773403168,
   'test': 0.4378499984741211},
  {'train': 0.9985417127609253,
   'pool': 0.45193183422088623,
   'test': 0.4591499865055084},
  {'train': 0.9977551102638245,
   'pool': 0.4616524279117584,
   'test': 0.4721499979496002},
  {'train': 0.9991999864578247,
   'pool': 0.4643999934196472,
   'test': 0.46539998054504395},
  {'train': 0.9954901933670044,
   'pool': 0.4556446969509125,
   'test': 0.4645499885082245},
  {'train': 0.998846173286438,
   'pool': 0.4521264433860779,
   'test': 0.4615999758243561},
  {'train': 0.9898113012313843,
   'pool': 0.43855908513069153,
   'test': 0.44579997658729553},
  {'train': 0.9900000095367432,
   'pool': 0.45942196249961853,
   'test': 0.46469998359680176},
  {'train': 0.9934545159339905,
   'pool': 0.46942028403282166,
   'test': 0.4749999940395355},
  {'train': 0.9991071224212646,
   'pool': 0.4689534902572632,
   'test': 0.4870999753475189},
  {'train': 0.9984210729598999,
   'pool': 0.4750145673751831,
   'test': 0.4806499779224396},
  {'train': 0.9967241883277893,
   'pool': 0.4726608097553253,
   'test': 0.48159998655319214},
  {'train': 0.9984745979309082,
   'pool': 0.4733137786388397,
   'test': 0.4803999960422516},
  {'train': 0.9881666302680969,
   'pool': 0.47435295581817627,
   'test': 0.4817499816417694}],
 'train_1000_pool_query_100_iter_50_RandomStrategy_seed_0': [{'train': 0.999000072479248,
   'pool': 0.3675128221511841,
   'test': 0.3728500008583069},
  {'train': 1.0, 'pool': 0.37133675813674927, 'test': 0.36949998140335083},
  {'train': 1.0, 'pool': 0.3735567033290863, 'test': 0.37299999594688416},
  {'train': 0.9930769205093384,
   'pool': 0.36824291944503784,
   'test': 0.36890000104904175},
  {'train': 1.0, 'pool': 0.3925906717777252, 'test': 0.39489999413490295},
  {'train': 1.0, 'pool': 0.40210390090942383, 'test': 0.40174999833106995},
  {'train': 0.9993749856948853,
   'pool': 0.40036460757255554,
   'test': 0.4025999903678894},
  {'train': 0.9894117116928101,
   'pool': 0.3873368203639984,
   'test': 0.38509997725486755},
  {'train': 0.991111159324646,
   'pool': 0.39408376812934875,
   'test': 0.3938499987125397},
  {'train': 0.9999999403953552,
   'pool': 0.4166141748428345,
   'test': 0.4092999994754791},
  {'train': 1.0, 'pool': 0.40684211254119873, 'test': 0.41054999828338623},
  {'train': 0.9933333396911621,
   'pool': 0.40791556239128113,
   'test': 0.4034999907016754},
  {'train': 0.9940909147262573,
   'pool': 0.41952383518218994,
   'test': 0.42374998331069946},
  {'train': 1.0, 'pool': 0.4301856756210327, 'test': 0.4295499920845032},
  {'train': 0.9979166984558105,
   'pool': 0.42260637879371643,
   'test': 0.413349986076355},
  {'train': 0.9907999634742737,
   'pool': 0.42471998929977417,
   'test': 0.4295499920845032},
  {'train': 1.0, 'pool': 0.45048126578330994, 'test': 0.44644999504089355},
  {'train': 0.9914814829826355,
   'pool': 0.4382841885089874,
   'test': 0.4352499842643738},
  {'train': 0.9646428227424622,
   'pool': 0.4097042977809906,
   'test': 0.4078499972820282},
  {'train': 0.9806897044181824,
   'pool': 0.42175203561782837,
   'test': 0.42100000381469727},
  {'train': 0.9599999785423279,
   'pool': 0.42367565631866455,
   'test': 0.42399999499320984},
  {'train': 1.0, 'pool': 0.4565311670303345, 'test': 0.4589499831199646},
  {'train': 0.9965624809265137,
   'pool': 0.45220109820365906,
   'test': 0.4542499780654907},
  {'train': 1.0, 'pool': 0.4608174264431, 'test': 0.461899995803833},
  {'train': 0.9999999403953552,
   'pool': 0.455081969499588,
   'test': 0.45739999413490295},
  {'train': 0.9968571066856384,
   'pool': 0.4596712291240692,
   'test': 0.4596499800682068},
  {'train': 0.9997222423553467,
   'pool': 0.4709615409374237,
   'test': 0.46114999055862427},
  {'train': 0.9967567920684814,
   'pool': 0.46294763684272766,
   'test': 0.45719999074935913},
  {'train': 0.9986841678619385,
   'pool': 0.4745856523513794,
   'test': 0.47244998812675476},
  {'train': 0.99692302942276,
   'pool': 0.46623268723487854,
   'test': 0.4610999822616577},
  {'train': 0.999500036239624,
   'pool': 0.4758055508136749,
   'test': 0.4761999845504761},
  {'train': 0.9680488109588623,
   'pool': 0.47164344787597656,
   'test': 0.46984997391700745},
  {'train': 0.9835714101791382,
   'pool': 0.4681564271450043,
   'test': 0.46949997544288635},
  {'train': 0.992093026638031,
   'pool': 0.47156864404678345,
   'test': 0.46654999256134033},
  {'train': 0.9761363863945007,
   'pool': 0.45396068692207336,
   'test': 0.4526999890804291},
  {'train': 0.9971111416816711,
   'pool': 0.47107040882110596,
   'test': 0.47450000047683716},
  {'train': 0.9956521987915039,
   'pool': 0.47180789709091187,
   'test': 0.47200000286102295},
  {'train': 0.9970212578773499,
   'pool': 0.4791501462459564,
   'test': 0.4790499806404114},
  {'train': 0.9922916889190674,
   'pool': 0.4792329668998718,
   'test': 0.47749999165534973},
  {'train': 0.991224467754364,
   'pool': 0.48575499653816223,
   'test': 0.48374998569488525},
  {'train': 0.9932000041007996,
   'pool': 0.48111429810523987,
   'test': 0.485649973154068},
  {'train': 0.9815686345100403,
   'pool': 0.47280803322792053,
   'test': 0.47164997458457947},
  {'train': 0.9959615468978882,
   'pool': 0.49054598808288574,
   'test': 0.4890500009059906},
  {'train': 0.9883018732070923,
   'pool': 0.4864265024662018,
   'test': 0.4822999835014343},
  {'train': 0.993148148059845,
   'pool': 0.47979769110679626,
   'test': 0.4822499752044678},
  {'train': 0.9872726798057556,
   'pool': 0.49869564175605774,
   'test': 0.499099999666214},
  {'train': 0.9960713982582092,
   'pool': 0.49802327156066895,
   'test': 0.5030499696731567},
  {'train': 0.9873684644699097,
   'pool': 0.4902332127094269,
   'test': 0.48499998450279236},
  {'train': 0.992241382598877,
   'pool': 0.5022221803665161,
   'test': 0.5019999742507935},
  {'train': 0.993898332118988,
   'pool': 0.5097947120666504,
   'test': 0.5098000168800354},
  {'train': 0.9863333106040955,
   'pool': 0.5091176629066467,
   'test': 0.5091999769210815}],
 'train_1000_pool_query_100_iter_50_RandomStrategy_seed_1': [{'train': 1.0,
   'pool': 0.3571794927120209,
   'test': 0.36409997940063477},
  {'train': 1.0, 'pool': 0.37393316626548767, 'test': 0.3739999830722809},
  {'train': 1.0, 'pool': 0.37628865242004395, 'test': 0.37959998846054077},
  {'train': 1.0, 'pool': 0.3801550567150116, 'test': 0.3772999942302704},
  {'train': 1.0, 'pool': 0.39502590894699097, 'test': 0.3906500041484833},
  {'train': 1.0, 'pool': 0.3978441655635834, 'test': 0.40084999799728394},
  {'train': 1.0, 'pool': 0.39645835757255554, 'test': 0.3959999978542328},
  {'train': 0.9988234639167786,
   'pool': 0.4005222022533417,
   'test': 0.398749977350235},
  {'train': 0.9905555844306946,
   'pool': 0.39130887389183044,
   'test': 0.39774999022483826},
  {'train': 0.9999999403953552,
   'pool': 0.41850391030311584,
   'test': 0.41669997572898865},
  {'train': 0.9855000376701355,
   'pool': 0.394473671913147,
   'test': 0.39879998564720154},
  {'train': 1.0, 'pool': 0.4205540716648102, 'test': 0.4186999797821045},
  {'train': 0.9831818342208862,
   'pool': 0.4047619104385376,
   'test': 0.40219998359680176},
  {'train': 0.9960869550704956,
   'pool': 0.40973472595214844,
   'test': 0.41179999709129333},
  {'train': 0.9979166984558105,
   'pool': 0.41430848836898804,
   'test': 0.4219000041484833},
  {'train': 1.0, 'pool': 0.42322665452957153, 'test': 0.4186500012874603},
  {'train': 0.9984615445137024,
   'pool': 0.4232085347175598,
   'test': 0.42170000076293945},
  {'train': 0.9996296167373657,
   'pool': 0.44037532806396484,
   'test': 0.44110000133514404},
  {'train': 0.9996428489685059,
   'pool': 0.439301073551178,
   'test': 0.43184998631477356},
  {'train': 1.0, 'pool': 0.44382748007774353, 'test': 0.44369998574256897},
  {'train': 0.996999979019165,
   'pool': 0.43956756591796875,
   'test': 0.4389999806880951},
  {'train': 0.9945161938667297,
   'pool': 0.4347154498100281,
   'test': 0.42729997634887695},
  {'train': 0.9918749928474426,
   'pool': 0.4323098063468933,
   'test': 0.4309999942779541},
  {'train': 0.9972727298736572,
   'pool': 0.43735694885253906,
   'test': 0.43369999527931213},
  {'train': 0.994705855846405,
   'pool': 0.43393445014953613,
   'test': 0.43779999017715454},
  {'train': 0.998285710811615,
   'pool': 0.4557808041572571,
   'test': 0.45034998655319214},
  {'train': 0.9688889384269714,
   'pool': 0.4421703517436981,
   'test': 0.4420499801635742},
  {'train': 0.9997297525405884,
   'pool': 0.4564187228679657,
   'test': 0.4603999853134155},
  {'train': 0.9999999403953552,
   'pool': 0.46919891238212585,
   'test': 0.4688499867916107},
  {'train': 0.9766666293144226,
   'pool': 0.4421883821487427,
   'test': 0.45089998841285706},
  {'train': 0.999250054359436,
   'pool': 0.4711666703224182,
   'test': 0.4728999733924866},
  {'train': 0.9860975742340088,
   'pool': 0.46779942512512207,
   'test': 0.4643999934196472},
  {'train': 0.9988095164299011,
   'pool': 0.46824023127555847,
   'test': 0.46789997816085815},
  {'train': 0.9913953542709351,
   'pool': 0.46198880672454834,
   'test': 0.4661499857902527},
  {'train': 0.9968181848526001,
   'pool': 0.47550562024116516,
   'test': 0.4722999930381775},
  {'train': 0.9953333735466003,
   'pool': 0.4696337878704071,
   'test': 0.470550000667572},
  {'train': 0.9926087260246277,
   'pool': 0.46621468663215637,
   'test': 0.46709999442100525},
  {'train': 0.9904255270957947,
   'pool': 0.465552419424057,
   'test': 0.46514999866485596},
  {'train': 0.98416668176651,
   'pool': 0.48528409004211426,
   'test': 0.4899500012397766},
  {'train': 0.9995918273925781,
   'pool': 0.4865812063217163,
   'test': 0.48124998807907104},
  {'train': 0.9905999898910522,
   'pool': 0.47451427578926086,
   'test': 0.48009997606277466},
  {'train': 0.9954901933670044,
   'pool': 0.47750717401504517,
   'test': 0.47279998660087585},
  {'train': 0.9894230961799622,
   'pool': 0.4837643802165985,
   'test': 0.4827499985694885},
  {'train': 0.9901886582374573,
   'pool': 0.4715273678302765,
   'test': 0.4745499789714813},
  {'train': 0.9914814829826355,
   'pool': 0.4805491268634796,
   'test': 0.4833499789237976},
  {'train': 0.9992727041244507,
   'pool': 0.4998260736465454,
   'test': 0.49539998173713684},
  {'train': 0.9930356740951538,
   'pool': 0.4843023419380188,
   'test': 0.4772999882698059},
  {'train': 0.9898245930671692,
   'pool': 0.48376092314720154,
   'test': 0.49049997329711914},
  {'train': 0.9920690059661865,
   'pool': 0.48786547780036926,
   'test': 0.49014997482299805},
  {'train': 0.9950847625732422,
   'pool': 0.505659818649292,
   'test': 0.5098499655723572},
  {'train': 0.9866666793823242,
   'pool': 0.5054118037223816,
   'test': 0.5090500116348267}],
 'train_1000_pool_query_100_iter_50_RandomStrategy_seed_2': [{'train': 1.0,
   'pool': 0.37071794271469116,
   'test': 0.3698499798774719},
  {'train': 1.0, 'pool': 0.36334189772605896, 'test': 0.3639499843120575},
  {'train': 1.0, 'pool': 0.3708247244358063, 'test': 0.3759499788284302},
  {'train': 0.9961538314819336,
   'pool': 0.3681136965751648,
   'test': 0.3698999881744385},
  {'train': 1.0, 'pool': 0.38370466232299805, 'test': 0.38679999113082886},
  {'train': 1.0, 'pool': 0.38727274537086487, 'test': 0.3919999897480011},
  {'train': 0.9943749904632568,
   'pool': 0.3801041841506958,
   'test': 0.37379997968673706},
  {'train': 0.9935293793678284,
   'pool': 0.3834986984729767,
   'test': 0.38169997930526733},
  {'train': 0.9900000095367432,
   'pool': 0.39311516284942627,
   'test': 0.39159998297691345},
  {'train': 0.9999999403953552,
   'pool': 0.40926507115364075,
   'test': 0.41324999928474426},
  {'train': 0.9660000205039978,
   'pool': 0.3904999792575836,
   'test': 0.3937000036239624},
  {'train': 0.991428554058075,
   'pool': 0.40250658988952637,
   'test': 0.40119999647140503},
  {'train': 0.9968181848526001,
   'pool': 0.41624340415000916,
   'test': 0.412200003862381},
  {'train': 0.9908695816993713,
   'pool': 0.405649870634079,
   'test': 0.4086499810218811},
  {'train': 0.99958336353302,
   'pool': 0.421755313873291,
   'test': 0.4225499927997589},
  {'train': 0.9955999851226807,
   'pool': 0.4310133457183838,
   'test': 0.43324998021125793},
  {'train': 0.9846153855323792,
   'pool': 0.41037431359291077,
   'test': 0.4132999777793884},
  {'train': 0.9981481432914734,
   'pool': 0.43683648109436035,
   'test': 0.43549999594688416},
  {'train': 0.9996428489685059,
   'pool': 0.43647849559783936,
   'test': 0.4353500008583069},
  {'train': 0.9927586317062378,
   'pool': 0.4255795180797577,
   'test': 0.4353500008583069},
  {'train': 1.0, 'pool': 0.45197296142578125, 'test': 0.4511999785900116},
  {'train': 0.9951613545417786,
   'pool': 0.4452032744884491,
   'test': 0.44415000081062317},
  {'train': 0.9987499713897705,
   'pool': 0.4488315284252167,
   'test': 0.45135000348091125},
  {'train': 0.986060619354248,
   'pool': 0.43539509177207947,
   'test': 0.4357999861240387},
  {'train': 0.9999999403953552,
   'pool': 0.46707651019096375,
   'test': 0.46469998359680176},
  {'train': 0.9968571066856384,
   'pool': 0.450794517993927,
   'test': 0.45170000195503235},
  {'train': 0.9919444918632507,
   'pool': 0.46527472138404846,
   'test': 0.4610999822616577},
  {'train': 0.9945946335792542,
   'pool': 0.46347105503082275,
   'test': 0.4551999866962433},
  {'train': 0.9986841678619385,
   'pool': 0.4680110514163971,
   'test': 0.4713499844074249},
  {'train': 0.9907692074775696,
   'pool': 0.47271469235420227,
   'test': 0.4646499752998352},
  {'train': 0.9937500357627869,
   'pool': 0.4745555520057678,
   'test': 0.4708999991416931},
  {'train': 0.9514634013175964,
   'pool': 0.46454036235809326,
   'test': 0.46709999442100525},
  {'train': 0.9942857027053833,
   'pool': 0.4702514111995697,
   'test': 0.47145000100135803},
  {'train': 0.9862790703773499,
   'pool': 0.45747900009155273,
   'test': 0.45944997668266296},
  {'train': 0.9840909242630005,
   'pool': 0.47157302498817444,
   'test': 0.4742499887943268},
  {'train': 0.9953333735466003,
   'pool': 0.47526758909225464,
   'test': 0.4781999886035919},
  {'train': 0.9913043975830078,
   'pool': 0.4804519712924957,
   'test': 0.4791499972343445},
  {'train': 0.992553174495697,
   'pool': 0.4690934717655182,
   'test': 0.4699999988079071},
  {'train': 0.9952083826065063,
   'pool': 0.4726988673210144,
   'test': 0.46814998984336853},
  {'train': 0.9900000095367432,
   'pool': 0.48353275656700134,
   'test': 0.48144999146461487},
  {'train': 0.9727999567985535,
   'pool': 0.4786857068538666,
   'test': 0.4810999929904938},
  {'train': 0.9892156720161438,
   'pool': 0.49275073409080505,
   'test': 0.48489999771118164},
  {'train': 0.9959615468978882,
   'pool': 0.49514368176460266,
   'test': 0.4931999742984772},
  {'train': 0.993207573890686,
   'pool': 0.48383286595344543,
   'test': 0.4869999885559082},
  {'train': 0.9961110949516296,
   'pool': 0.4962427616119385,
   'test': 0.4955499768257141},
  {'train': 0.996363639831543,
   'pool': 0.48614493012428284,
   'test': 0.4855499863624573},
  {'train': 0.9887499809265137,
   'pool': 0.4814535081386566,
   'test': 0.48019999265670776},
  {'train': 0.991754412651062,
   'pool': 0.5067930221557617,
   'test': 0.5092499852180481},
  {'train': 0.9896551966667175,
   'pool': 0.5026608109474182,
   'test': 0.5103499889373779},
  {'train': 0.9979661107063293,
   'pool': 0.5066568851470947,
   'test': 0.5159499645233154},
  {'train': 0.9883333444595337,
   'pool': 0.5074999928474426,
   'test': 0.5161499977111816}],
 'train_1000_pool_query_100_iter_50_RandomStrategy_seed_3': [{'train': 0.9980000257492065,
   'pool': 0.358923077583313,
   'test': 0.3579999804496765},
  {'train': 0.9981818199157715,
   'pool': 0.37303340435028076,
   'test': 0.3730999827384949},
  {'train': 1.0, 'pool': 0.3697938024997711, 'test': 0.3720499873161316},
  {'train': 0.9907692074775696,
   'pool': 0.37408268451690674,
   'test': 0.3771999776363373},
  {'train': 1.0, 'pool': 0.3841450810432434, 'test': 0.3780499994754791},
  {'train': 1.0, 'pool': 0.38989609479904175, 'test': 0.38589999079704285},
  {'train': 0.9906249642372131,
   'pool': 0.382500022649765,
   'test': 0.38349997997283936},
  {'train': 0.9999999403953552,
   'pool': 0.3956919014453888,
   'test': 0.39319998025894165},
  {'train': 0.9783333539962769,
   'pool': 0.38426700234413147,
   'test': 0.3865499794483185},
  {'train': 0.9652631282806396,
   'pool': 0.3904724419116974,
   'test': 0.3899499773979187},
  {'train': 1.0, 'pool': 0.4093684256076813, 'test': 0.412200003862381},
  {'train': 0.9933333396911621,
   'pool': 0.4068337678909302,
   'test': 0.405599981546402},
  {'train': 0.9995454549789429,
   'pool': 0.420634925365448,
   'test': 0.4232499897480011},
  {'train': 1.0, 'pool': 0.41496020555496216, 'test': 0.4202499985694885},
  {'train': 0.9983333349227905,
   'pool': 0.4111170172691345,
   'test': 0.4131999909877777},
  {'train': 0.9967999458312988,
   'pool': 0.42661333084106445,
   'test': 0.42489999532699585},
  {'train': 0.9926922917366028,
   'pool': 0.4214438498020172,
   'test': 0.4220999777317047},
  {'train': 0.9774073958396912,
   'pool': 0.4128418266773224,
   'test': 0.40799999237060547},
  {'train': 1.0, 'pool': 0.4558333158493042, 'test': 0.46014997363090515},
  {'train': 0.9824138283729553,
   'pool': 0.41719675064086914,
   'test': 0.42249998450279236},
  {'train': 0.996666669845581,
   'pool': 0.42781081795692444,
   'test': 0.4267999827861786},
  {'train': 0.9922581315040588,
   'pool': 0.43620598316192627,
   'test': 0.4341000020503998},
  {'train': 0.9853124618530273,
   'pool': 0.4191032648086548,
   'test': 0.4188999831676483},
  {'train': 0.9993939399719238,
   'pool': 0.44476836919784546,
   'test': 0.44769999384880066},
  {'train': 0.9932352304458618,
   'pool': 0.44603827595710754,
   'test': 0.44259998202323914},
  {'train': 0.9991428256034851,
   'pool': 0.4615616500377655,
   'test': 0.4597499966621399},
  {'train': 0.9961111545562744,
   'pool': 0.4507417678833008,
   'test': 0.44919997453689575},
  {'train': 0.9935135245323181,
   'pool': 0.45713499188423157,
   'test': 0.45419999957084656},
  {'train': 0.9978947043418884,
   'pool': 0.4520718455314636,
   'test': 0.4518499970436096},
  {'train': 0.9928205013275146,
   'pool': 0.4539058208465576,
   'test': 0.45009997487068176},
  {'train': 0.9810000658035278,
   'pool': 0.45047223567962646,
   'test': 0.4518499970436096},
  {'train': 0.9836585521697998,
   'pool': 0.4731754660606384,
   'test': 0.4717999994754791},
  {'train': 0.9983333349227905,
   'pool': 0.4789385497570038,
   'test': 0.47474998235702515},
  {'train': 0.9976744651794434,
   'pool': 0.462380975484848,
   'test': 0.45419999957084656},
  {'train': 0.9886363744735718,
   'pool': 0.46098315715789795,
   'test': 0.45329999923706055},
  {'train': 0.9946666955947876,
   'pool': 0.4735211133956909,
   'test': 0.47384998202323914},
  {'train': 0.9980434775352478,
   'pool': 0.47293785214424133,
   'test': 0.4727499783039093},
  {'train': 0.994468092918396,
   'pool': 0.47186967730522156,
   'test': 0.47609999775886536},
  {'train': 0.987083375453949,
   'pool': 0.46173295378685,
   'test': 0.4640499949455261},
  {'train': 0.9985714554786682,
   'pool': 0.4876638352870941,
   'test': 0.4912000000476837},
  {'train': 0.9997999668121338,
   'pool': 0.5019999742507935,
   'test': 0.5024499893188477},
  {'train': 0.9952940940856934,
   'pool': 0.4742693603038788,
   'test': 0.47419998049736023},
  {'train': 0.9855769276618958,
   'pool': 0.4858333468437195,
   'test': 0.4799000024795532},
  {'train': 0.9884905815124512,
   'pool': 0.4814697504043579,
   'test': 0.47794997692108154},
  {'train': 0.9864814877510071,
   'pool': 0.48895952105522156,
   'test': 0.48649999499320984},
  {'train': 0.9901818037033081,
   'pool': 0.48533332347869873,
   'test': 0.4821999967098236},
  {'train': 0.9957142472267151,
   'pool': 0.4910465180873871,
   'test': 0.4896499812602997},
  {'train': 0.9889473915100098,
   'pool': 0.5021865963935852,
   'test': 0.5012999773025513},
  {'train': 0.9975862503051758,
   'pool': 0.5030701756477356,
   'test': 0.5001000165939331},
  {'train': 0.9896610379219055,
   'pool': 0.5053079128265381,
   'test': 0.49584999680519104},
  {'train': 0.9803333282470703,
   'pool': 0.5059705972671509,
   'test': 0.49549999833106995}],
 'train_1000_pool_query_100_iter_50_RandomStrategy_seed_4': [{'train': 1.0,
   'pool': 0.37148717045783997,
   'test': 0.37129998207092285},
  {'train': 0.9872727394104004,
   'pool': 0.3528277575969696,
   'test': 0.3524499833583832},
  {'train': 1.0, 'pool': 0.3909793794155121, 'test': 0.39354997873306274},
  {'train': 0.9769230484962463,
   'pool': 0.36617571115493774,
   'test': 0.35854998230934143},
  {'train': 1.0, 'pool': 0.3875647783279419, 'test': 0.39249998331069946},
  {'train': 1.0, 'pool': 0.39257141947746277, 'test': 0.3886999785900116},
  {'train': 1.0, 'pool': 0.3916666805744171, 'test': 0.3968999981880188},
  {'train': 0.9958823323249817,
   'pool': 0.3959529995918274,
   'test': 0.39819997549057007},
  {'train': 0.9650000333786011,
   'pool': 0.3841099441051483,
   'test': 0.38509997725486755},
  {'train': 0.9999999403953552,
   'pool': 0.40590548515319824,
   'test': 0.41119998693466187},
  {'train': 1.0, 'pool': 0.41531577706336975, 'test': 0.41599997878074646},
  {'train': 0.996666669845581,
   'pool': 0.4048548638820648,
   'test': 0.4006499946117401},
  {'train': 0.9995454549789429,
   'pool': 0.4159788489341736,
   'test': 0.4117499887943268},
  {'train': 0.9952173829078674,
   'pool': 0.4009018540382385,
   'test': 0.4039499759674072},
  {'train': 1.0, 'pool': 0.42343083024024963, 'test': 0.4235000014305115},
  {'train': 1.0, 'pool': 0.4182933270931244, 'test': 0.42604997754096985},
  {'train': 0.994615375995636,
   'pool': 0.42994651198387146,
   'test': 0.4292999804019928},
  {'train': 0.9825925827026367,
   'pool': 0.416085809469223,
   'test': 0.41234999895095825},
  {'train': 0.9996428489685059,
   'pool': 0.42744624614715576,
   'test': 0.4302999973297119},
  {'train': 1.0, 'pool': 0.43668463826179504, 'test': 0.4320499897003174},
  {'train': 1.0, 'pool': 0.44783782958984375, 'test': 0.4542499780654907},
  {'train': 0.9974194169044495,
   'pool': 0.438943088054657,
   'test': 0.43424999713897705},
  {'train': 0.9971874952316284,
   'pool': 0.4215760827064514,
   'test': 0.4258500039577484},
  {'train': 0.9996969699859619,
   'pool': 0.44738417863845825,
   'test': 0.44314998388290405},
  {'train': 0.9952940940856934,
   'pool': 0.4482786953449249,
   'test': 0.44154998660087585},
  {'train': 0.998285710811615,
   'pool': 0.4477260112762451,
   'test': 0.4491499960422516},
  {'train': 0.9972222447395325,
   'pool': 0.45956045389175415,
   'test': 0.4624499976634979},
  {'train': 0.9894594550132751,
   'pool': 0.4395592212677002,
   'test': 0.43834999203681946},
  {'train': 0.9947367906570435,
   'pool': 0.45947515964508057,
   'test': 0.4607499837875366},
  {'train': 0.9987179040908813,
   'pool': 0.4682271480560303,
   'test': 0.4668499827384949},
  {'train': 0.9917500615119934,
   'pool': 0.45980554819107056,
   'test': 0.45684999227523804},
  {'train': 0.9870731830596924,
   'pool': 0.4579108655452728,
   'test': 0.45534998178482056},
  {'train': 0.9933333396911621,
   'pool': 0.4729888439178467,
   'test': 0.46699997782707214},
  {'train': 0.9779070019721985,
   'pool': 0.4508403539657593,
   'test': 0.44919997453689575},
  {'train': 0.991136372089386,
   'pool': 0.45373594760894775,
   'test': 0.4558499753475189},
  {'train': 0.9997777938842773,
   'pool': 0.475661963224411,
   'test': 0.4786999821662903},
  {'train': 0.9958695769309998,
   'pool': 0.4827966094017029,
   'test': 0.48729997873306274},
  {'train': 0.9993616938591003,
   'pool': 0.4744192659854889,
   'test': 0.4750500023365021},
  {'train': 0.9935417175292969,
   'pool': 0.48366478085517883,
   'test': 0.4810999929904938},
  {'train': 0.9981632828712463,
   'pool': 0.4806837737560272,
   'test': 0.47679999470710754},
  {'train': 0.9879999756813049,
   'pool': 0.4757428467273712,
   'test': 0.4801499843597412},
  {'train': 0.994705855846405,
   'pool': 0.48103153705596924,
   'test': 0.47859999537467957},
  {'train': 0.994038462638855,
   'pool': 0.47591954469680786,
   'test': 0.4760499894618988},
  {'train': 0.997358500957489,
   'pool': 0.4825936555862427,
   'test': 0.4834499955177307},
  {'train': 0.9803703427314758,
   'pool': 0.4860404431819916,
   'test': 0.4843999743461609},
  {'train': 0.9945454001426697,
   'pool': 0.4887826144695282,
   'test': 0.48989999294281006},
  {'train': 0.9973214268684387,
   'pool': 0.4819476902484894,
   'test': 0.48475000262260437},
  {'train': 0.9856140613555908,
   'pool': 0.4966180622577667,
   'test': 0.49449998140335083},
  {'train': 0.9972414374351501,
   'pool': 0.4989473521709442,
   'test': 0.49449998140335083},
  {'train': 0.9911864399909973,
   'pool': 0.5139882564544678,
   'test': 0.5054999589920044},
  {'train': 0.9826666712760925,
   'pool': 0.5147647261619568,
   'test': 0.5054500102996826}]}</code></pre>
</div>
</div>
<div id="cell-64" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb706" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb706-1">file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/jaiswalsuraj/suraj_work/ASTRA/notebooks/al/accuracy_AL_list_diversity.json"</span></span>
<span id="cb706-2"></span>
<span id="cb706-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with open(file_path, 'w') as json_file:</span></span>
<span id="cb706-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     json.dump(accuracy_AL_list, json_file)</span></span>
<span id="cb706-5"></span>
<span id="cb706-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"Accuracy summary has been saved to {file_path}.")</span></span>
<span id="cb706-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the accuracy summary from the JSON file</span></span>
<span id="cb706-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> json_file:</span>
<span id="cb706-9">    accuracy_AL_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(json_file)</span>
<span id="cb706-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Accuracy summary has been loaded from </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>file_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy summary has been loaded from /home/jaiswalsuraj/suraj_work/ASTRA/notebooks/al/accuracy_AL_list_diversity.json.</code></pre>
</div>
</div>
<div id="cell-65" class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb708" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb708-1">class_count_dict</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<pre><code>{'train_1000_pool_query_100_iter_50_DiversityStrategy_seed_0': [tensor([102,  96,  97, 114, 101,  86, 107, 103,  83, 111], device='cuda:2'),
  tensor([116, 111, 101, 128, 103, 101, 110, 120,  88, 122], device='cuda:2'),
  tensor([126, 121, 105, 141, 107, 122, 115, 132,  97, 134], device='cuda:2'),
  tensor([146, 145, 107, 155, 109, 133, 117, 137, 106, 145], device='cuda:2'),
  tensor([156, 164, 115, 169, 109, 145, 122, 146, 111, 163], device='cuda:2'),
  tensor([163, 177, 124, 180, 114, 163, 124, 161, 116, 178], device='cuda:2'),
  tensor([171, 195, 132, 195, 117, 177, 139, 170, 118, 186], device='cuda:2'),
  tensor([182, 208, 140, 207, 121, 189, 144, 185, 121, 203], device='cuda:2'),
  tensor([200, 221, 146, 217, 125, 203, 148, 209, 126, 205], device='cuda:2'),
  tensor([210, 231, 151, 228, 128, 210, 152, 240, 129, 221], device='cuda:2'),
  tensor([220, 243, 155, 241, 131, 223, 156, 257, 132, 242], device='cuda:2'),
  tensor([236, 260, 163, 255, 133, 229, 157, 271, 137, 259], device='cuda:2'),
  tensor([244, 271, 171, 269, 137, 245, 163, 290, 141, 269], device='cuda:2'),
  tensor([257, 284, 179, 278, 141, 258, 169, 304, 146, 284], device='cuda:2'),
  tensor([265, 286, 189, 287, 146, 275, 174, 333, 151, 294], device='cuda:2'),
  tensor([279, 314, 190, 288, 149, 285, 174, 344, 166, 311], device='cuda:2'),
  tensor([285, 339, 191, 302, 153, 296, 185, 355, 171, 323], device='cuda:2'),
  tensor([299, 361, 201, 311, 155, 311, 190, 363, 174, 335], device='cuda:2'),
  tensor([308, 381, 210, 320, 157, 323, 195, 374, 177, 355], device='cuda:2'),
  tensor([334, 393, 220, 329, 164, 329, 199, 383, 185, 364], device='cuda:2'),
  tensor([336, 401, 224, 335, 169, 345, 207, 415, 191, 377], device='cuda:2'),
  tensor([348, 413, 228, 346, 173, 359, 215, 431, 195, 392], device='cuda:2'),
  tensor([364, 422, 241, 362, 175, 371, 223, 444, 200, 398], device='cuda:2'),
  tensor([373, 434, 255, 370, 180, 384, 226, 460, 208, 410], device='cuda:2'),
  tensor([387, 451, 260, 383, 183, 394, 229, 470, 220, 423], device='cuda:2'),
  tensor([394, 467, 271, 393, 184, 409, 233, 482, 230, 437], device='cuda:2'),
  tensor([399, 488, 283, 407, 186, 425, 236, 490, 237, 449], device='cuda:2'),
  tensor([400, 493, 288, 423, 192, 451, 239, 512, 239, 463], device='cuda:2'),
  tensor([413, 515, 295, 430, 198, 454, 245, 519, 247, 484], device='cuda:2'),
  tensor([420, 526, 299, 444, 204, 464, 252, 544, 252, 495], device='cuda:2'),
  tensor([427, 550, 308, 447, 207, 470, 263, 550, 263, 515], device='cuda:2'),
  tensor([435, 559, 316, 454, 218, 484, 278, 565, 264, 527], device='cuda:2'),
  tensor([449, 583, 329, 460, 224, 488, 282, 578, 271, 536], device='cuda:2'),
  tensor([454, 594, 341, 471, 230, 497, 290, 605, 277, 541], device='cuda:2'),
  tensor([463, 601, 346, 482, 233, 510, 309, 622, 281, 553], device='cuda:2'),
  tensor([472, 610, 356, 490, 243, 519, 327, 640, 286, 557], device='cuda:2'),
  tensor([480, 634, 363, 502, 247, 534, 329, 644, 294, 573], device='cuda:2'),
  tensor([489, 653, 369, 507, 249, 541, 331, 656, 314, 591], device='cuda:2'),
  tensor([499, 664, 373, 513, 257, 550, 335, 676, 324, 609], device='cuda:2'),
  tensor([504, 669, 379, 526, 261, 568, 343, 698, 328, 624], device='cuda:2'),
  tensor([518, 686, 389, 538, 266, 580, 348, 708, 338, 629], device='cuda:2'),
  tensor([537, 700, 396, 547, 280, 586, 352, 717, 346, 639], device='cuda:2'),
  tensor([550, 727, 403, 555, 281, 590, 356, 723, 352, 663], device='cuda:2'),
  tensor([567, 745, 407, 564, 285, 597, 361, 735, 363, 676], device='cuda:2'),
  tensor([570, 757, 410, 575, 291, 603, 365, 768, 369, 692], device='cuda:2'),
  tensor([584, 772, 413, 583, 298, 612, 379, 784, 378, 697], device='cuda:2'),
  tensor([594, 788, 421, 596, 305, 619, 390, 794, 386, 707], device='cuda:2'),
  tensor([609, 810, 432, 599, 314, 624, 397, 801, 397, 717], device='cuda:2'),
  tensor([618, 826, 437, 609, 317, 629, 405, 810, 410, 739], device='cuda:2'),
  tensor([625, 843, 446, 622, 324, 639, 412, 824, 415, 750], device='cuda:2'),
  tensor([634, 856, 451, 630, 328, 652, 425, 841, 418, 765], device='cuda:2')]}</code></pre>
</div>
</div>
<div id="cell-66" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb710" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb710-1">class_count_dict</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>{'train_1000_pool_query_100_iter_50_DiversityStrategy_seed_0': [[102,
   96,
   97,
   114,
   101,
   86,
   107,
   103,
   83,
   111],
  [116, 111, 101, 128, 103, 101, 110, 120, 88, 122],
  [126, 121, 105, 141, 107, 122, 115, 132, 97, 134],
  [146, 145, 107, 155, 109, 133, 117, 137, 106, 145],
  [156, 164, 115, 169, 109, 145, 122, 146, 111, 163],
  [163, 177, 124, 180, 114, 163, 124, 161, 116, 178],
  [171, 195, 132, 195, 117, 177, 139, 170, 118, 186],
  [182, 208, 140, 207, 121, 189, 144, 185, 121, 203],
  [200, 221, 146, 217, 125, 203, 148, 209, 126, 205],
  [210, 231, 151, 228, 128, 210, 152, 240, 129, 221],
  [220, 243, 155, 241, 131, 223, 156, 257, 132, 242],
  [236, 260, 163, 255, 133, 229, 157, 271, 137, 259],
  [244, 271, 171, 269, 137, 245, 163, 290, 141, 269],
  [257, 284, 179, 278, 141, 258, 169, 304, 146, 284],
  [265, 286, 189, 287, 146, 275, 174, 333, 151, 294],
  [279, 314, 190, 288, 149, 285, 174, 344, 166, 311],
  [285, 339, 191, 302, 153, 296, 185, 355, 171, 323],
  [299, 361, 201, 311, 155, 311, 190, 363, 174, 335],
  [308, 381, 210, 320, 157, 323, 195, 374, 177, 355],
  [334, 393, 220, 329, 164, 329, 199, 383, 185, 364],
  [336, 401, 224, 335, 169, 345, 207, 415, 191, 377],
  [348, 413, 228, 346, 173, 359, 215, 431, 195, 392],
  [364, 422, 241, 362, 175, 371, 223, 444, 200, 398],
  [373, 434, 255, 370, 180, 384, 226, 460, 208, 410],
  [387, 451, 260, 383, 183, 394, 229, 470, 220, 423],
  [394, 467, 271, 393, 184, 409, 233, 482, 230, 437],
  [399, 488, 283, 407, 186, 425, 236, 490, 237, 449],
  [400, 493, 288, 423, 192, 451, 239, 512, 239, 463],
  [413, 515, 295, 430, 198, 454, 245, 519, 247, 484],
  [420, 526, 299, 444, 204, 464, 252, 544, 252, 495],
  [427, 550, 308, 447, 207, 470, 263, 550, 263, 515],
  [435, 559, 316, 454, 218, 484, 278, 565, 264, 527],
  [449, 583, 329, 460, 224, 488, 282, 578, 271, 536],
  [454, 594, 341, 471, 230, 497, 290, 605, 277, 541],
  [463, 601, 346, 482, 233, 510, 309, 622, 281, 553],
  [472, 610, 356, 490, 243, 519, 327, 640, 286, 557],
  [480, 634, 363, 502, 247, 534, 329, 644, 294, 573],
  [489, 653, 369, 507, 249, 541, 331, 656, 314, 591],
  [499, 664, 373, 513, 257, 550, 335, 676, 324, 609],
  [504, 669, 379, 526, 261, 568, 343, 698, 328, 624],
  [518, 686, 389, 538, 266, 580, 348, 708, 338, 629],
  [537, 700, 396, 547, 280, 586, 352, 717, 346, 639],
  [550, 727, 403, 555, 281, 590, 356, 723, 352, 663],
  [567, 745, 407, 564, 285, 597, 361, 735, 363, 676],
  [570, 757, 410, 575, 291, 603, 365, 768, 369, 692],
  [584, 772, 413, 583, 298, 612, 379, 784, 378, 697],
  [594, 788, 421, 596, 305, 619, 390, 794, 386, 707],
  [609, 810, 432, 599, 314, 624, 397, 801, 397, 717],
  [618, 826, 437, 609, 317, 629, 405, 810, 410, 739],
  [625, 843, 446, 622, 324, 639, 412, 824, 415, 750],
  [634, 856, 451, 630, 328, 652, 425, 841, 418, 765]],
 'train_1000_pool_query_100_iter_50_RandomStrategy_seed_0': [tensor([102,  96,  97, 114, 101,  86, 107, 103,  83, 111], device='cuda:2'),
  tensor([112, 107, 102, 123, 111, 101, 112, 118,  96, 118], device='cuda:2'),
  tensor([118, 115, 114, 132, 121, 108, 126, 132, 102, 132], device='cuda:2'),
  tensor([132, 128, 122, 142, 128, 118, 134, 143, 112, 141], device='cuda:2'),
  tensor([143, 140, 134, 154, 139, 133, 145, 150, 115, 147], device='cuda:2'),
  tensor([155, 151, 139, 161, 149, 143, 153, 163, 128, 158], device='cuda:2'),
  tensor([167, 156, 149, 166, 158, 152, 167, 170, 149, 166], device='cuda:2'),
  tensor([180, 168, 156, 174, 170, 166, 179, 174, 156, 177], device='cuda:2'),
  tensor([189, 178, 167, 184, 179, 177, 185, 185, 167, 189], device='cuda:2'),
  tensor([199, 184, 185, 190, 189, 190, 196, 193, 177, 197], device='cuda:2'),
  tensor([209, 197, 196, 197, 199, 198, 206, 209, 183, 206], device='cuda:2'),
  tensor([223, 205, 201, 212, 211, 204, 213, 216, 195, 220], device='cuda:2'),
  tensor([238, 215, 209, 221, 223, 214, 219, 230, 203, 228], device='cuda:2'),
  tensor([250, 225, 217, 228, 232, 224, 233, 239, 211, 241], device='cuda:2'),
  tensor([262, 237, 227, 237, 245, 234, 240, 246, 222, 250], device='cuda:2'),
  tensor([278, 247, 235, 246, 252, 245, 250, 256, 231, 260], device='cuda:2'),
  tensor([284, 259, 244, 255, 262, 257, 257, 268, 240, 274], device='cuda:2'),
  tensor([292, 273, 250, 268, 271, 269, 266, 280, 249, 282], device='cuda:2'),
  tensor([297, 282, 260, 282, 281, 277, 273, 294, 262, 292], device='cuda:2'),
  tensor([305, 294, 270, 294, 291, 288, 284, 306, 269, 299], device='cuda:2'),
  tensor([316, 299, 279, 300, 301, 299, 297, 319, 280, 310], device='cuda:2'),
  tensor([324, 308, 286, 308, 311, 310, 314, 328, 292, 319], device='cuda:2'),
  tensor([331, 318, 294, 320, 322, 320, 326, 340, 303, 326], device='cuda:2'),
  tensor([341, 329, 305, 331, 329, 339, 337, 349, 308, 332], device='cuda:2'),
  tensor([350, 338, 313, 341, 340, 343, 344, 359, 324, 348], device='cuda:2'),
  tensor([363, 350, 328, 353, 347, 351, 350, 364, 339, 355], device='cuda:2'),
  tensor([370, 358, 338, 362, 356, 361, 356, 380, 350, 369], device='cuda:2'),
  tensor([377, 366, 352, 365, 368, 365, 374, 387, 370, 376], device='cuda:2'),
  tensor([388, 376, 360, 375, 374, 374, 387, 405, 378, 383], device='cuda:2'),
  tensor([397, 387, 371, 387, 388, 379, 398, 418, 384, 391], device='cuda:2'),
  tensor([402, 391, 385, 394, 401, 389, 406, 432, 392, 408], device='cuda:2'),
  tensor([415, 398, 397, 404, 411, 404, 416, 438, 397, 420], device='cuda:2'),
  tensor([429, 413, 404, 412, 426, 415, 430, 442, 404, 425], device='cuda:2'),
  tensor([443, 424, 415, 423, 438, 428, 436, 451, 409, 433], device='cuda:2'),
  tensor([453, 436, 433, 430, 448, 439, 444, 462, 414, 441], device='cuda:2'),
  tensor([466, 441, 446, 438, 460, 449, 455, 472, 421, 452], device='cuda:2'),
  tensor([475, 449, 455, 447, 468, 460, 469, 479, 435, 463], device='cuda:2'),
  tensor([484, 455, 465, 459, 485, 474, 473, 487, 443, 475], device='cuda:2'),
  tensor([492, 464, 476, 468, 492, 488, 478, 504, 453, 485], device='cuda:2'),
  tensor([501, 472, 487, 475, 506, 500, 490, 511, 463, 495], device='cuda:2'),
  tensor([514, 482, 499, 479, 512, 518, 501, 521, 473, 501], device='cuda:2'),
  tensor([522, 495, 510, 493, 519, 532, 507, 534, 480, 508], device='cuda:2'),
  tensor([534, 503, 515, 511, 528, 538, 513, 543, 495, 520], device='cuda:2'),
  tensor([544, 511, 522, 525, 542, 550, 518, 556, 503, 529], device='cuda:2'),
  tensor([551, 521, 533, 537, 557, 560, 526, 565, 510, 540], device='cuda:2'),
  tensor([561, 534, 543, 545, 566, 576, 532, 576, 519, 548], device='cuda:2'),
  tensor([567, 545, 556, 557, 583, 587, 541, 585, 521, 558], device='cuda:2'),
  tensor([575, 559, 568, 565, 595, 595, 550, 592, 529, 572], device='cuda:2'),
  tensor([583, 567, 579, 580, 607, 604, 559, 602, 538, 581], device='cuda:2'),
  tensor([588, 581, 592, 584, 618, 612, 572, 611, 549, 593], device='cuda:2'),
  tensor([596, 592, 601, 595, 623, 621, 587, 622, 556, 607], device='cuda:2')],
 'train_1000_pool_query_100_iter_50_RandomStrategy_seed_1': [tensor([102,  96,  97, 114, 101,  86, 107, 103,  83, 111], device='cuda:2'),
  tensor([109, 106, 106, 121, 116, 100, 114, 110,  95, 123], device='cuda:2'),
  tensor([121, 120, 118, 129, 129, 107, 125, 116, 103, 132], device='cuda:2'),
  tensor([133, 131, 125, 137, 134, 116, 134, 132, 116, 142], device='cuda:2'),
  tensor([146, 141, 134, 143, 143, 123, 146, 140, 129, 155], device='cuda:2'),
  tensor([160, 155, 141, 148, 152, 130, 157, 146, 148, 163], device='cuda:2'),
  tensor([172, 161, 150, 160, 164, 137, 164, 156, 157, 179], device='cuda:2'),
  tensor([181, 170, 157, 170, 177, 147, 173, 165, 169, 191], device='cuda:2'),
  tensor([191, 178, 169, 183, 188, 153, 185, 176, 179, 198], device='cuda:2'),
  tensor([199, 194, 179, 189, 196, 167, 193, 184, 191, 208], device='cuda:2'),
  tensor([207, 202, 187, 201, 216, 180, 206, 186, 201, 214], device='cuda:2'),
  tensor([220, 213, 198, 206, 226, 184, 220, 194, 216, 223], device='cuda:2'),
  tensor([225, 224, 213, 216, 232, 195, 231, 206, 224, 234], device='cuda:2'),
  tensor([232, 232, 222, 230, 243, 209, 243, 218, 231, 240], device='cuda:2'),
  tensor([238, 241, 232, 236, 249, 219, 258, 233, 241, 253], device='cuda:2'),
  tensor([249, 249, 238, 249, 260, 233, 268, 238, 252, 264], device='cuda:2'),
  tensor([255, 254, 250, 261, 268, 251, 278, 250, 262, 271], device='cuda:2'),
  tensor([263, 263, 266, 274, 274, 259, 289, 257, 275, 280], device='cuda:2'),
  tensor([272, 273, 276, 279, 284, 272, 295, 265, 288, 296], device='cuda:2'),
  tensor([280, 286, 290, 289, 295, 286, 303, 275, 294, 302], device='cuda:2'),
  tensor([292, 292, 295, 302, 305, 292, 312, 284, 307, 319], device='cuda:2'),
  tensor([300, 303, 306, 310, 311, 303, 327, 293, 321, 326], device='cuda:2'),
  tensor([309, 309, 315, 321, 323, 308, 336, 307, 333, 339], device='cuda:2'),
  tensor([318, 319, 325, 334, 335, 318, 346, 313, 342, 350], device='cuda:2'),
  tensor([328, 328, 331, 351, 351, 330, 359, 317, 346, 359], device='cuda:2'),
  tensor([342, 334, 345, 365, 360, 337, 368, 330, 352, 367], device='cuda:2'),
  tensor([351, 346, 355, 376, 372, 347, 378, 336, 364, 375], device='cuda:2'),
  tensor([362, 359, 365, 385, 379, 360, 387, 345, 375, 383], device='cuda:2'),
  tensor([370, 371, 372, 393, 388, 372, 396, 358, 386, 394], device='cuda:2'),
  tensor([385, 384, 378, 403, 403, 378, 402, 364, 396, 407], device='cuda:2'),
  tensor([394, 393, 388, 412, 413, 385, 411, 376, 411, 417], device='cuda:2'),
  tensor([409, 399, 399, 418, 424, 396, 420, 385, 425, 425], device='cuda:2'),
  tensor([421, 407, 407, 427, 433, 410, 425, 398, 435, 437], device='cuda:2'),
  tensor([429, 417, 416, 435, 446, 417, 441, 409, 445, 445], device='cuda:2'),
  tensor([435, 428, 431, 446, 454, 427, 444, 422, 457, 456], device='cuda:2'),
  tensor([443, 437, 443, 452, 462, 437, 457, 433, 470, 466], device='cuda:2'),
  tensor([450, 453, 453, 463, 474, 445, 465, 446, 474, 477], device='cuda:2'),
  tensor([459, 464, 462, 474, 485, 458, 473, 453, 486, 486], device='cuda:2'),
  tensor([468, 477, 476, 488, 494, 466, 480, 459, 496, 496], device='cuda:2'),
  tensor([477, 486, 486, 492, 504, 480, 487, 470, 507, 511], device='cuda:2'),
  tensor([489, 491, 501, 506, 516, 488, 496, 481, 516, 516], device='cuda:2'),
  tensor([497, 499, 518, 523, 530, 495, 500, 490, 526, 522], device='cuda:2'),
  tensor([507, 515, 528, 532, 540, 506, 508, 499, 535, 530], device='cuda:2'),
  tensor([516, 525, 535, 543, 553, 517, 522, 508, 544, 537], device='cuda:2'),
  tensor([524, 533, 547, 549, 560, 531, 532, 524, 554, 546], device='cuda:2'),
  tensor([530, 544, 559, 558, 572, 540, 538, 536, 565, 558], device='cuda:2'),
  tensor([538, 554, 571, 570, 579, 556, 546, 549, 571, 566], device='cuda:2'),
  tensor([546, 569, 581, 576, 586, 569, 555, 556, 584, 578], device='cuda:2'),
  tensor([560, 580, 590, 585, 601, 578, 561, 561, 595, 589], device='cuda:2'),
  tensor([566, 591, 604, 593, 612, 590, 572, 569, 604, 599], device='cuda:2'),
  tensor([577, 597, 613, 609, 622, 595, 579, 583, 612, 613], device='cuda:2')],
 'train_1000_pool_query_100_iter_50_RandomStrategy_seed_2': [tensor([102,  96,  97, 114, 101,  86, 107, 103,  83, 111], device='cuda:2'),
  tensor([110, 108, 110, 124, 108,  91, 116, 119,  92, 122], device='cuda:2'),
  tensor([120, 122, 117, 128, 118, 105, 127, 131, 104, 128], device='cuda:2'),
  tensor([131, 130, 124, 147, 126, 113, 134, 145, 114, 136], device='cuda:2'),
  tensor([139, 140, 136, 155, 133, 123, 144, 157, 124, 149], device='cuda:2'),
  tensor([152, 148, 143, 163, 142, 135, 148, 164, 140, 165], device='cuda:2'),
  tensor([158, 161, 155, 175, 153, 145, 156, 171, 151, 175], device='cuda:2'),
  tensor([165, 171, 161, 191, 163, 162, 163, 184, 158, 182], device='cuda:2'),
  tensor([175, 184, 165, 197, 173, 173, 174, 198, 167, 194], device='cuda:2'),
  tensor([190, 194, 171, 210, 180, 183, 185, 209, 174, 204], device='cuda:2'),
  tensor([201, 204, 180, 221, 189, 193, 191, 221, 187, 213], device='cuda:2'),
  tensor([211, 216, 190, 228, 200, 202, 199, 233, 196, 225], device='cuda:2'),
  tensor([221, 229, 199, 239, 209, 213, 206, 242, 205, 237], device='cuda:2'),
  tensor([227, 240, 208, 251, 218, 220, 213, 255, 216, 252], device='cuda:2'),
  tensor([235, 247, 212, 264, 228, 238, 230, 261, 223, 262], device='cuda:2'),
  tensor([245, 260, 223, 276, 238, 244, 238, 270, 233, 273], device='cuda:2'),
  tensor([254, 265, 239, 284, 250, 256, 249, 281, 243, 279], device='cuda:2'),
  tensor([263, 272, 247, 297, 264, 271, 253, 291, 252, 290], device='cuda:2'),
  tensor([277, 283, 255, 313, 274, 281, 264, 295, 262, 296], device='cuda:2'),
  tensor([286, 293, 261, 324, 282, 292, 273, 307, 273, 309], device='cuda:2'),
  tensor([298, 303, 268, 334, 291, 301, 283, 320, 283, 319], device='cuda:2'),
  tensor([312, 312, 274, 338, 302, 309, 291, 334, 291, 337], device='cuda:2'),
  tensor([324, 321, 279, 345, 307, 319, 307, 354, 298, 346], device='cuda:2'),
  tensor([336, 336, 290, 356, 314, 330, 315, 363, 305, 355], device='cuda:2'),
  tensor([344, 344, 304, 365, 323, 340, 326, 374, 317, 363], device='cuda:2'),
  tensor([358, 352, 317, 372, 332, 354, 337, 382, 325, 371], device='cuda:2'),
  tensor([367, 365, 327, 380, 337, 369, 347, 396, 332, 380], device='cuda:2'),
  tensor([372, 376, 338, 390, 347, 374, 359, 406, 343, 395], device='cuda:2'),
  tensor([383, 389, 345, 404, 359, 382, 372, 415, 354, 397], device='cuda:2'),
  tensor([392, 396, 359, 414, 368, 388, 382, 424, 370, 407], device='cuda:2'),
  tensor([401, 404, 363, 430, 377, 395, 402, 433, 377, 418], device='cuda:2'),
  tensor([406, 415, 376, 441, 385, 405, 416, 442, 383, 431], device='cuda:2'),
  tensor([416, 428, 393, 448, 395, 416, 425, 448, 394, 437], device='cuda:2'),
  tensor([425, 436, 405, 461, 407, 423, 436, 458, 403, 446], device='cuda:2'),
  tensor([436, 447, 418, 475, 416, 426, 450, 469, 411, 452], device='cuda:2'),
  tensor([442, 453, 427, 490, 428, 441, 456, 483, 419, 461], device='cuda:2'),
  tensor([458, 461, 437, 499, 437, 450, 463, 494, 428, 473], device='cuda:2'),
  tensor([475, 476, 446, 507, 444, 460, 471, 508, 436, 477], device='cuda:2'),
  tensor([487, 487, 454, 513, 451, 471, 486, 519, 445, 487], device='cuda:2'),
  tensor([498, 494, 467, 523, 467, 482, 493, 526, 455, 495], device='cuda:2'),
  tensor([506, 502, 477, 535, 473, 490, 507, 537, 467, 506], device='cuda:2'),
  tensor([513, 515, 487, 545, 483, 498, 519, 545, 479, 516], device='cuda:2'),
  tensor([521, 526, 500, 555, 492, 508, 528, 551, 491, 528], device='cuda:2'),
  tensor([531, 532, 508, 568, 503, 516, 539, 562, 504, 537], device='cuda:2'),
  tensor([537, 540, 521, 577, 511, 526, 546, 575, 515, 552], device='cuda:2'),
  tensor([546, 546, 531, 589, 523, 534, 556, 584, 530, 561], device='cuda:2'),
  tensor([551, 563, 540, 600, 533, 544, 570, 588, 542, 569], device='cuda:2'),
  tensor([562, 573, 553, 610, 541, 548, 583, 599, 553, 578], device='cuda:2'),
  tensor([574, 583, 564, 618, 550, 554, 591, 613, 566, 587], device='cuda:2'),
  tensor([586, 597, 577, 622, 560, 563, 598, 619, 581, 597], device='cuda:2'),
  tensor([593, 606, 585, 634, 570, 574, 606, 628, 590, 614], device='cuda:2')],
 'train_1000_pool_query_100_iter_50_RandomStrategy_seed_3': [tensor([102,  96,  97, 114, 101,  86, 107, 103,  83, 111], device='cuda:2'),
  tensor([108, 109, 113, 123, 111,  96, 118, 110,  89, 123], device='cuda:2'),
  tensor([113, 119, 122, 137, 120, 106, 124, 122, 101, 136], device='cuda:2'),
  tensor([125, 127, 132, 144, 132, 114, 137, 136, 107, 146], device='cuda:2'),
  tensor([139, 137, 146, 153, 139, 124, 143, 147, 116, 156], device='cuda:2'),
  tensor([151, 147, 158, 161, 146, 139, 148, 151, 128, 171], device='cuda:2'),
  tensor([161, 156, 168, 173, 156, 146, 155, 158, 143, 184], device='cuda:2'),
  tensor([169, 169, 176, 179, 168, 155, 169, 168, 150, 197], device='cuda:2'),
  tensor([182, 182, 186, 191, 175, 165, 181, 178, 154, 206], device='cuda:2'),
  tensor([191, 191, 194, 198, 194, 178, 187, 186, 167, 214], device='cuda:2'),
  tensor([204, 202, 202, 207, 206, 188, 203, 193, 173, 222], device='cuda:2'),
  tensor([205, 211, 216, 223, 218, 193, 215, 202, 180, 237], device='cuda:2'),
  tensor([218, 221, 225, 236, 228, 201, 230, 213, 186, 242], device='cuda:2'),
  tensor([229, 230, 238, 245, 235, 210, 243, 225, 191, 254], device='cuda:2'),
  tensor([241, 242, 249, 256, 245, 214, 252, 236, 200, 265], device='cuda:2'),
  tensor([250, 251, 260, 260, 260, 226, 259, 247, 214, 273], device='cuda:2'),
  tensor([254, 266, 268, 270, 271, 243, 267, 256, 227, 278], device='cuda:2'),
  tensor([260, 280, 281, 277, 284, 248, 276, 263, 240, 291], device='cuda:2'),
  tensor([268, 288, 289, 284, 292, 262, 287, 275, 253, 302], device='cuda:2'),
  tensor([281, 300, 298, 288, 303, 271, 297, 293, 261, 308], device='cuda:2'),
  tensor([291, 306, 308, 296, 314, 283, 309, 302, 272, 319], device='cuda:2'),
  tensor([299, 317, 325, 306, 326, 289, 320, 309, 281, 328], device='cuda:2'),
  tensor([305, 329, 335, 321, 338, 298, 328, 316, 292, 338], device='cuda:2'),
  tensor([314, 340, 344, 334, 343, 305, 341, 329, 303, 347], device='cuda:2'),
  tensor([331, 349, 352, 343, 358, 310, 347, 341, 312, 357], device='cuda:2'),
  tensor([343, 361, 366, 353, 371, 320, 355, 350, 318, 363], device='cuda:2'),
  tensor([354, 378, 375, 361, 380, 326, 363, 358, 330, 375], device='cuda:2'),
  tensor([364, 389, 386, 369, 387, 337, 371, 364, 337, 396], device='cuda:2'),
  tensor([378, 397, 395, 376, 400, 346, 381, 375, 345, 407], device='cuda:2'),
  tensor([390, 407, 407, 383, 410, 353, 390, 386, 354, 420], device='cuda:2'),
  tensor([394, 418, 417, 397, 419, 366, 400, 393, 369, 427], device='cuda:2'),
  tensor([406, 430, 428, 408, 425, 379, 408, 401, 379, 436], device='cuda:2'),
  tensor([416, 440, 440, 418, 434, 392, 416, 408, 390, 446], device='cuda:2'),
  tensor([429, 448, 453, 426, 442, 402, 419, 420, 405, 456], device='cuda:2'),
  tensor([440, 455, 465, 438, 450, 414, 431, 426, 414, 467], device='cuda:2'),
  tensor([445, 465, 473, 448, 462, 425, 444, 434, 424, 480], device='cuda:2'),
  tensor([448, 473, 488, 460, 475, 433, 458, 442, 430, 493], device='cuda:2'),
  tensor([456, 483, 492, 467, 484, 446, 469, 451, 442, 510], device='cuda:2'),
  tensor([474, 487, 505, 476, 492, 455, 477, 464, 452, 518], device='cuda:2'),
  tensor([482, 497, 510, 481, 504, 466, 484, 473, 469, 534], device='cuda:2'),
  tensor([491, 506, 521, 491, 520, 477, 488, 481, 481, 544], device='cuda:2'),
  tensor([501, 520, 530, 501, 535, 484, 496, 488, 492, 553], device='cuda:2'),
  tensor([510, 530, 542, 510, 546, 494, 507, 501, 502, 558], device='cuda:2'),
  tensor([515, 537, 554, 522, 558, 512, 515, 508, 510, 569], device='cuda:2'),
  tensor([526, 547, 561, 535, 565, 524, 527, 516, 520, 579], device='cuda:2'),
  tensor([535, 563, 574, 547, 576, 533, 535, 526, 529, 582], device='cuda:2'),
  tensor([540, 569, 588, 562, 590, 545, 543, 537, 536, 590], device='cuda:2'),
  tensor([547, 581, 594, 572, 599, 550, 556, 553, 547, 601], device='cuda:2'),
  tensor([557, 588, 603, 584, 609, 561, 565, 562, 560, 611], device='cuda:2'),
  tensor([564, 598, 610, 597, 619, 577, 578, 572, 567, 618], device='cuda:2'),
  tensor([572, 607, 621, 608, 629, 587, 587, 579, 577, 633], device='cuda:2')],
 'train_1000_pool_query_100_iter_50_RandomStrategy_seed_4': [tensor([102,  96,  97, 114, 101,  86, 107, 103,  83, 111], device='cuda:2'),
  tensor([113, 109, 104, 120, 118,  95, 119, 108,  91, 123], device='cuda:2'),
  tensor([121, 122, 116, 136, 125, 103, 125, 120,  99, 133], device='cuda:2'),
  tensor([131, 132, 121, 152, 137, 112, 138, 129, 110, 138], device='cuda:2'),
  tensor([147, 142, 130, 159, 155, 121, 146, 132, 124, 144], device='cuda:2'),
  tensor([156, 155, 136, 168, 161, 128, 159, 145, 140, 152], device='cuda:2'),
  tensor([168, 164, 145, 176, 171, 142, 167, 155, 149, 163], device='cuda:2'),
  tensor([176, 173, 152, 184, 186, 150, 178, 166, 163, 172], device='cuda:2'),
  tensor([184, 187, 169, 194, 194, 163, 183, 173, 170, 183], device='cuda:2'),
  tensor([193, 191, 181, 204, 201, 174, 194, 184, 186, 192], device='cuda:2'),
  tensor([202, 208, 192, 216, 210, 180, 204, 195, 193, 200], device='cuda:2'),
  tensor([212, 217, 203, 228, 221, 187, 218, 206, 201, 207], device='cuda:2'),
  tensor([224, 226, 218, 238, 229, 195, 231, 215, 209, 215], device='cuda:2'),
  tensor([242, 232, 225, 248, 237, 204, 236, 232, 219, 225], device='cuda:2'),
  tensor([251, 238, 235, 258, 249, 220, 248, 242, 229, 230], device='cuda:2'),
  tensor([263, 249, 253, 266, 258, 226, 255, 255, 236, 239], device='cuda:2'),
  tensor([272, 262, 266, 274, 265, 237, 265, 264, 249, 246], device='cuda:2'),
  tensor([279, 272, 268, 287, 272, 247, 279, 275, 263, 258], device='cuda:2'),
  tensor([294, 278, 281, 291, 288, 255, 289, 283, 272, 269], device='cuda:2'),
  tensor([300, 289, 291, 297, 306, 261, 299, 291, 281, 285], device='cuda:2'),
  tensor([311, 296, 303, 307, 315, 267, 313, 302, 293, 293], device='cuda:2'),
  tensor([324, 308, 310, 320, 323, 279, 321, 312, 301, 302], device='cuda:2'),
  tensor([336, 315, 313, 334, 328, 289, 333, 323, 315, 314], device='cuda:2'),
  tensor([351, 322, 323, 340, 343, 300, 345, 338, 320, 318], device='cuda:2'),
  tensor([359, 332, 329, 353, 354, 310, 353, 353, 329, 328], device='cuda:2'),
  tensor([369, 341, 342, 363, 361, 321, 366, 361, 335, 341], device='cuda:2'),
  tensor([381, 351, 347, 375, 377, 332, 370, 365, 348, 354], device='cuda:2'),
  tensor([397, 365, 362, 382, 388, 339, 378, 371, 354, 364], device='cuda:2'),
  tensor([404, 377, 376, 392, 395, 353, 383, 381, 363, 376], device='cuda:2'),
  tensor([416, 384, 384, 400, 404, 364, 393, 388, 377, 390], device='cuda:2'),
  tensor([431, 393, 389, 409, 415, 379, 405, 393, 386, 400], device='cuda:2'),
  tensor([436, 405, 402, 415, 425, 390, 421, 402, 397, 407], device='cuda:2'),
  tensor([444, 410, 416, 430, 430, 403, 434, 411, 404, 418], device='cuda:2'),
  tensor([454, 421, 422, 437, 444, 406, 444, 421, 421, 430], device='cuda:2'),
  tensor([463, 428, 437, 446, 457, 417, 457, 430, 432, 433], device='cuda:2'),
  tensor([475, 438, 449, 457, 467, 424, 465, 439, 440, 446], device='cuda:2'),
  tensor([485, 447, 462, 466, 477, 435, 470, 447, 456, 455], device='cuda:2'),
  tensor([494, 462, 472, 479, 488, 440, 480, 458, 463, 464], device='cuda:2'),
  tensor([503, 474, 483, 491, 494, 447, 493, 470, 472, 473], device='cuda:2'),
  tensor([514, 482, 491, 498, 507, 455, 502, 478, 485, 488], device='cuda:2'),
  tensor([522, 491, 500, 506, 516, 465, 515, 486, 501, 498], device='cuda:2'),
  tensor([529, 498, 510, 521, 525, 480, 522, 497, 511, 507], device='cuda:2'),
  tensor([540, 510, 518, 530, 535, 492, 528, 509, 520, 518], device='cuda:2'),
  tensor([550, 519, 528, 541, 545, 500, 541, 518, 529, 529], device='cuda:2'),
  tensor([564, 537, 539, 546, 557, 507, 548, 527, 537, 538], device='cuda:2'),
  tensor([573, 545, 550, 559, 567, 516, 561, 536, 547, 546], device='cuda:2'),
  tensor([585, 554, 555, 570, 585, 523, 570, 548, 558, 552], device='cuda:2'),
  tensor([594, 562, 565, 578, 594, 534, 585, 558, 568, 562], device='cuda:2'),
  tensor([607, 574, 575, 588, 601, 542, 600, 568, 574, 571], device='cuda:2'),
  tensor([613, 580, 586, 599, 611, 553, 608, 581, 587, 582], device='cuda:2'),
  tensor([630, 588, 598, 610, 620, 559, 623, 588, 596, 588], device='cuda:2')]}</code></pre>
</div>
</div>
<div id="cell-67" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb712" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb712-1">file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/jaiswalsuraj/suraj_work/ASTRA/notebooks/al/class_count_dict.json"</span></span>
<span id="cb712-2"></span>
<span id="cb712-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with open(file_path, 'w') as json_file:</span></span>
<span id="cb712-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     json.dump(class_count_dict, json_file, default=lambda x: x.tolist())</span></span>
<span id="cb712-5"></span>
<span id="cb712-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"Accuracy summary has been saved to {file_path}.")</span></span>
<span id="cb712-7"></span>
<span id="cb712-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the accuracy summary from the JSON file</span></span>
<span id="cb712-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> json_file:</span>
<span id="cb712-10">    class_count_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(json_file)</span>
<span id="cb712-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Accuracy summary has been loaded from </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>file_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>) </span>
<span id="cb712-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># note we converted each element to list while saving</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy summary has been loaded from /home/jaiswalsuraj/suraj_work/ASTRA/notebooks/al/class_count_dict.json.</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="plots" class="level1">
<h1>Plots</h1>
<div id="cell-69" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb714" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb714-1">diversity_accuracy_AL_list_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb714-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(accuracy_AL_list[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_1000_pool_query_100_iter_50_DiversityStrategy_seed_0'</span>])):</span>
<span id="cb714-3">    diversity_accuracy_AL_list_test.append(accuracy_AL_list[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_1000_pool_query_100_iter_50_DiversityStrategy_seed_0'</span>][i][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>])</span>
<span id="cb714-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># diversity_accuracy_AL_list_test</span></span></code></pre></div>
</div>
<div id="cell-70" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb715" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb715-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Final accuracy across seeds</span></span>
<span id="cb715-2">random_accuracy_list_AL_list_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb715-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accuracy_AL_list.keys():</span>
<span id="cb715-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_1000_pool_query_100_iter_50_DiversityStrategy_seed_0'</span>:</span>
<span id="cb715-5">        lis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb715-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(accuracy_AL_list[i])):</span>
<span id="cb715-7">            lis.append(accuracy_AL_list[i][j][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>])</span>
<span id="cb715-8">        random_accuracy_list_AL_list_test.append(lis)</span>
<span id="cb715-9">random_accuracy_list_AL_list_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(random_accuracy_list_AL_list_test)</span>
<span id="cb715-10">mean_test_accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(random_accuracy_list_AL_list_test, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb715-11">std_test_accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.std(random_accuracy_list_AL_list_test, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb715-12">random_accuracy_list_AL_list_test.shape, mean_test_accuracy.shape, std_test_accuracy.shape </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>((5, 51), (51,), (51,))</code></pre>
</div>
</div>
<div id="cell-71" class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb717" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb717-1">class_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_count_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_1000_pool_query_100_iter_50_DiversityStrategy_seed_0'</span>]</span>
<span id="cb717-2"></span>
<span id="cb717-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a list of tensors from class_count_dict</span></span>
<span id="cb717-4">class_count_tensors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [torch.tensor(count) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> count <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> class_counts]</span>
<span id="cb717-5"></span>
<span id="cb717-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stack the tensors along dimension 1</span></span>
<span id="cb717-7">class_count_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(class_count_tensors, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb717-8"></span>
<span id="cb717-9">class_count_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_count_tensor.cpu().numpy()</span>
<span id="cb717-10"></span>
<span id="cb717-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'class_count_array shape'</span>, class_count_array.shape)</span>
<span id="cb717-12">num_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb717-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The rest of your code for plotting</span></span>
<span id="cb717-14">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)) </span>
<span id="cb717-15">plt.stackplot(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), class_count_array, labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset.classes)</span>
<span id="cb717-16">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class-wise Count for Diversity Strategy'</span>)</span>
<span id="cb717-17">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Active Learning Iteration'</span>)</span>
<span id="cb717-18">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class-wise Count'</span>)</span>
<span id="cb717-19">plt.legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upper left'</span>) </span>
<span id="cb717-20">plt.xlim([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb717-21">plt.xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, num_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb717-22">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>class_count_array shape (10, 51)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-54-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-23"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-54-output-2.png" width="1023" height="546" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-72" class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb719" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb719-1">class_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_count_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_1000_pool_query_100_iter_50_RandomStrategy_seed_0'</span>]</span>
<span id="cb719-2"></span>
<span id="cb719-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a list of tensors from class_count_dict</span></span>
<span id="cb719-4">class_count_tensors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [torch.tensor(count) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> count <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> class_counts]</span>
<span id="cb719-5"></span>
<span id="cb719-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stack the tensors along dimension 1</span></span>
<span id="cb719-7">class_count_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(class_count_tensors, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb719-8"></span>
<span id="cb719-9">class_count_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_count_tensor.cpu().numpy()</span>
<span id="cb719-10"></span>
<span id="cb719-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'class_count_array shape'</span>, class_count_array.shape)</span>
<span id="cb719-12">num_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb719-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The rest of your code for plotting</span></span>
<span id="cb719-14">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)) </span>
<span id="cb719-15">plt.stackplot(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), class_count_array, labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset.classes)</span>
<span id="cb719-16">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class-wise Count for Random Strategy'</span>)</span>
<span id="cb719-17">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Active Learning Iteration'</span>)</span>
<span id="cb719-18">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class-wise Count'</span>)</span>
<span id="cb719-19">plt.legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upper left'</span>) </span>
<span id="cb719-20">plt.xlim([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb719-21">plt.xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, num_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb719-22">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>class_count_array shape (10, 51)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-55-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-24"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-55-output-2.png" width="1023" height="546" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-73" class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb721" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb721-1">iterations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(mean_test_accuracy) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb721-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)) </span>
<span id="cb721-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill the region between mean - std and mean + std</span></span>
<span id="cb721-4">plt.fill_between(iterations, np.array(mean_test_accuracy) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.array(std_test_accuracy), np.array(mean_test_accuracy) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.array(std_test_accuracy), alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Random std'</span>)</span>
<span id="cb721-5">plt.plot(iterations, mean_test_accuracy, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Random mean Accuracy'</span>)</span>
<span id="cb721-6">plt.plot(iterations, diversity_accuracy_AL_list_test, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Diversity Accuracy'</span>)</span>
<span id="cb721-7">plt.axhline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>accuracy_summary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'untrain_acc'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'untrained'</span>)</span>
<span id="cb721-8">plt.axhline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>accuracy_summary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_1000'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labeled 1000'</span>)</span>
<span id="cb721-9">plt.axhline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>accuracy_summary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_1000_pool_5000'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labeled 1000+labeled pool 5000'</span>)</span>
<span id="cb721-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.axhline(y=train_1000_pool_query_100_iter_50_AL_acc.mean(), color='orange', linestyle='--', label='labeled 1000+unlabeled pool 5000 with AL')</span></span>
<span id="cb721-11">plt.axhline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>accuracy_summary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_1000_pool_39000'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labeled 1000+labeled pool(39000)'</span>)</span>
<span id="cb721-12"></span>
<span id="cb721-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Customize the plot</span></span>
<span id="cb721-14">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Test Accuracy vs Iterations'</span>)</span>
<span id="cb721-15">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Iterations'</span>)</span>
<span id="cb721-16">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Test Accuracy'</span>)</span>
<span id="cb721-17">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb721-18">plt.legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lower right'</span>)</span>
<span id="cb721-19"></span>
<span id="cb721-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot or save it to a file</span></span>
<span id="cb721-21">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diversity_acq_AL_files/figure-html/cell-56-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-25"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL_files/figure-html/cell-56-output-1.png" width="846" height="546" class="figure-img"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="summary-of-our-experiments" class="level1">
<h1>Summary of our experiments</h1>
<table class="caption-top table">
<colgroup>
<col style="width: 68%">
<col style="width: 31%">
</colgroup>
<thead>
<tr class="header">
<th>Experiment</th>
<th>Accuracy on Test Set</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Untrained model</td>
<td>8.58%</td>
</tr>
<tr class="even">
<td>Trained model on train(1000)</td>
<td>36.24%</td>
</tr>
<tr class="odd">
<td>Trained model on train(1000) + pool set(5000) random</td>
<td>50.54%</td>
</tr>
<tr class="even">
<td>Trained model on train(1000) + pool set(5000) selected by AL</td>
<td>48.17%</td>
</tr>
<tr class="odd">
<td>Trained model on train(1000) + pool set(39000)</td>
<td>61.61%</td>
</tr>
</tbody>
</table>
<p>Accuracy on test set - Untrained model : 8.58% - Trained model on train(1000) : 36.24% - Trained model on train(1000) + pool set(5000) random: 50.54% - Trained model on train(1000) + pool set(5000) unlabeled selected by AL 48.17% - Here we used the core-set approach to select the unlabeled data from the pool set - We pick 100 data points for each iteration from the pool set which are farthest from the train set for 50 such AL iterations - Trained model on train(1000) + pool set(39000) labeled: 61.61%</p>
<p>all above are trained on 30 epochs. Here we can see that diveristy acquisition strategy is comparable to random acquisition strategy.</p>


</section>

 ]]></description>
  <category>Active Learning</category>
  <category>Deep Learning</category>
  <guid>https://jaiswalsuraj487.github.io/publications_and_projects/data/diversity_acq_AL.html</guid>
  <pubDate>Wed, 01 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Towards Scalable Identification of Brick Kilns from Satellite Imagery with Active Learning</title>
  <dc:creator>Suraj Jaiswal</dc:creator>
  <link>https://jaiswalsuraj487.github.io/publications_and_projects/data/research_neurips.html</link>
  <description><![CDATA[ 




<p><strong><a href="https://openreview.net/forum?id=F6jSo0PIKy">Paper</a> accepted</strong> and in <strong>nomination for best paper award</strong> in <strong>NeurIPS</strong> 2023 Workshop on ReALML (Active learning and Machine learning in real world)</p>
<p>Live Streamlit Demo App: <a href="https://brick-kilns-detector.streamlit.app/">link</a></p>
<p><img src="https://jaiswalsuraj487.github.io/publications_and_projects/images/streamlit_demo.png" width="800"></p>
<section id="keywords" class="level3">
<h3 class="anchored" data-anchor-id="keywords">Keywords:</h3>
<p>Active Learning, Satellite Imagery, Transfer Learning</p>
</section>
<section id="abstract" class="level3">
<h3 class="anchored" data-anchor-id="abstract">Abstract:</h3>
<ul>
<li>Air pollution is a leading cause of death globally, especially in south-east Asia. Brick production contributes significantly to air pollution. However, unlike other sources such as power plants, brick production is unregulated and thus hard to monitor. Traditional survey-based methods for kiln identification are time and resource-intensive.</li>
<li>Similarly, it is time-consuming for air quality experts to annotate satellite imagery manually. Recently, computer vision machine learning models have helped reduce labeling costs, but they need sufficiently large labeled imagery. In this paper, we propose scalable methods using active learning to accurately detect brick kilns with minimal manual labeling effort. Through this work, we have identified more than 700 new brick kilns across the Indo-Gangetic region: a highly populous and polluted region spanning 0.4 million square kilometers in India.</li>
<li>In addition, we have deployed our model as a <a href="https://brick-kilns-detector.streamlit.app/">web application</a> for automatically identifying brick kilns given a specific area by the user.</li>
</ul>
<p>To know more check: <a href="https://openreview.net/forum?id=F6jSo0PIKy">Paper</a></p>


</section>

 ]]></description>
  <category>Active Learning</category>
  <category>Deep Learning</category>
  <guid>https://jaiswalsuraj487.github.io/publications_and_projects/data/research_neurips.html</guid>
  <pubDate>Fri, 27 Oct 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Active Learning: A Core-Set Approach demo</title>
  <dc:creator>Suraj Jaiswal</dc:creator>
  <link>https://jaiswalsuraj487.github.io/publications_and_projects/data/diveristy_acquisition_demo.html</link>
  <description><![CDATA[ 




<section id="intuition-behind-diversity-active-learning" class="level1">
<h1>Intuition behind Diversity Active Learning</h1>
<p>We want to select the most uncertain samples from the unlabeled pool. However, we also want to ensure that the selected samples are diverse. This is because if we select similar samples, we will not be able to learn much from them.</p>
<p>Here we wish to work on images, so we can use their latent representation to select a pool point which is furthest in the latent dimension space from the train data.</p>
<p>Let’s see how we can do this. Below is an example of random points in 2D space. We want to select the point which is furthest from the train data. We can do this by finding the point which has the maximum distance from the train data. This is the intuition behind diversity acquisition.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt </span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> astra.torch.al <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Furthest, Centroid</span></code></pre></div>
</div>
<div id="cell-3" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.cuda.is_available():</span>
<span id="cb2-2">    num_gpu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cuda.device_count()</span>
<span id="cb2-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of available GPUs: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_gpu<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_gpu):</span>
<span id="cb2-6">        device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"cuda:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-7">        device_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cuda.get_device_name(i)</span>
<span id="cb2-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"GPU </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, device)</span>
<span id="cb2-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No GPUs available, using CPU."</span>)</span>
<span id="cb2-11"></span>
<span id="cb2-12">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda:2'</span>)</span>
<span id="cb2-13">device</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of available GPUs: 4
GPU 0: NVIDIA A100-SXM4-80GB cuda:0
GPU 1: NVIDIA A100-SXM4-80GB cuda:1
GPU 2: NVIDIA A100-SXM4-80GB cuda:2
GPU 3: NVIDIA A100-SXM4-80GB cuda:3</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/jaiswalsuraj/miniconda3/envs/torch_gpu/lib/python3.10/site-packages/torch/cuda/__init__.py:611: UserWarning: Can't initialize NVML
  warnings.warn("Can't initialize NVML")</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>device(type='cuda', index=2)</code></pre>
</div>
</div>
<div id="cell-4" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create dummy data</span></span>
<span id="cb6-2">n_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb6-3">n_pool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb6-4">n_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-5">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate random train and pool features</span></span>
<span id="cb6-7">train_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand(n_train, n_features)</span>
<span id="cb6-8">pool_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand(n_pool, n_features)</span>
<span id="cb6-9"></span>
<span id="cb6-10">plt.scatter(train_features[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], train_features[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Train Data'</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>)</span>
<span id="cb6-11">plt.scatter(pool_features[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], pool_features[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pool Data'</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb6-12"></span>
<span id="cb6-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.scatter(centroid_feature[0], centroid_feature[1], label='Centroid', marker='s', c='red')</span></span>
<span id="cb6-14">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Feature 1'</span>)</span>
<span id="cb6-15">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Feature 2'</span>)</span>
<span id="cb6-16">plt.legend()</span>
<span id="cb6-17">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Train and Pool Data farthest from Centroid'</span>)</span>
<span id="cb6-18">plt.grid()</span>
<span id="cb6-19">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diveristy_acquisition_demo_files/figure-html/cell-4-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diveristy_acquisition_demo_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-5" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
</div>
<div id="cell-6" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">acquisition <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Furthest()</span>
<span id="cb8-2">selected_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> acquisition.acquire_scores(</span>
<span id="cb8-3">                    train_features.cpu(), pool_features.cpu(), n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples</span>
<span id="cb8-4">                )</span>
<span id="cb8-5">selected_indices </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>[8, 9]</code></pre>
</div>
</div>
<div id="cell-7" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index of the n farthest Pool Feature from train features:"</span>, selected_indices)</span>
<span id="cb10-2"></span>
<span id="cb10-3">plt.scatter(pool_features[selected_indices][:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], pool_features[selected_indices][:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Selected data'</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s'</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>)</span>
<span id="cb10-4">plt.scatter(train_features[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], train_features[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Train Data'</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>)</span>
<span id="cb10-5">plt.scatter(pool_features[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], pool_features[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pool Data'</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb10-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Feature 1'</span>)</span>
<span id="cb10-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Feature 2'</span>)</span>
<span id="cb10-8">plt.legend()</span>
<span id="cb10-9">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Train and Pool Data farthest from Centroid'</span>)</span>
<span id="cb10-10">plt.grid()</span>
<span id="cb10-11">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Index of the n farthest Pool Feature from train features: [8, 9]</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diveristy_acquisition_demo_files/figure-html/cell-7-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diveristy_acquisition_demo_files/figure-html/cell-7-output-2.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div id="cell-8" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">acquisition <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Centroid()</span>
<span id="cb12-2">selected_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> acquisition.acquire_scores(</span>
<span id="cb12-3">                    train_features.cpu(), pool_features.cpu(), n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples</span>
<span id="cb12-4">                )</span>
<span id="cb12-5">selected_indices</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>[8, 1]</code></pre>
</div>
</div>
<div id="cell-9" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">centroid_feature <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.mean(train_features, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#.unsqueeze(0).squeeze()</span></span>
<span id="cb14-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index of the n farthest Pool Feature from Centroid of train features:"</span>, selected_indices)</span>
<span id="cb14-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Centroid of train features:'</span>, centroid_feature)</span>
<span id="cb14-4"></span>
<span id="cb14-5">plt.scatter(pool_features[selected_indices][:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], pool_features[selected_indices][:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Selected Data'</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s'</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>)</span>
<span id="cb14-6">plt.scatter(train_features[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], train_features[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Train Data'</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>)</span>
<span id="cb14-7">plt.scatter(pool_features[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], pool_features[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pool Data'</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb14-8">plt.scatter(centroid_feature[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], centroid_feature[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Centroid'</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s'</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>)</span>
<span id="cb14-9">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Feature 1'</span>)</span>
<span id="cb14-10">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Feature 2'</span>)</span>
<span id="cb14-11">plt.legend()</span>
<span id="cb14-12">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Train and Pool Data farthest from Centroid'</span>)</span>
<span id="cb14-13">plt.grid()</span>
<span id="cb14-14">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Index of the n farthest Pool Feature from Centroid of train features: [8, 1]
Centroid of train features: tensor([0.3676, 0.6126])</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><a href="diveristy_acquisition_demo_files/figure-html/cell-9-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://jaiswalsuraj487.github.io/publications_and_projects/data/diveristy_acquisition_demo_files/figure-html/cell-9-output-2.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>Active Learning</category>
  <guid>https://jaiswalsuraj487.github.io/publications_and_projects/data/diveristy_acquisition_demo.html</guid>
  <pubDate>Wed, 25 Oct 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
