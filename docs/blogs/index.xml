<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Suraj Jaiswal</title>
<link>https://jaiswalsuraj487.github.io/blogs/</link>
<atom:link href="https://jaiswalsuraj487.github.io/blogs/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.7.33</generator>
<lastBuildDate>Tue, 30 Jul 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Graph RAG</title>
  <dc:creator>Suraj Jaiswal</dc:creator>
  <link>https://jaiswalsuraj487.github.io/blogs/blogsData/graphrag.html</link>
  <description><![CDATA[ 




<section id="from-local-to-global-a-graph-rag-approach-to-query-focused-summarization" class="level1">
<h1>From Local to Global: A Graph RAG Approach to Query-Focused Summarization</h1>
<p>Approach uses an LLM to build a graph-based text index in two stages: first to derive an entity knowledge graph from the source documents, then to pregenerate community summaries for all groups of closely-related entities. Given a question, each community summary is used to generate a partial response, before all partial responses are again summarized in a final response to the user. Blog: https://www.microsoft.com/en-us/research/publication/from-local-to-global-a-graph-rag-approach-to-query-focused-summarization/</p>
<p>Paper link: https://arxiv.org/abs/2404.16130</p>
<p>Git repo: https://github.com/microsoft/graphrag</p>
<section id="for-quick-start" class="level2">
<h2 class="anchored" data-anchor-id="for-quick-start">For quick start:</h2>
<p>We will create and use use graphrag environment.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> graphrag python=3.11</span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To activate this environment, use</span></span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate graphrag</span></code></pre></div>
<p>To install the required packages, run the following command:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install graphrag rich</span></code></pre></div>
<p>Add openai key value in variable GRAPHRAG_API_KEY in .env file</p>
<p>configure settings.yaml file</p>
<p>change tokens_per_minute in setting.yaml file as per below https://platform.openai.com/docs/guides/rate-limits/usage-tiers</p>
</section>
</section>
<section id="to-initialize-the-project-in-the-current-folder" class="level1">
<h1>To initialize the project in the current folder:</h1>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> graphrag.index <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--init</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--root</span> .</span></code></pre></div>
<p>You should have you input files in ./input folder in current directory # To start graphrag indexing. using below command the data in ./input folder will be indexed</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> graphrag.index <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--root</span> .</span></code></pre></div>
<p>To try global search using command:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> graphrag.query <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--root</span> . <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--method</span> global <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"what are the top methods in this study?"</span></span></code></pre></div>
<p>Also Check:<br>
https://github.com/microsoft/graphrag/blob/main/examples_notebooks/global_search.ipynb</p>
<p>To try local search using command:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> graphrag.query <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--root</span> . <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--method</span> local <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"what are the top methods in this study?"</span></span></code></pre></div>
<p>Also Check: https://github.com/microsoft/graphrag/blob/main/examples_notebooks/local_search.ipynb</p>


</section>

 ]]></description>
  <category>NLP</category>
  <guid>https://jaiswalsuraj487.github.io/blogs/blogsData/graphrag.html</guid>
  <pubDate>Tue, 30 Jul 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>CI/CD Pipeline Documentation</title>
  <dc:creator>Suraj Jaiswal</dc:creator>
  <link>https://jaiswalsuraj487.github.io/blogs/blogsData/CICD Pipeline Documentation.html</link>
  <description><![CDATA[ 




<p>This document outlines the CI/CD pipeline configuration for deploying a Docker container to an EC2 instance using GitHub Actions, Amazon ECR (Elastic Container Registry), and EC2.</p>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>The CI/CD pipeline is triggered by a push event to the <code>non_ehr_dev</code> branch. <code>non_ehr_dev</code> branch name is specific to my usecase, but it can be any in your usecase. It comprises two primary jobs:</p>
<ol type="1">
<li><strong>Build and Push Docker Image</strong>: This job builds a Docker image and pushes it to Amazon ECR.</li>
<li><strong>Deploy to EC2</strong>: This job pulls the Docker image from ECR and deploys it to an EC2 instance.</li>
</ol>
</section>
<section id="workflow-details" class="level2">
<h2 class="anchored" data-anchor-id="workflow-details">Workflow Details</h2>
<section id="triggers" class="level3">
<h3 class="anchored" data-anchor-id="triggers">Triggers</h3>
<p>The workflow is initiated by a push to the <code>non_ehr_dev</code> branch.</p>
</section>
<section id="environment-variables" class="level3">
<h3 class="anchored" data-anchor-id="environment-variables">Environment Variables</h3>
<ul>
<li>AWS_REGION: The AWS region where resources are located.</li>
<li>AWS_ACCOUNT_ID: AWS account ID.</li>
<li>ECR_REPO_NAME: The name of the ECR repository.</li>
<li>ECR_REPOSITORY: The full URI of your ECR repository.</li>
</ul>
</section>
<section id="jobs" class="level3">
<h3 class="anchored" data-anchor-id="jobs">Jobs</h3>
</section>
<section id="build-and-push-docker-image" class="level3">
<h3 class="anchored" data-anchor-id="build-and-push-docker-image">Build and Push Docker Image</h3>
<p>This job handles the building of a Docker image and its subsequent push to Amazon ECR.</p>
<p><strong>Steps:</strong></p>
<ol type="1">
<li><strong>Checkout</strong>: Retrieves the repository code.</li>
<li><strong>Configure AWS credentials</strong>: Sets up AWS credentials using GitHub secrets.</li>
<li><strong>Login to Amazon ECR</strong>: Authenticates with Amazon ECR.</li>
<li><strong>Build, tag, and push image to Amazon ECR</strong>: Builds the Docker image, tags it, and pushes it to the ECR repository.</li>
</ol>
</section>
<section id="deploy-to-ec2" class="level3">
<h3 class="anchored" data-anchor-id="deploy-to-ec2">Deploy to EC2</h3>
<p>This job manages the deployment of the Docker container to an EC2 instance.</p>
<p><strong>Steps:</strong></p>
<ol type="1">
<li><strong>Configure AWS credentials</strong>: Sets up AWS credentials using GitHub secrets.</li>
<li><strong>Print ECR Repository</strong>: Displays the ECR repository URI.</li>
<li><strong>Login to Amazon ECR</strong>: Authenticates with Amazon ECR.</li>
<li><strong>Pull image from ECR</strong>: Retrieves the Docker image from the ECR repository.</li>
<li><strong>Prune unused Docker images</strong>: Cleans up unused Docker images to free up space.</li>
<li><strong>Stop and remove old container</strong>: Stops and removes the existing Docker container, if any.</li>
<li><strong>Run Docker container</strong>: Deploys the Docker container with the new image.</li>
</ol>
</section>
</section>
<section id="github-actions-workflow-configuration" class="level2">
<h2 class="anchored" data-anchor-id="github-actions-workflow-configuration">GitHub Actions Workflow Configuration</h2>
<p>The GitHub Actions workflow is defined in a YAML file. Below is the complete configuration:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Deploy to EC2</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">branches</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"non_ehr_dev"</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AWS_REGION</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.AWS_REGION }}</span></span>
<span id="cb1-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AWS_ACCOUNT_ID</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.AWS_ACCOUNT_ID }}</span></span>
<span id="cb1-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ECR_REPO_NAME</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.NON_EHR_DEV_ECR_REPO }}</span></span>
<span id="cb1-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ECR_REPOSITORY</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.NON_EHR_DEV_ECR_REPO }}"</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">permissions</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contents</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> read</span></span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jobs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Build and Push Docker Image</span></span>
<span id="cb1-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span></span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Checkout</span></span>
<span id="cb1-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v3</span></span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Configure AWS credentials</span></span>
<span id="cb1-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> aws-actions/configure-aws-credentials@v1</span></span>
<span id="cb1-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws-access-key-id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.AWS_ACCESS_KEY_ID }}</span></span>
<span id="cb1-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws-secret-access-key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.AWS_SECRET_ACCESS_KEY }}</span></span>
<span id="cb1-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws-region</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.AWS_REGION }}</span></span>
<span id="cb1-31"></span>
<span id="cb1-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Login to Amazon ECR</span></span>
<span id="cb1-33"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">      run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-34">        aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY }}</span>
<span id="cb1-35"></span>
<span id="cb1-36"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Build, tag, and push image to Amazon ECR</span></span>
<span id="cb1-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> build-image</span></span>
<span id="cb1-38"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">      run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-39">        sudo docker build -t ${{ env.ECR_REPO_NAME }} .</span>
<span id="cb1-40">        sudo docker tag ${{ env.ECR_REPO_NAME }}:latest ${{ env.ECR_REPOSITORY }}:latest</span>
<span id="cb1-41">        sudo docker push ${{ env.ECR_REPOSITORY }}:latest</span>
<span id="cb1-42"></span>
<span id="cb1-43"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deploy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-44"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Deploy to EC2</span></span>
<span id="cb1-45"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">needs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> build</span></span>
<span id="cb1-46"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">self-hosted</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> non-ehr-dev</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb1-47"></span>
<span id="cb1-48"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-49"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Configure AWS credentials</span></span>
<span id="cb1-50"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> aws-actions/configure-aws-credentials@v1</span></span>
<span id="cb1-51"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-52"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws-access-key-id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.AWS_ACCESS_KEY_ID }}</span></span>
<span id="cb1-53"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws-secret-access-key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.AWS_SECRET_ACCESS_KEY }}</span></span>
<span id="cb1-54"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws-region</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.AWS_REGION }}</span></span>
<span id="cb1-55"></span>
<span id="cb1-56"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Print ECR Repository</span></span>
<span id="cb1-57"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> echo ${{ env.ECR_REPOSITORY }}</span></span>
<span id="cb1-58"></span>
<span id="cb1-59"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Login to Amazon ECR</span></span>
<span id="cb1-60"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">      run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-61">        aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY }}</span>
<span id="cb1-62"></span>
<span id="cb1-63"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Pull image from ECR</span></span>
<span id="cb1-64"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> sudo docker pull ${{ env.ECR_REPOSITORY }}:latest</span></span>
<span id="cb1-65"></span>
<span id="cb1-66"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Prune unused Docker images</span></span>
<span id="cb1-67"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> sudo docker image prune -a -f</span></span>
<span id="cb1-68"></span>
<span id="cb1-69"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Stop and remove old container</span></span>
<span id="cb1-70"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> sudo docker rm -f python-app-container || true</span></span>
<span id="cb1-71"></span>
<span id="cb1-72"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Run docker container</span></span>
<span id="cb1-73"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">      run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-74">        sudo docker run -d -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} -v /home/ubuntu/private_key:/app/private_key \\\\</span>
<span id="cb1-75">        -p 8000:8000 -p 8200:8200 -p 8501:8501 \\\\</span>
<span id="cb1-76">        --name python-app-container \\\\</span>
<span id="cb1-77">        ${{ env.ECR_REPOSITORY }}:latest</span></code></pre></div>
</section>
<section id="setting-up-the-github-actions-runner-on-ec2" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-github-actions-runner-on-ec2">Setting Up the GitHub Actions Runner on EC2</h2>
<p>To run the GitHub Actions runner on your EC2 instance and deploy your application, follow these steps:</p>
<section id="step-1-create-and-configure-an-ec2-instance" class="level3">
<h3 class="anchored" data-anchor-id="step-1-create-and-configure-an-ec2-instance">Step 1: Create and Configure an EC2 Instance</h3>
<ol type="1">
<li><strong>Launch an EC2 instance</strong> with an appropriate Amazon Machine Image (AMI), such as Ubuntu.</li>
<li><strong>Ensure the instance has internet access</strong> or the necessary VPC settings to communicate with GitHub.</li>
<li><strong>Attach an IAM role</strong> to the instance with the necessary permissions for ECR and ECS, if applicable.</li>
<li><strong>Install Docker</strong> on the EC2 instance:</li>
</ol>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt-get update</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt-get install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> docker.io</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> usermod <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-aG</span> docker <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$USER</span></span></code></pre></div>
</section>
<section id="step-2-install-github-runner-on-ec2" class="level3">
<h3 class="anchored" data-anchor-id="step-2-install-github-runner-on-ec2">Step 2: Install GitHub Runner on EC2</h3>
<ol type="1">
<li><strong>Connect to your EC2 instance via SSH</strong>.</li>
<li><strong>Download the runner</strong>:</li>
</ol>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> actions-runner <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> actions-runner</span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> actions-runner-linux-x64-2.278.0.tar.gz <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-L</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>https://github.com/actions/runner/releases/download/v2.278.0/actions-runner-linux-x64-2.278.0.tar.gz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar</span> xzf ./actions-runner-linux-x64-2.278.0.tar.gz</span></code></pre></div>
<ol start="3" type="1">
<li><strong>Install dependencies</strong>:</li>
</ol>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt-get install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> libicu-dev libssl-dev</span></code></pre></div>
</section>
<section id="step-3-configure-and-start-the-github-runner" class="level3">
<h3 class="anchored" data-anchor-id="step-3-configure-and-start-the-github-runner">Step 3: Configure and Start the GitHub Runner</h3>
<ol type="1">
<li><strong>Configure the runner</strong>:
<ul>
<li>Go to your GitHub repository.</li>
<li>Navigate to <strong>Settings</strong> &gt; <strong>Actions</strong> &gt; <strong>Runners</strong>.</li>
<li>Click on <strong>Add runner</strong> and follow the instructions to generate a configuration token.</li>
<li>Use the provided commands to configure the runner:</li>
</ul>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./config.sh</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--url</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>https://github.com/YOUR_GITHUB_USERNAME/YOUR_REPO_NAME<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> --token YOUR_CONFIGURATION_TOKEN</span></code></pre></div></li>
<li><strong>Start the runner</strong>:</li>
</ol>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./run.sh</span></span></code></pre></div>
</section>
<section id="update-your-github-actions-workflow" class="level3">
<h3 class="anchored" data-anchor-id="update-your-github-actions-workflow">Update Your GitHub Actions Workflow</h3>
<p>Ensure your GitHub Actions workflow is configured to run on your self-hosted runner by updating the <code>runs-on</code> field:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deploy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb7-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Deploy to EC2</span></span>
<span id="cb7-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">needs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> build</span></span>
<span id="cb7-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">self-hosted</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> non-ehr-dev</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span></code></pre></div>
<p>By following these steps, you will set up a GitHub Actions runner on your EC2 instance, allowing you to deploy your Docker container directly to EC2 using your CI/CD pipeline.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This GitHub Actions workflow automates the process of building a Docker image, pushing it to Amazon ECR, and deploying it to an EC2 instance.</p>
<p>PS: This documentation is for my personal reference and the data is taken from net and may require adjustments based on specific project requirements.</p>


</section>

 ]]></description>
  <category>System</category>
  <guid>https://jaiswalsuraj487.github.io/blogs/blogsData/CICD Pipeline Documentation.html</guid>
  <pubDate>Tue, 02 Jul 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Setting up Conda Environment for ML Projects</title>
  <dc:creator>Suraj Jaiswal and Ayush Shrivastava</dc:creator>
  <link>https://jaiswalsuraj487.github.io/blogs/blogsData/conda_setup.html</link>
  <description><![CDATA[ 




<p>This blogpost is written for myself as I keep forgetting the steps to set up a conda environment for my ML projects.</p>
<section id="install-conda" class="level2">
<h2 class="anchored" data-anchor-id="install-conda">Install Conda</h2>
<p>These four commands quickly and quietly install the latest 64-bit version of the installer and then clean up after themselves. To install a different version or architecture of Miniconda for Linux, change the name of the <code>.sh</code> installer in the <code>wget</code> command.</p>
<p>Visit the <a href="https://docs.anaconda.com/free/miniconda/">Miniconda website</a> to find the latest version of Miniconda for Linux.</p>
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/images/conda_image.png" alt="conda logo" width="300" height="auto"></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> ~/miniconda3</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-O</span> ~/miniconda3/miniconda.sh</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bash</span> ~/miniconda3/miniconda.sh <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-b</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-u</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> ~/miniconda3</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-rf</span> ~/miniconda3/miniconda.sh</span></code></pre></div>
<p>After installing, initialize your newly-installed Miniconda. The following commands initialize for bash and zsh shells:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">~/miniconda3/bin/conda</span> init bash</span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">~/miniconda3/bin/conda</span> init zsh</span></code></pre></div>
<p>you can run <code>conda -V</code> to check if conda is installed correctly.</p>
</section>
<section id="creating-conda-environment" class="level2">
<h2 class="anchored" data-anchor-id="creating-conda-environment">Creating Conda Environment</h2>
<p>The below command will create the conda environment with the name <code>EnvName</code> and python version 3.9.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> EnvName python=3.9 jupyter</span></code></pre></div>
<p>To activate the environment, run the below command:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate EnvName</span></code></pre></div>
</section>
<section id="installing-pytorch" class="level2">
<h2 class="anchored" data-anchor-id="installing-pytorch">Installing Pytorch</h2>
<p>Visit the <a href="https://pytorch.org/get-started/locally/">Pytorch website</a> to find the latest version of Pytorch. You can choose your system configuration and get the command to install Pytorch.</p>
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/images/ChooseBuild.png" alt="ChooseBuild" width="700" height="auto"></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> install pytorch torchvision torchaudio pytorch-cuda=11.8 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> pytorch <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> nvidia</span></code></pre></div>
<p>check if everything is installed correctly by running the below command:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"import torch; print(torch.__version__)"</span></span></code></pre></div>
<p>Installing other libraries and packages.</p>
</section>
<section id="to-check-occupied-space-in-folder" class="level2">
<h2 class="anchored" data-anchor-id="to-check-occupied-space-in-folder">To check occupied space in folder</h2>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> du <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-hs</span></span></code></pre></div>
</section>
<section id="some-useful-shortcuts" class="level2">
<h2 class="anchored" data-anchor-id="some-useful-shortcuts">Some useful shortcuts:</h2>
<ul>
<li>To wrap words in VS code, use <code>Alt + Z</code></li>
<li>To traverse between in mouse focus between files in VS code, use <code>Alt + Left/Right Arrow</code></li>
</ul>
<p>For more visit <a href="https://ayushshrivstava.github.io/">Ayush Shrivastava</a></p>


</section>

 ]]></description>
  <category>System</category>
  <guid>https://jaiswalsuraj487.github.io/blogs/blogsData/conda_setup.html</guid>
  <pubDate>Sun, 16 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Process and Screen</title>
  <dc:creator>Suraj Jaiswal and Siddhesh Dosi</dc:creator>
  <link>https://jaiswalsuraj487.github.io/blogs/blogsData/process_and_screen.html</link>
  <description><![CDATA[ 




<p>To know the owner of the process</p>
<pre><code>ps -ef | grep 63592</code></pre>
<p>Kill a process</p>
<pre><code>kill pid</code></pre>
<p>screen: &lt;sid.sname&gt;</p>
<table class="caption-top table">
<colgroup>
<col style="width: 58%">
<col style="width: 41%">
</colgroup>
<thead>
<tr class="header">
<th>Instruction</th>
<th>Command</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>List all the screens</td>
<td><code>screen -ls</code></td>
</tr>
<tr class="even">
<td>Create/Start a new screen</td>
<td><code>screen -S sname</code></td>
</tr>
<tr class="odd">
<td>Quit/Terminate a screen</td>
<td><code>screen -XS sname quit</code></td>
</tr>
<tr class="even">
<td>Scroll history in the screen</td>
<td><code>Ctrl + A, ESC</code></td>
</tr>
<tr class="odd">
<td>Detach the screen</td>
<td><code>Ctrl + A + D</code></td>
</tr>
<tr class="even">
<td>Attach/Resume the screen</td>
<td><code>screen -r sid</code> or <code>screen -r sname</code></td>
</tr>
<tr class="odd">
<td>Kill the process with id: sid</td>
<td><code>kill sid</code></td>
</tr>
<tr class="even">
<td>Detach an elsewhere running screen</td>
<td><code>screen -d sid</code> or <code>screen -d sname</code></td>
</tr>
</tbody>
</table>
<section id="step-by-step-example" class="level2">
<h2 class="anchored" data-anchor-id="step-by-step-example">Step&nbsp; by step example:</h2>
<ol type="1">
<li>screen -S sample</li>
<li>run some process with stdout output</li>
<li>ctrl + A, Esc (scroll using up and down key)</li>
<li>ctrl + A + D (Detach)</li>
<li>screen -ls</li>
</ol>
<p><em>(base) dosisiddhesh@lingolexico:/home/dosisiddhesh$ screen -ls</em></p>
<p><em>There is a screen on:</em></p>
<p><em>220829.sample&nbsp;&nbsp; (11/17/2023 11:55:27 AM)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (Detached)</em></p>
<ol type="1">
<li>screen -r sample (resume)</li>
<li>ctrl + A + D (Detach)</li>
<li>screen -XS sample quit (Screen terminated)</li>
<li>screen -ls</li>
</ol>
<p><em>No Sockets found in /run/screen/S-dosisiddhesh.</em></p>
<p>Please visit : <a href="https://git-siddhesh.github.io/">Siddhesh Dosi</a> for more intersting content</p>


</section>

 ]]></description>
  <category>System</category>
  <guid>https://jaiswalsuraj487.github.io/blogs/blogsData/process_and_screen.html</guid>
  <pubDate>Sat, 18 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Logistic Regression using the Pyro</title>
  <dc:creator>Suraj Jaiswal</dc:creator>
  <link>https://jaiswalsuraj487.github.io/blogs/blogsData/Logistic_regression_pyro.html</link>
  <description><![CDATA[ 




<p>Here we implement Logistic Regression using the Pyro library.</p>
<div id="cell-2" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> make_moons</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb1-7"></span>
<span id="cb1-8">sns.set_context(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"notebook"</span>)</span>
<span id="cb1-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb1-10">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyro</span>
<span id="cb1-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ImportError</span>:</span>
<span id="cb1-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>pip install pyro<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>ppl</span>
<span id="cb1-13">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyro</span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyro.distributions <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> dist</span>
<span id="cb1-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pyro.infer <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MCMC, NUTS, Predictive</span></code></pre></div>
</div>
<div id="cell-3" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">X, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_moons(n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, noise<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb2-2">X_train, X_test, y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y,test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb2-3">X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(X_train).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb2-4">y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(y_train).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb2-5">X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(X_test).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb2-6">y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(y_test).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb2-7">X_train.shape, y_train.shape,X_test.shape, y_test.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(torch.Size([80, 2]), torch.Size([80]), torch.Size([20, 2]), torch.Size([20]))</code></pre>
</div>
</div>
<div id="cell-4" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Separate data points by class</span></span>
<span id="cb4-2">class_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-3">class_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a scatter plot</span></span>
<span id="cb4-6">plt.scatter(class_0[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], class_0[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Class 0"</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>)</span>
<span id="cb4-7">plt.scatter(class_1[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], class_1[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Class 1"</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>)</span>
<span id="cb4-8"></span>
<span id="cb4-9">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 1"</span>)</span>
<span id="cb4-10">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 2"</span>)</span>
<span id="cb4-11">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Generated Moons Dataset"</span>)</span>
<span id="cb4-12">plt.legend()</span>
<span id="cb4-13">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/Logistic_regression_pyro_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-5" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> logistic_model(X, y):</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample from prior</span></span>
<span id="cb5-3">    w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyro.sample(</span>
<span id="cb5-4">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>, dist.Normal(torch.zeros(X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), torch.ones(X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span>
<span id="cb5-5">    )</span>
<span id="cb5-6">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyro.sample(</span>
<span id="cb5-7">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>, dist.Normal(torch.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), torch.ones(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb5-8">    )</span>
<span id="cb5-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pyro.iarange(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>, X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb5-10">        model_logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.matmul(X, w) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb5-11">        pyro.sample(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'obs'</span>, dist.Bernoulli(logits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model_logits), obs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y)</span></code></pre></div>
</div>
<p>We use NUTS MCMC sampling to sample the posterior and take 1000 samples for posterior distribution and use 500 samples as burn/warm up.</p>
<div id="cell-7" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">nuts_kernel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NUTS(logistic_model, adapt_step_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-2">mcmc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MCMC(nuts_kernel, num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, warmup_steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb6-3">mcmc.run(X_train, y_train)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warmup:   0%|          | 3/1500 [00:00, 25.77it/s, step size=1.20e-01, acc. prob=0.333]Sample: 100%|██████████| 1500/1500 [00:32, 46.05it/s, step size=6.50e-01, acc. prob=0.929] </code></pre>
</div>
</div>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">posterior_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mcmc.get_samples()</span></code></pre></div>
</div>
<p>Following are the trace plots for the parameters of the posterior distribution.</p>
<div id="cell-10" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> arviz <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> az</span>
<span id="cb9-2"></span>
<span id="cb9-3">idata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> az.from_pyro(mcmc)</span>
<span id="cb9-4">az.plot_trace(idata, compact<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>c:\Users\Dell\AppData\Local\Programs\Python\Python311\Lib\site-packages\arviz\data\io_pyro.py:157: UserWarning: Could not get vectorized trace, log_likelihood group will be omitted. Check your model vectorization or set log_likelihood=False
  warnings.warn(</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/Logistic_regression_pyro_files/figure-html/cell-8-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-11" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">posterior_samples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>].mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), posterior_samples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>].mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(tensor([ 1.1069, -2.0874]), tensor([0.1179]))</code></pre>
</div>
</div>
<div id="cell-12" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">posterior_samples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>].std(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), posterior_samples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>].std(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(tensor([0.3259, 0.5515]), tensor([0.3369]))</code></pre>
</div>
</div>
<p>Ploting the decision boundry for the test data</p>
<div id="cell-14" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a function to plot the decision boundary</span></span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_decision_boundary(X, y, posterior_samples, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Posterior Decision Boundary"</span>):</span>
<span id="cb15-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a meshgrid of points for the entire feature space</span></span>
<span id="cb15-4">    x_min, x_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb15-5">    y_min, y_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb15-6">    xx, yy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.meshgrid(torch.linspace(x_min, x_max, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), torch.linspace(y_min, y_max, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb15-7"></span>
<span id="cb15-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flatten the meshgrid for prediction</span></span>
<span id="cb15-9">    grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((xx.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), yy.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb15-10"></span>
<span id="cb15-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the number of posterior samples</span></span>
<span id="cb15-12">    num_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(posterior_samples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>])</span>
<span id="cb15-13"></span>
<span id="cb15-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the posterior decision boundary for each sample</span></span>
<span id="cb15-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_samples):</span>
<span id="cb15-16">        w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> posterior_samples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>][i]</span>
<span id="cb15-17">        b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> posterior_samples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>][i]</span>
<span id="cb15-18"></span>
<span id="cb15-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the logits and probabilities</span></span>
<span id="cb15-20">        logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.matmul(grid, w) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb15-21">        probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> torch.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>logits))</span>
<span id="cb15-22">        probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> probs.detach().numpy().reshape(xx.shape)</span>
<span id="cb15-23"></span>
<span id="cb15-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the decision boundary</span></span>
<span id="cb15-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.contourf(xx, yy, probs, levels=[0, 0.5, 1], alpha=0.2, cmap=plt.cm.RdBu)</span></span>
<span id="cb15-26">        plt.contourf(xx, yy, probs, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.cm.RdBu)</span>
<span id="cb15-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the data points</span></span>
<span id="cb15-28">    plt.scatter(X[y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], X[y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Class 0"</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>)</span>
<span id="cb15-29">    plt.scatter(X[y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], X[y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Class 1"</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span>
<span id="cb15-30"></span>
<span id="cb15-31">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 1"</span>)</span>
<span id="cb15-32">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 2"</span>)</span>
<span id="cb15-33">    plt.title(title)</span>
<span id="cb15-34">    plt.legend()</span>
<span id="cb15-35">    plt.show()</span>
<span id="cb15-36"></span>
<span id="cb15-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the decision boundary on the test data</span></span>
<span id="cb15-38">plot_decision_boundary(X_test, y_test, posterior_samples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/Logistic_regression_pyro_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>



 ]]></description>
  <category>Regression</category>
  <guid>https://jaiswalsuraj487.github.io/blogs/blogsData/Logistic_regression_pyro.html</guid>
  <pubDate>Thu, 09 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Image Super Resolution</title>
  <dc:creator>Suraj Jaiswal</dc:creator>
  <link>https://jaiswalsuraj487.github.io/blogs/blogsData/Image_super_resolution.html</link>
  <description><![CDATA[ 




<section id="introdution" class="level1">
<h1>Introdution</h1>
<p>The central aim of Super-Resolution (SR) is to generate a higher resolution image from lower resolution images. It is basically the process of retrieving the underlying high quality original image given a corrupted image.</p>
<section id="why-super-resolution" class="level2">
<h2 class="anchored" data-anchor-id="why-super-resolution">Why Super Resolution?</h2>
<p>High resolution image offers a high pixel density and thereby more details about the original scene. The need for high resolution is common in computer vision applications for better performance in pattern recognition and analysis of images. High resolution is of importance in medical imaging for diagnosis. Many applications require zooming of a specific area of interest in the image wherein high resolution becomes essential, e.g.&nbsp;surveillance, forensic and satellite imaging applications.</p>
<p>However, high resolution images are not always available. This is since the setup for high resolution imaging proves expensive and also it may not always be feasible due to the inherent limitations of the sensor, optics manufacturing technology. These problems can be overcome through the use of image processing algorithms, which are relatively inexpensive, giving rise to concept of super-resolution. It provides an advantage as it may cost less and the existing low resolution imaging systems can still be utilized.</p>
<p>Camera image:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/Image_super_resolution_files/figure-html/cell-2-1-flower_blur_unblur.jpg" class="img-fluid figure-img"></p>
<figcaption>flower_blur_unblur.jpg</figcaption>
</figure>
</div>
<p>Security camera image:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/Image_super_resolution_files/figure-html/cell-2-3-numberplate_blur_unblur.jpg" class="img-fluid figure-img"></p>
<figcaption>numberplate_blur_unblur.jpg</figcaption>
</figure>
</div>
<p>Geological image:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/Image_super_resolution_files/figure-html/cell-2-2-geo_lr_hr.png" class="img-fluid figure-img"></p>
<figcaption>geo_lr_hr.png</figcaption>
</figure>
</div>
</section>
<section id="how-we-create-our-dataset" class="level2">
<h2 class="anchored" data-anchor-id="how-we-create-our-dataset">How we create our dataset?</h2>
<p>We always do not have low and high resolution images of the same scene. So we create our own dataset. We take high resolution images (from net) and from that we create low resolution images by downscaling the high resolution images. We have used two methods for downscaling the images: 1. Bicubic Interpolation 2. Gaussian Blur</p>
<p>We won’t discussing in detail about these methods. We will be using the Gaussian Blur method for downscaling the images.</p>
<div id="cell-4" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> keras</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cv2</span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load MNIST dataset</span></span>
<span id="cb1-6">(x_train, _), (_, _) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.datasets.mnist.load_data()</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select a random image from the dataset</span></span>
<span id="cb1-9">image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train[np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, x_train.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])]</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalize the pixel values</span></span>
<span id="cb1-12">image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'float32'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Blur the image using Gaussian filter</span></span>
<span id="cb1-15">blurred_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv2.GaussianBlur(image, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the original and blurred images</span></span>
<span id="cb1-18">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-19">plt.imshow(image, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>)</span>
<span id="cb1-20">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Original Image'</span>)</span>
<span id="cb1-21">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb1-22"></span>
<span id="cb1-23">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-24">plt.imshow(blurred_image, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>)</span>
<span id="cb1-25">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Blurred Image'</span>)</span>
<span id="cb1-26">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb1-27"></span>
<span id="cb1-28">plt.tight_layout()</span>
<span id="cb1-29">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/Image_super_resolution_files/figure-html/cell-2-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>One other quick way is to size down image then resize it to original size. This way we can get low resolution image.</p>
</section>
</section>
<section id="main-task" class="level1">
<h1>Main task</h1>
<p>Our main task is given a low resolution image, we have to generate a high resolution image. We will be using the following methods for this task: 1. CNN (Convolutional Neural Network) 2. GANS (Generative Adversarial Networks)</p>
<p>As soon as we see the images dataset, first we think is about is Convolutions. So we will be using CNN for this task but why?</p>
<section id="but-why-cnn-why-not-mlp" class="level2">
<h2 class="anchored" data-anchor-id="but-why-cnn-why-not-mlp">But why CNN? Why not MLP?</h2>
<ol type="1">
<li>MLPs (Multilayer Perceptron) use one perceptron for each input (e.g.&nbsp;pixel in an image) and the amount of weights rapidly becomes unmanageable for large images. It includes too many parameters because it is fully connected. Each node is connected to every other node in next and the previous layer, forming a very dense web — resulting in redundancy and inefficiency. As a result, difficulties arise whilst training and overfitting can occur which makes it lose the ability to generalize.</li>
<li>Another common problem is that MLPs react differently to an input (images) and its shifted version — they are not translation invariant.</li>
<li>The main problems is that spatial information is lost when the image is flattened(matrix to vector) into an MLP.</li>
</ol>
<p>Basic implementation of CNN and MLP on Mnist dataset for classification.(you can skip if you know basics about CNN and MLP)</p>
<div id="cell-10" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mnist</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sequential</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.layers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dense, Flatten, Conv2D, MaxPooling2D</span></code></pre></div>
</div>
<div id="cell-11" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load MNIST dataset</span></span>
<span id="cb3-2">(x_train, y_train), (x_test, y_test) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mnist.load_data()</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Preprocess the data</span></span>
<span id="cb3-5">x_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span></span>
<span id="cb3-6">x_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span></span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape the data for MLP</span></span>
<span id="cb3-9">x_train_mlp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train.reshape((<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>))</span>
<span id="cb3-10">x_test_mlp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_test.reshape((<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>))</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape the data for CNN</span></span>
<span id="cb3-13">x_train_cnn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train.reshape((<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb3-14">x_test_cnn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_test.reshape((<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/Image_super_resolution_files/figure-html/cell-12-1-MLP_fig_imageclassification.jpg" class="img-fluid figure-img"></p>
<figcaption>MLP_fig_imageclassification.jpg</figcaption>
</figure>
</div>
<div id="cell-13" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MLP model</span></span>
<span id="cb4-2">mlp_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sequential()</span>
<span id="cb4-3">mlp_model.add(Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, input_shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,)))</span>
<span id="cb4-4">mlp_model.add(Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>))</span>
<span id="cb4-5">mlp_model.add(Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'softmax'</span>))</span>
<span id="cb4-6">mlp_model.summary()</span>
<span id="cb4-7">mlp_model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adam'</span>, loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sparse_categorical_crossentropy'</span>, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accuracy'</span>])</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train MLP model</span></span>
<span id="cb4-10">mlp_model.fit(x_train_mlp, y_train, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, validation_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(x_test_mlp, y_test))</span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Evaluate MLP model</span></span>
<span id="cb4-13">mlp_loss, mlp_accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mlp_model.evaluate(x_test_mlp, y_test)</span>
<span id="cb4-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MLP Accuracy:"</span>, mlp_accuracy)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model: "sequential_2"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 dense_5 (Dense)             (None, 256)               200960    
                                                                 
 dense_6 (Dense)             (None, 128)               32896     
                                                                 
 dense_7 (Dense)             (None, 10)                1290      
                                                                 
=================================================================
Total params: 235146 (918.54 KB)
Trainable params: 235146 (918.54 KB)
Non-trainable params: 0 (0.00 Byte)
_________________________________________________________________
Epoch 1/10
1875/1875 [==============================] - 10s 5ms/step - loss: 0.2051 - accuracy: 0.9395 - val_loss: 0.1189 - val_accuracy: 0.9636
Epoch 2/10
1875/1875 [==============================] - 10s 5ms/step - loss: 0.0852 - accuracy: 0.9729 - val_loss: 0.0767 - val_accuracy: 0.9756
Epoch 3/10
1875/1875 [==============================] - 9s 5ms/step - loss: 0.0580 - accuracy: 0.9815 - val_loss: 0.0714 - val_accuracy: 0.9762
Epoch 4/10
1875/1875 [==============================] - 9s 5ms/step - loss: 0.0455 - accuracy: 0.9856 - val_loss: 0.0743 - val_accuracy: 0.9761
Epoch 5/10
1875/1875 [==============================] - 12s 7ms/step - loss: 0.0352 - accuracy: 0.9889 - val_loss: 0.0663 - val_accuracy: 0.9798
Epoch 6/10
1875/1875 [==============================] - 12s 7ms/step - loss: 0.0285 - accuracy: 0.9907 - val_loss: 0.0763 - val_accuracy: 0.9792
Epoch 7/10
1875/1875 [==============================] - 10s 6ms/step - loss: 0.0217 - accuracy: 0.9932 - val_loss: 0.0899 - val_accuracy: 0.9775
Epoch 8/10
1875/1875 [==============================] - 9s 5ms/step - loss: 0.0211 - accuracy: 0.9933 - val_loss: 0.0878 - val_accuracy: 0.9792
Epoch 9/10
1875/1875 [==============================] - 7s 4ms/step - loss: 0.0189 - accuracy: 0.9939 - val_loss: 0.1028 - val_accuracy: 0.9746
Epoch 10/10
1875/1875 [==============================] - 7s 4ms/step - loss: 0.0165 - accuracy: 0.9941 - val_loss: 0.0898 - val_accuracy: 0.9791
313/313 [==============================] - 1s 3ms/step - loss: 0.0898 - accuracy: 0.9791
MLP Accuracy: 0.9790999889373779</code></pre>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/Image_super_resolution_files/figure-html/cell-14-1-CNN_fig_imageclassification.jpg" class="img-fluid figure-img"></p>
<figcaption>CNN_fig_imageclassification.jpg</figcaption>
</figure>
</div>
<div id="cell-15" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CNN model</span></span>
<span id="cb6-2">cnn_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sequential()</span>
<span id="cb6-3">cnn_model.add(Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, input_shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb6-4">cnn_model.add(MaxPooling2D((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)))</span>
<span id="cb6-5">cnn_model.add(Flatten())</span>
<span id="cb6-6">cnn_model.add(Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>))</span>
<span id="cb6-7">cnn_model.add(Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'softmax'</span>))</span>
<span id="cb6-8">cnn_model.summary()</span>
<span id="cb6-9">cnn_model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adam'</span>, loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sparse_categorical_crossentropy'</span>, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accuracy'</span>])</span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train CNN model</span></span>
<span id="cb6-12">cnn_model.fit(x_train_cnn, y_train, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, validation_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(x_test_cnn, y_test))</span>
<span id="cb6-13"></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Evaluate CNN model</span></span>
<span id="cb6-15">cnn_loss, cnn_accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_model.evaluate(x_test_cnn, y_test)</span>
<span id="cb6-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CNN Accuracy:"</span>, cnn_accuracy)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model: "sequential_3"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 conv2d_1 (Conv2D)           (None, 26, 26, 32)        320       
                                                                 
 max_pooling2d_1 (MaxPoolin  (None, 13, 13, 32)        0         
 g2D)                                                            
                                                                 
 flatten_1 (Flatten)         (None, 5408)              0         
                                                                 
 dense_8 (Dense)             (None, 128)               692352    
                                                                 
 dense_9 (Dense)             (None, 10)                1290      
                                                                 
=================================================================
Total params: 693962 (2.65 MB)
Trainable params: 693962 (2.65 MB)
Non-trainable params: 0 (0.00 Byte)
_________________________________________________________________
Epoch 1/10
1875/1875 [==============================] - 36s 19ms/step - loss: 0.1383 - accuracy: 0.9592 - val_loss: 0.0611 - val_accuracy: 0.9816
Epoch 2/10
1875/1875 [==============================] - 35s 19ms/step - loss: 0.0479 - accuracy: 0.9851 - val_loss: 0.0432 - val_accuracy: 0.9851
Epoch 3/10
1875/1875 [==============================] - 37s 20ms/step - loss: 0.0295 - accuracy: 0.9908 - val_loss: 0.0427 - val_accuracy: 0.9856
Epoch 4/10
1875/1875 [==============================] - 34s 18ms/step - loss: 0.0197 - accuracy: 0.9939 - val_loss: 0.0475 - val_accuracy: 0.9843
Epoch 5/10
1875/1875 [==============================] - 38s 20ms/step - loss: 0.0132 - accuracy: 0.9955 - val_loss: 0.0455 - val_accuracy: 0.9862
Epoch 6/10
1875/1875 [==============================] - 40s 21ms/step - loss: 0.0103 - accuracy: 0.9965 - val_loss: 0.0448 - val_accuracy: 0.9864
Epoch 7/10
1875/1875 [==============================] - 42s 23ms/step - loss: 0.0072 - accuracy: 0.9977 - val_loss: 0.0475 - val_accuracy: 0.9871
Epoch 8/10
1875/1875 [==============================] - 40s 21ms/step - loss: 0.0057 - accuracy: 0.9982 - val_loss: 0.0526 - val_accuracy: 0.9857
Epoch 9/10
1875/1875 [==============================] - 41s 22ms/step - loss: 0.0063 - accuracy: 0.9977 - val_loss: 0.0576 - val_accuracy: 0.9856
Epoch 10/10
1875/1875 [==============================] - 43s 23ms/step - loss: 0.0037 - accuracy: 0.9988 - val_loss: 0.0526 - val_accuracy: 0.9861
313/313 [==============================] - 2s 6ms/step - loss: 0.0526 - accuracy: 0.9861
CNN Accuracy: 0.9861000180244446</code></pre>
</div>
</div>
<div id="cell-16" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select a random image from the test set</span></span>
<span id="cb8-2">index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, x_test.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the image and its label</span></span>
<span id="cb8-4">image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_test[index]</span>
<span id="cb8-5">label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_test[index]</span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape the image for MLP model prediction</span></span>
<span id="cb8-7">image_mlp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.reshape((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>))</span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape the image for CNN model prediction</span></span>
<span id="cb8-9">image_cnn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.reshape((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predict using MLP model</span></span>
<span id="cb8-11">mlp_prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(mlp_model.predict(image_mlp))</span>
<span id="cb8-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predict using CNN model</span></span>
<span id="cb8-13">cnn_prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(cnn_model.predict(image_cnn))</span>
<span id="cb8-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the image and predictions</span></span>
<span id="cb8-15">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb8-16"></span>
<span id="cb8-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MLP plot</span></span>
<span id="cb8-18">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-19">plt.imshow(image, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>)</span>
<span id="cb8-20">plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"MLP Prediction: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mlp_prediction<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-21">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb8-22"></span>
<span id="cb8-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CNN plot</span></span>
<span id="cb8-24">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb8-25">plt.imshow(image, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>)</span>
<span id="cb8-26">plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"CNN Prediction: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cnn_prediction<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-27">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb8-28">plt.tight_layout()</span>
<span id="cb8-29">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1/1 [==============================] - 0s 156ms/step
1/1 [==============================] - 0s 82ms/step</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/Image_super_resolution_files/figure-html/cell-7-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>CNN does perform well on image classification task than MLP but above for toy dataset MNIST the difference is not that much. But for real world dataset the difference is huge.</p>
<p>Show the difference between MLP and CNN for real world dataset.(open MLP vs CNN using transfer learning VGG16 on Snake vs Antelope dataset.ipynb)</p>
<p>Here we can see that CNN is better than MLP for image classification. So we will be using CNN for our task.</p>
</section>
</section>
<section id="cnn-for-super-resolution" class="level1">
<h1>CNN for Super Resolution</h1>
<p>Usually we see in cnn we have convolutional layers and max-pooling layers. Due to which the end is image is shrinked. So how can we use CNN for super resolution? We use architecture called as UNET.</p>
<section id="unet-architecture-for-super-resolution" class="level2">
<h2 class="anchored" data-anchor-id="unet-architecture-for-super-resolution">UNET architecture for super resolution:</h2>
<p>Here we are just understand the high level view of unet architecture. We will be discussing in detail about unet in next blog. Unet has two parts: 1. Encoder 2. Decoder</p>
<p>Encoder is same as CNN where we have convolutional layers and max-pooling layers. But in decoder we have upsampling layers instead of max-pooling layers. So the image is not shrinked and we get the high resolution image.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/Image_super_resolution_files/figure-html/cell-20-1-u-net-architecture.png" class="img-fluid figure-img"></p>
<figcaption>u-net-architecture.png</figcaption>
</figure>
</div>
</section>
</section>
<section id="gans-generative-adversarial-networks" class="level1">
<h1>GANS Generative Adversarial Networks</h1>
<section id="how-gans-works-analogy-counterfeiters-and-police" class="level2">
<h2 class="anchored" data-anchor-id="how-gans-works-analogy-counterfeiters-and-police">How GANS works? Analogy: Counterfeiters and Police</h2>
<ol type="1">
<li>Counterfeiters: Generator</li>
<li>Police: Discriminator</li>
</ol>
<p>We have an ambitious young criminal who wants to counterfeit money. He has a printing machine and he wants to print fake money. He has no idea how real money looks like. So he prints some money and goes to a shop to buy something. The shopkeeper is the discriminator. The shopkeeper knows how real money looks like. So he can easily identify the fake money. So the criminal goes back and prints some more money. This time the money looks more real. He goes to the shopkeeper again. The shopkeeper again identifies the fake money. This process continues until the criminal is able to print the exact replica of the real money. Now the shopkeeper is not able to identify the fake money. So the criminal is able to buy anything from the shopkeeper. The criminal has successfully fooled the shopkeeper. The criminal is the generator and the shopkeeper is the discriminator. This results in very realistic fake money. This is how GANS work.</p>
<p>In this sense both of them are getting better. The generator is getting better at generating fake money and the discriminator is getting better at identifying fake money. This is how GANS work. The generator generates fake images and the discriminator tries to identify the fake images. The generator tries to fool the discriminator and the discriminator tries to identify the fake images. This process continues until the discriminator is not able to identify the fake images. At this point the generator has successfully fooled the discriminator. The generator is now able to generate fake images which are indistinguishable from the real images.</p>
<p>This results in very realistic images. This is how GANS work.</p>
<ul>
<li>The purpose of the generator Network is take random data initializations and decode it into synthetic sample</li>
<li>The purpose of the discriminator Network is to then take this input from our Generator and predict whether or not this sample came from the real dataset or not.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/Image_super_resolution_files/figure-html/cell-24-1-gan_architecture.png" class="img-fluid figure-img"></p>
<figcaption>gan_architecture.png</figcaption>
</figure>
</div>
</section>
<section id="training-gans" class="level2">
<h2 class="anchored" data-anchor-id="training-gans">Training GANS</h2>
<ul>
<li>Training GANS is very difficult compared to Neural Networks we use gradient descent to change our weights and biases. But in GANS we have two networks generator and discriminator that works against eachother. So we have to train both of them simultaneously.</li>
<li>We are not seeking to minimize a loss function. We are seeking to find an equilibrium between the generator and discriminator.</li>
<li>Training stops when the discriminator is no longer able to distinguish between real and fake images.</li>
</ul>
<section id="training-process" class="level3">
<h3 class="anchored" data-anchor-id="training-process">Training process</h3>
<ol type="1">
<li>we randomly generate a noisy vector</li>
<li>input this noisy vector into the generator to generate a fake image</li>
<li>We take some sample data from our real data and mix it with the fake data.</li>
<li>We train the discriminator to classifyf this mixed data as real or fake and update the weights of the discriminator.</li>
<li>We then train the generator. We make more random noisy vectors and create synthetic images. With the weights of the discriminator frozen, we use the feedbcak from the discriminator to update the weights of the generator.</li>
</ol>
<p>This is how both Generator(to make better fake images) and Discriminator(to identify fake images) are getting better.</p>
</section>
</section>
<section id="gans-for-super-resolution" class="level2">
<h2 class="anchored" data-anchor-id="gans-for-super-resolution">GANS for Super Resolution</h2>
<p>Importing necessary libraries</p>
<div id="cell-29" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> keras.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mnist</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cv2</span>
<span id="cb10-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb10-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb10-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb10-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> glob</span>
<span id="cb10-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.layers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Input, Add, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D, AveragePooling2D, MaxPooling2D, UpSampling2D</span>
<span id="cb10-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.layers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LeakyReLU, Dropout</span>
<span id="cb10-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sequential, Model, load_model</span>
<span id="cb10-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb10-11"></span></code></pre></div>
</div>
<div id="cell-30" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a function to format display the losses</span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> hmsString(sec_elapsed):</span>
<span id="cb11-3">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(sec_elapsed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>))</span>
<span id="cb11-4">    m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>((sec_elapsed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb11-5">    s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sec_elapsed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span>
<span id="cb11-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:&gt;02}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:&gt;05.2f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(h, m, s)</span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># downsample and introduce noise in the images</span></span>
<span id="cb11-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> downSampleAndNoisyfi(X):</span>
<span id="cb11-10">    shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].shape</span>
<span id="cb11-11">    X_down <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x_i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> X:</span>
<span id="cb11-13">       x_c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv2.resize(x_i, (shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), interpolation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cv2.INTER_AREA)</span>
<span id="cb11-14">       x_c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.clip(x_c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x_c.shape) , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'uint8'</span>)</span>
<span id="cb11-15">       X_down.append(x_c)</span>
<span id="cb11-16">    X_down <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(X_down, dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'uint8'</span>)</span>
<span id="cb11-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> X_down</span></code></pre></div>
</div>
<section id="code-for-generator-block" class="level3">
<h3 class="anchored" data-anchor-id="code-for-generator-block">Code for Generator Block</h3>
<div id="cell-32" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> Generator(input_shape):</span>
<span id="cb12-2">    X_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Input(input_shape)</span>
<span id="cb12-3">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Conv2D(filters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, kernel_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), strides <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>)(X_input)</span>
<span id="cb12-4">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BatchNormalization(momentum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)(X)</span>
<span id="cb12-5">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Activation(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>)(X)</span>
<span id="cb12-6">    X_shortcut <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X</span>
<span id="cb12-7">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Conv2D(filters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, kernel_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), strides <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>)(X)</span>
<span id="cb12-8">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BatchNormalization(momentum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)(X)</span>
<span id="cb12-9">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Activation(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>)(X)  </span>
<span id="cb12-10">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Add()([X_shortcut, X])  </span>
<span id="cb12-11">    X_shortcut <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X</span>
<span id="cb12-12">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Conv2D(filters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, kernel_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), strides <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>)(X)</span>
<span id="cb12-13">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BatchNormalization(momentum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)(X)</span>
<span id="cb12-14">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Activation(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>)(X)  </span>
<span id="cb12-15">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Add()([X_shortcut, X])</span>
<span id="cb12-16">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Activation(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>)(X)</span>
<span id="cb12-17">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> UpSampling2D(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)(X)</span>
<span id="cb12-18">    </span>
<span id="cb12-19">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Conv2D(filters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, kernel_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), strides <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>)(X)</span>
<span id="cb12-20">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BatchNormalization(momentum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)(X)</span>
<span id="cb12-21">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Activation(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>)(X)</span>
<span id="cb12-22">    X_shortcut <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X</span>
<span id="cb12-23">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Conv2D(filters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, kernel_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), strides <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>)(X)</span>
<span id="cb12-24">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BatchNormalization(momentum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)(X)</span>
<span id="cb12-25">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Activation(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>)(X)</span>
<span id="cb12-26">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Add()([X_shortcut, X])</span>
<span id="cb12-27">    X_shortcut <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X</span>
<span id="cb12-28">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Conv2D(filters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, kernel_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), strides <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>)(X)</span>
<span id="cb12-29">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BatchNormalization(momentum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)(X)</span>
<span id="cb12-30">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Activation(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>)(X)   </span>
<span id="cb12-31">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Add()([X_shortcut, X])</span>
<span id="cb12-32">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Activation(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>)(X)</span>
<span id="cb12-33">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> UpSampling2D(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)(X)</span>
<span id="cb12-34">    </span>
<span id="cb12-35">    X_shortcut <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X</span>
<span id="cb12-36">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Conv2D(filters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, kernel_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), strides <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>)(X)</span>
<span id="cb12-37">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BatchNormalization(momentum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)(X)</span>
<span id="cb12-38">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Activation(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>)(X)</span>
<span id="cb12-39">    </span>
<span id="cb12-40">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Conv2D(filters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, kernel_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), strides <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>)(X)</span>
<span id="cb12-41">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BatchNormalization(momentum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)(X)</span>
<span id="cb12-42">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Activation(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>)(X)</span>
<span id="cb12-43">    </span>
<span id="cb12-44">    generator_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Model(inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>X_input, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>X)</span>
<span id="cb12-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> generator_model</span>
<span id="cb12-46"></span></code></pre></div>
</div>
</section>
<section id="code-for-discriminator-block" class="level3">
<h3 class="anchored" data-anchor-id="code-for-discriminator-block">Code for Discriminator Block</h3>
<div id="cell-34" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> Discriminator(input_shape):</span>
<span id="cb13-2">    X_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Input(input_shape)</span>
<span id="cb13-3">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Conv2D(filters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, kernel_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), strides <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>)(X_input)</span>
<span id="cb13-4">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Activation(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>)(X)</span>
<span id="cb13-5">    </span>
<span id="cb13-6">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Conv2D(filters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), strides <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), padding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>)(X)</span>
<span id="cb13-7">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BatchNormalization(momentum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>)(X)</span>
<span id="cb13-8">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Activation(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>)(X)</span>
<span id="cb13-9">    </span>
<span id="cb13-10">    discriminator_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Model(inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>X_input, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>X)</span>
<span id="cb13-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> discriminator_model</span>
<span id="cb13-12"></span></code></pre></div>
</div>
</section>
<section id="traing-gans" class="level3">
<h3 class="anchored" data-anchor-id="traing-gans">Traing GANS</h3>
<div id="cell-36" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># One step of the test step</span></span>
<span id="cb14-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@tf.function</span></span>
<span id="cb14-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train_step(X, Y, generator, discriminator, generator_optimizer, discriminator_optimizer):</span>
<span id="cb14-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> tf.GradientTape() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> gen_tape, tf.GradientTape() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> disc_tape:</span>
<span id="cb14-5">    generated_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generator(X, training<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb14-6"></span>
<span id="cb14-7">    real_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> discriminator(Y, training<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb14-8">    fake_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> discriminator(generated_images, training<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb14-9"></span>
<span id="cb14-10">    gen_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.losses.MSE(Y, generated_images)</span>
<span id="cb14-11">    disc_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.losses.MSE(real_output, fake_output)</span>
<span id="cb14-12">    </span>
<span id="cb14-13"></span>
<span id="cb14-14">    gradients_of_generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gen_tape.gradient(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb14-15">        gen_loss, generator.trainable_variables)</span>
<span id="cb14-16">    gradients_of_discriminator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> disc_tape.gradient(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb14-17">        disc_loss, discriminator.trainable_variables)</span>
<span id="cb14-18"></span>
<span id="cb14-19">    generator_optimizer.apply_gradients(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(</span>
<span id="cb14-20">        gradients_of_generator, generator.trainable_variables))</span>
<span id="cb14-21">    discriminator_optimizer.apply_gradients(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(</span>
<span id="cb14-22">        gradients_of_discriminator, </span>
<span id="cb14-23">        discriminator.trainable_variables))</span>
<span id="cb14-24">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> gen_loss,disc_loss</span>
<span id="cb14-25"></span>
<span id="cb14-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The main function to train the GAN</span></span>
<span id="cb14-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train(X_train, Y_train, generator, discriminator, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>):</span>
<span id="cb14-28">    generator_optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.optimizers.Adam(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5e-4</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb14-29">    discriminator_optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.optimizers.Adam(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5e-4</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb14-30">    start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb14-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs):</span>
<span id="cb14-32">        epoch_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb14-33">        gen_loss_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb14-34">        disc_loss_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb14-35">        </span>
<span id="cb14-36">        prev_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb14-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(X_train.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb14-38">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>((i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb14-39">                t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_step(X_train[prev_i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], Y_train[prev_i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], generator, discriminator, generator_optimizer, discriminator_optimizer)</span>
<span id="cb14-40">                gen_loss_list.append(t[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb14-41">                disc_loss_list.append(t[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb14-42">                prev_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb14-43">        g_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(np.array(gen_loss_list)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(np.array(gen_loss_list).shape)</span>
<span id="cb14-44">        d_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(np.array(disc_loss_list)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(np.array(disc_loss_list).shape)</span>
<span id="cb14-45">        </span>
<span id="cb14-46">        epoch_elapsed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>epoch_start</span>
<span id="cb14-47">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span> (<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, gen loss=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>g_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,disc loss=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>d_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hmsString(epoch_elapsed)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb14-48">        </span>
<span id="cb14-49">    elapsed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>start</span>
<span id="cb14-50">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span> (<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Training time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hmsString(elapsed)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb14-51">    </span></code></pre></div>
</div>
<div id="cell-37" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loading the dataset(the original image are the HR 28*28 images)</span></span>
<span id="cb15-2">(Y_train, _), (Y_test, _) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mnist.load_data()</span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># downsampling and introducing gaussian noise</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this downsampled and noised dataset is out X or inputs</span></span>
<span id="cb15-5">X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> downSampleAndNoisyfi(Y_train)</span>
<span id="cb15-6">X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> downSampleAndNoisyfi(Y_test)</span>
<span id="cb15-7"></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># introduce a new dimension to the data (None, 28, 28, 1)</span></span>
<span id="cb15-9">X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_test[..., np.newaxis]</span>
<span id="cb15-10">X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train[..., np.newaxis]</span>
<span id="cb15-11">Y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Y_train[..., np.newaxis]</span>
<span id="cb15-12">Y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Y_test[..., np.newaxis]</span>
<span id="cb15-13"></span>
<span id="cb15-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a generator model</span></span>
<span id="cb15-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Showing the summary of generator </span></span>
<span id="cb15-16">generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Generator((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb15-17">generator.summary()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model: "model"
__________________________________________________________________________________________________
 Layer (type)                Output Shape                 Param #   Connected to                  
==================================================================================================
 input_1 (InputLayer)        [(None, 7, 7, 1)]            0         []                            
                                                                                                  
 conv2d_2 (Conv2D)           (None, 7, 7, 32)             320       ['input_1[0][0]']             
                                                                                                  
 batch_normalization (Batch  (None, 7, 7, 32)             128       ['conv2d_2[0][0]']            
 Normalization)                                                                                   
                                                                                                  
 activation (Activation)     (None, 7, 7, 32)             0         ['batch_normalization[0][0]'] 
                                                                                                  
 conv2d_3 (Conv2D)           (None, 7, 7, 32)             9248      ['activation[0][0]']          
                                                                                                  
 batch_normalization_1 (Bat  (None, 7, 7, 32)             128       ['conv2d_3[0][0]']            
 chNormalization)                                                                                 
                                                                                                  
 activation_1 (Activation)   (None, 7, 7, 32)             0         ['batch_normalization_1[0][0]'
                                                                    ]                             
                                                                                                  
 add (Add)                   (None, 7, 7, 32)             0         ['activation[0][0]',          
                                                                     'activation_1[0][0]']        
                                                                                                  
 conv2d_4 (Conv2D)           (None, 7, 7, 32)             9248      ['add[0][0]']                 
                                                                                                  
 batch_normalization_2 (Bat  (None, 7, 7, 32)             128       ['conv2d_4[0][0]']            
 chNormalization)                                                                                 
                                                                                                  
 activation_2 (Activation)   (None, 7, 7, 32)             0         ['batch_normalization_2[0][0]'
                                                                    ]                             
                                                                                                  
 add_1 (Add)                 (None, 7, 7, 32)             0         ['add[0][0]',                 
                                                                     'activation_2[0][0]']        
                                                                                                  
 activation_3 (Activation)   (None, 7, 7, 32)             0         ['add_1[0][0]']               
                                                                                                  
 up_sampling2d (UpSampling2  (None, 14, 14, 32)           0         ['activation_3[0][0]']        
 D)                                                                                               
                                                                                                  
 conv2d_5 (Conv2D)           (None, 14, 14, 32)           9248      ['up_sampling2d[0][0]']       
                                                                                                  
 batch_normalization_3 (Bat  (None, 14, 14, 32)           128       ['conv2d_5[0][0]']            
 chNormalization)                                                                                 
                                                                                                  
 activation_4 (Activation)   (None, 14, 14, 32)           0         ['batch_normalization_3[0][0]'
                                                                    ]                             
                                                                                                  
 conv2d_6 (Conv2D)           (None, 14, 14, 32)           9248      ['activation_4[0][0]']        
                                                                                                  
 batch_normalization_4 (Bat  (None, 14, 14, 32)           128       ['conv2d_6[0][0]']            
 chNormalization)                                                                                 
                                                                                                  
 activation_5 (Activation)   (None, 14, 14, 32)           0         ['batch_normalization_4[0][0]'
                                                                    ]                             
                                                                                                  
 add_2 (Add)                 (None, 14, 14, 32)           0         ['activation_4[0][0]',        
                                                                     'activation_5[0][0]']        
                                                                                                  
 conv2d_7 (Conv2D)           (None, 14, 14, 32)           9248      ['add_2[0][0]']               
                                                                                                  
 batch_normalization_5 (Bat  (None, 14, 14, 32)           128       ['conv2d_7[0][0]']            
 chNormalization)                                                                                 
                                                                                                  
 activation_6 (Activation)   (None, 14, 14, 32)           0         ['batch_normalization_5[0][0]'
                                                                    ]                             
                                                                                                  
 add_3 (Add)                 (None, 14, 14, 32)           0         ['add_2[0][0]',               
                                                                     'activation_6[0][0]']        
                                                                                                  
 activation_7 (Activation)   (None, 14, 14, 32)           0         ['add_3[0][0]']               
                                                                                                  
 up_sampling2d_1 (UpSamplin  (None, 28, 28, 32)           0         ['activation_7[0][0]']        
 g2D)                                                                                             
                                                                                                  
 conv2d_8 (Conv2D)           (None, 28, 28, 32)           9248      ['up_sampling2d_1[0][0]']     
                                                                                                  
 batch_normalization_6 (Bat  (None, 28, 28, 32)           128       ['conv2d_8[0][0]']            
 chNormalization)                                                                                 
                                                                                                  
 activation_8 (Activation)   (None, 28, 28, 32)           0         ['batch_normalization_6[0][0]'
                                                                    ]                             
                                                                                                  
 conv2d_9 (Conv2D)           (None, 28, 28, 1)            289       ['activation_8[0][0]']        
                                                                                                  
 batch_normalization_7 (Bat  (None, 28, 28, 1)            4         ['conv2d_9[0][0]']            
 chNormalization)                                                                                 
                                                                                                  
 activation_9 (Activation)   (None, 28, 28, 1)            0         ['batch_normalization_7[0][0]'
                                                                    ]                             
                                                                                                  
==================================================================================================
Total params: 56997 (222.64 KB)
Trainable params: 56547 (220.89 KB)
Non-trainable params: 450 (1.76 KB)
__________________________________________________________________________________________________</code></pre>
</div>
</div>
<div id="cell-38" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a discriminator model</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Showing the summary of discriminator</span></span>
<span id="cb17-3">discriminator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Discriminator((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb17-4">discriminator.summary()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model: "model_1"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_2 (InputLayer)        [(None, 28, 28, 1)]       0         
                                                                 
 conv2d_10 (Conv2D)          (None, 28, 28, 32)        320       
                                                                 
 activation_10 (Activation)  (None, 28, 28, 32)        0         
                                                                 
 conv2d_11 (Conv2D)          (None, 28, 28, 64)        18496     
                                                                 
 batch_normalization_8 (Bat  (None, 28, 28, 64)        256       
 chNormalization)                                                
                                                                 
 activation_11 (Activation)  (None, 28, 28, 64)        0         
                                                                 
=================================================================
Total params: 19072 (74.50 KB)
Trainable params: 18944 (74.00 KB)
Non-trainable params: 128 (512.00 Byte)
_________________________________________________________________</code></pre>
</div>
</div>
<div id="cell-39" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># training with batch size of 100 and for 50 epochs</span></span>
<span id="cb19-2">train(X_train, Y_train, generator, discriminator, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#50)</span></span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># save the generator model for future use</span></span>
<span id="cb19-5">generator.save(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mnist_generator_model"</span>)</span>
<span id="cb19-6">generator.save(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mnist_generator_model.h5"</span>)</span></code></pre></div>
</div>
<p>Here we have run only for 5 epochs but you can run for more epochs to get better results.</p>
<div id="cell-41" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># testing the model</span></span>
<span id="cb20-2">Y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generator.predict(X_test)</span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># showing the first 5 results</span></span>
<span id="cb20-4">fig,a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb20-5">fig.subplots_adjust(hspace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, wspace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb20-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb20-7">    a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][i].imshow(X_test[i])</span>
<span id="cb20-8">    a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][i].axes.get_xaxis().set_visible(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb20-9">    a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][i].axes.get_yaxis().set_visible(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb20-10">    a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][i].title.set_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LR: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb20-11">    </span>
<span id="cb20-12">    a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][i].imshow(Y_pred[i])</span>
<span id="cb20-13">    a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][i].axes.get_xaxis().set_visible(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb20-14">    a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][i].axes.get_yaxis().set_visible(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb20-15">    a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][i].title.set_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SR: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) </span>
<span id="cb20-16">    </span>
<span id="cb20-17">    a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>][i].imshow(Y_test[i])</span>
<span id="cb20-18">    a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>][i].axes.get_xaxis().set_visible(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb20-19">    a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>][i].axes.get_yaxis().set_visible(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb20-20">    a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>][i].title.set_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HR: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>313/313 [==============================] - 9s 27ms/step</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/Image_super_resolution_files/figure-html/cell-16-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-42" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># showing the first 5 random results</span></span>
<span id="cb22-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb22-3">figb,ab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb22-4">figb.subplots_adjust(hspace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, wspace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb22-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb22-6">    ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>) </span>
<span id="cb22-7">    </span>
<span id="cb22-8">    ab[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][i].imshow(X_test[ii])</span>
<span id="cb22-9">    ab[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][i].axes.get_xaxis().set_visible(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb22-10">    ab[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][i].axes.get_yaxis().set_visible(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb22-11">    ab[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][i].title.set_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LR: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb22-12">    </span>
<span id="cb22-13">    ab[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][i].imshow(Y_pred[ii])</span>
<span id="cb22-14">    ab[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][i].axes.get_xaxis().set_visible(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb22-15">    ab[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][i].axes.get_yaxis().set_visible(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb22-16">    ab[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][i].title.set_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SR: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) </span>
<span id="cb22-17">    </span>
<span id="cb22-18">    ab[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>][i].imshow(Y_test[ii])</span>
<span id="cb22-19">    ab[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>][i].axes.get_xaxis().set_visible(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb22-20">    ab[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>][i].axes.get_yaxis().set_visible(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb22-21">    ab[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>][i].title.set_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HR: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) </span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/Image_super_resolution_files/figure-html/cell-17-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Well GAN does perform good but it has some problems.</p>
</section>
<section id="problem-with-gans" class="level3">
<h3 class="anchored" data-anchor-id="problem-with-gans">Problem with GANS:</h3>
<ul>
<li><strong>Achieving equilibrium</strong>: between the generator and discriminator is very difficult.</li>
<li><strong>Time</strong>: Training gans is computationally expensive and necessitates tweaking of hyperparameters such as initializations, altering hidden layers, different activation, using Batch Normalization or Dropout, etc.</li>
<li><strong>Bad Initializations</strong>: If the generator and discriminator are not initialized properly, then the training will fail.</li>
<li><strong>Mode Collapse</strong>: happens when regardless of the nosie input fed into your generator, the generated output varies very little. It occurs when a small set of images look good to the descriminator and get scored better than other images. The GAN simple learns to reproduce those images over and over again. Analgous to overfittiing.</li>
</ul>
<p>One quick solution to the problem of high training time is to use transfer learning using VGG16 or VGG19 in Generator and discriminator architecture. This will reduce the training time.</p>


</section>
</section>
</section>

 ]]></description>
  <category>Deep Learning</category>
  <guid>https://jaiswalsuraj487.github.io/blogs/blogsData/Image_super_resolution.html</guid>
  <pubDate>Wed, 12 Jul 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Baysian Linear Regression blog</title>
  <dc:creator>Suraj Jaiswal</dc:creator>
  <link>https://jaiswalsuraj487.github.io/blogs/blogsData/blr_blog.html</link>
  <description><![CDATA[ 




<p>Welcome to my blog on Bayesian linear regression, where we explore the power of this technique. While traditional linear regression provides point estimates, Bayesian linear regression incorporates prior knowledge and quantifies uncertainty. By combining observed data with prior beliefs, we make more informed decisions. Throughout this blog, we’ll delve into key components like probalistic approch to linear regression, basics of types of uncertainity, prior distributions, likelihood functions, and posterior inference. Let’s embark on this enlightening journey together.</p>
<section id="what-is-uncertainity" class="level1">
<h1>What is Uncertainity?</h1>
<p>In nearly all real-world situations, our data and knowledge about the world is incomplete, indirect and noisy. Hence, uncertainty must be a fundamental part of our decision-making process. It provides us valuable information about trustworthiness and reliability of model predictions. - There are two types of uncertainty :</p>
<ol type="1">
<li>Aleatoric uncertainty, which is the uncertainty that arises from the data. It is inherited in data and can’t be reduced as it is caused by data generation process.</li>
<li>Epistemic uncertainty, which is the uncertainty that arises from the model(here regression model). We usually predict the uncertainty in data (aleatoric) still be uncertain about the uncertainity based on model parameters(epistemic).</li>
</ol>
<ul>
<li>This is exaclty why we need to learn bayesian approch. It provides a way to learn uncertainty. We will see basic bayeian approch in linear regression called bayesian linear regression. -But lets first discuss implementing linear regression before diving into the Bayesian linear regression.</li>
</ul>
</section>
<section id="linear-regression" class="level1">
<h1>Linear Regression</h1>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/blr_blog_files/figure-html/cell-5-1-LR.png" class="img-fluid figure-img"></p>
<figcaption>IMG src medium article</figcaption>
</figure>
</div>
<p>Linear regression is about finding a linear model that best fit a given dataset. Here we will discuss probabilistic interpretation of linear regression</p>
<p>We make two assumptions. 1. The observed value of y for a given data point x is sum of predicted value and error term of the form <img src="https://latex.codecogs.com/png.latex?%0Ay%20=%20%5Cboldsymbol%20x%5ET%5Cboldsymbol%5Ctheta%20+%20%5Cepsilon%5C,%20,%5Cquad%20%5Cboldsymbol%5Ctheta%20=%20%5Cbegin%7Bbmatrix%7D%5Ctheta_0%5C%5C%0A%5Cboldsymbol%5Ctheta_1%0A%5Cend%7Bbmatrix%7D%5C,.%0A"> where <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20x%5Cin%5Cmathbb%7BR%7D%5ED"> are inputs and <img src="https://latex.codecogs.com/png.latex?y%5Cin%5Cmathbb%7BR%7D"> are noisy observations. The parameter vector <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ctheta%5Cin%5Cmathbb%7BR%7D%5ED"> parametrizes the function.</p>
<ol start="2" type="1">
<li>The error term is independently and identically distributed and is Normally distributed with mean 0 and variance sigma squared. <img src="https://latex.codecogs.com/png.latex?%5Cquad%20%5Cepsilon%20%5Csim%20%5Cmathcal%20N(0,%20%5Csigma%5E2)"></li>
</ol>
<p>We assume we have a training set <img src="https://latex.codecogs.com/png.latex?(%5Cboldsymbol%20x_n,%20y_n)">, <img src="https://latex.codecogs.com/png.latex?n=1,%5Cldots,%20N">. We summarize the sets of training inputs in <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20X%20=%20%5C%7B%5Cboldsymbol%20x_1,%20%5Cldots,%20%5Cboldsymbol%20x_N%5C%7D"> and corresponding training targets <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20Y%20=%20%5C%7By_1,%20%5Cldots,%20y_N%5C%7D">, respectively.</p>
<p>Here, we are interested in finding good parameters <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ctheta">.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cboxed%7B%20%5Cbegin%7Barray%7D%7Bl%7D%0A%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5Ctheta%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5Csigma%20%5C%5C%0A%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5Cdownarrow%20%5C%20%5C%20%5C%20%5Cswarrow%20%5C%5C%0A%5C%20%5C%20%5C%20x_%7Bn%7D%20%5C%20%5C%20%5Crightarrow%20%5C%20y_%7Bn%7D%20%5C%20%5C%20%5C%5C%0A%5C%20%5C%20n%5C%20=%5C%201,......,N%5C%20%5C%5C%0A%5C%5C%0A%5Cend%7Barray%7D%20%7D%0A"> <img src="https://latex.codecogs.com/png.latex?%20Probabilistic%20%5C%20graphical%20%5C%20model%20%5C%20for%20%5C%20linear%20%5C%20regression%20"></p>
<p>Let’s first see the demo dataset</p>
<div id="cell-10" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> scipy.linalg</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> multivariate_normal, norm</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> numpy.random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seed, uniform, randn</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> numpy.linalg <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> inv</span></code></pre></div>
</div>
<div id="cell-11" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define training set</span></span>
<span id="cb2-2">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 5x1 vector, N=5, D=1</span></span>
<span id="cb2-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.14</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.67</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.67</span>]).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 5x1 vector</span></span>
<span id="cb2-4">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the training set</span></span>
<span id="cb2-6">plt.figure()</span>
<span id="cb2-7">plt.plot(X, y, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+'</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$x$"</span>)</span>
<span id="cb2-9">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$y$"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/blr_blog_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<section id="maximum-likelihood" class="level2">
<h2 class="anchored" data-anchor-id="maximum-likelihood">Maximum Likelihood</h2>
<p>We will start with maximum likelihood estimation of the parameters <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ctheta">. In maximum likelihood estimation, we find the parameters <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ctheta_%7B%5Cmathrm%7BML%7D%7D"> that maximize the likelihood <img src="https://latex.codecogs.com/png.latex?%0Ap(%5Cmathcal%20Y%20%7C%20%5Cmathcal%20X,%20%5Cboldsymbol%5Ctheta)%20=%20%5Cprod_%7Bn=1%7D%5EN%20p(y_n%20%7C%20%5Cboldsymbol%20x_n,%20%5Cboldsymbol%5Ctheta)%5C,.%0A"> From the lecture we know that the maximum likelihood estimator is given by <img src="https://latex.codecogs.com/png.latex?%0A%5Cboldsymbol%5Ctheta_%7B%5Ctext%7BML%7D%7D%20=%20(%5Cboldsymbol%20X%5ET%5Cboldsymbol%20X)%5E%7B-1%7D%5Cboldsymbol%20X%5ET%5Cboldsymbol%20y%5Cin%5Cmathbb%7BR%7D%5ED%5C,,%0A"> where <img src="https://latex.codecogs.com/png.latex?%0A%5Cboldsymbol%20X%20=%20%5B%5Cboldsymbol%20x_1,%20%5Cldots,%20%5Cboldsymbol%20x_N%5D%5ET%5Cin%5Cmathbb%7BR%7D%5E%7BN%5Ctimes%20D%7D%5C,,%5Cquad%20%5Cboldsymbol%20y%20=%20%5By_1,%20%5Cldots,%20y_N%5D%5ET%20%5Cin%5Cmathbb%7BR%7D%5EN%5C,.%0A"></p>
<div id="cell-13" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">N, D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.shape</span>
<span id="cb3-2">X_aug <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.hstack([np.ones((N,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)), X])</span></code></pre></div>
</div>
<div id="cell-14" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> max_lik_estimate(X, y):</span>
<span id="cb4-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># X: N x D matrix of training inputs</span></span>
<span id="cb4-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y: N x 1 vector of training targets/observations</span></span>
<span id="cb4-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># returns: maximum likelihood parameters (D x 1)</span></span>
<span id="cb4-5">    N, D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.shape</span>
<span id="cb4-6">    theta_ml <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.solve(X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> X, X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> y) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## &lt;-- SOLUTION</span></span>
<span id="cb4-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> theta_ml</span></code></pre></div>
</div>
<div id="cell-15" class="cell" data-execution_count="104">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">theta_ml <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_lik_estimate(X_aug,y)</span>
<span id="cb5-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(theta_ml)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[2.116]
 [0.499]]</code></pre>
</div>
</div>
<p>Now we will make predictions at test inputs <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20X_%7B%5Ctext%7Btest%7D%7D%5Cin%5Cmathbb%7BR%7D">, <img src="https://latex.codecogs.com/png.latex?%0A%5C%20%5Cboldsymbol%20y_%7B%5Ctext%7Bpred%7D%7D%20=%20%5Cboldsymbol%20%5CPhi_%7B%5Ctext%7Btest%7D%7D%5Cboldsymbol%5Ctheta_%7B%5Ctext%7BML%7D%7D%0A"></p>
<div id="cell-17" class="cell" data-execution_count="105">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define a test set</span></span>
<span id="cb7-2">Xtest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 100 x 1 vector of test inputs</span></span>
<span id="cb7-3">Xtest_aug <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.hstack([np.ones((Xtest.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)), Xtest]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 100 x (D + 1) vector of test inputs</span></span>
<span id="cb7-4">ml_prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xtest_aug <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> theta_ml</span></code></pre></div>
</div>
<div id="cell-18" class="cell" data-execution_count="106">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot</span></span>
<span id="cb8-2">plt.figure()</span>
<span id="cb8-3">plt.plot(X, y, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+'</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb8-4">plt.plot(Xtest, ml_prediction)</span>
<span id="cb8-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$x$"</span>)</span>
<span id="cb8-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$y$"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="106">
<pre><code>Text(0, 0.5, '$y$')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/blr_blog_files/figure-html/cell-8-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This gives fairly good results but what if the data is bit complex</p>
<p>Let us have a look at an example where the observations clearly do not lie on a straight line:</p>
<div id="cell-21" class="cell" data-execution_count="107">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb10-2">mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-3">sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb10-4">seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb10-5">xn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, N)</span>
<span id="cb10-6">epsilon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(mu, sigma, N)</span>
<span id="cb10-7">yn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.sin(xn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.cos(xn) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> epsilon</span>
<span id="cb10-8">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.column_stack((xn, yn))</span>
<span id="cb10-9">xn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xn.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-10">yn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> yn.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div id="cell-22" class="cell" data-execution_count="108">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the training set</span></span>
<span id="cb11-2">plt.figure()</span>
<span id="cb11-3">plt.plot(xn, yn, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+'</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb11-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$x$"</span>)</span>
<span id="cb11-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$y$"</span>)</span>
<span id="cb11-6">plt.ylim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) </span>
<span id="cb11-7">plt.xlim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) </span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/blr_blog_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Lets first apply linear regressoin without non linear transformation</p>
<div id="cell-24" class="cell" data-execution_count="109">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">N, D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xn.shape</span>
<span id="cb12-2">X_aug <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.hstack([np.ones((N,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)), xn]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># augmented training inputs of size N x (D+1)</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># theta_aug = np.zeros((D+1, 1)) # new theta vector of size (D+1) x 1</span></span></code></pre></div>
</div>
<div id="cell-25" class="cell" data-execution_count="110">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">theta_aug_ml <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_lik_estimate(X_aug, yn)</span>
<span id="cb13-2">theta_aug_ml</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="110">
<pre><code>array([[-0.47109666],
       [-0.1808517 ]])</code></pre>
</div>
</div>
<div id="cell-26" class="cell" data-execution_count="111">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">ml_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_aug <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> theta_aug_ml </span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># X: K x D matrix of test inputs</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># theta: D x 1 vector of parameters</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># returns: prediction of f(X); K x 1 vector</span></span></code></pre></div>
</div>
<div id="cell-27" class="cell" data-execution_count="112">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the training set</span></span>
<span id="cb16-2">plt.figure()</span>
<span id="cb16-3">plt.plot(xn, yn, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+'</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb16-4">plt.plot(xn, ml_predictions)</span>
<span id="cb16-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$x$"</span>)</span>
<span id="cb16-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$y$"</span>)</span>
<span id="cb16-7">plt.ylim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) </span>
<span id="cb16-8">plt.xlim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) </span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/blr_blog_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="polynomial-regression" class="level2">
<h2 class="anchored" data-anchor-id="polynomial-regression">Polynomial Regression</h2>
<section id="nonlinear-features" class="level3">
<h3 class="anchored" data-anchor-id="nonlinear-features">Nonlinear Features</h3>
<p>So far, we have looked at linear regression with linear features. This allowed us to fit straight lines. However, linear regression also allows us to fit functions that are nonlinear in the inputs <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20x">, as long as the parameters <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ctheta"> appear linearly. This means, we can learn functions of the form <img src="https://latex.codecogs.com/png.latex?%0Af(%5Cboldsymbol%20x,%20%5Cboldsymbol%5Ctheta)%20=%20%5Csum_%7Bk%20=%201%7D%5EK%20%5Ctheta_k%20%5Cphi_k(%5Cboldsymbol%20x)%5C,,%0A"> where the features <img src="https://latex.codecogs.com/png.latex?%5Cphi_k(%5Cboldsymbol%20x)"> are (possibly nonlinear) transformations of the inputs <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20x">.</p>
<p>Polynomial Regression class of functions that is covered by linear regression is the family of polynomials because we can write a polynomial of degree <img src="https://latex.codecogs.com/png.latex?K"> as <img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bk=0%7D%5EK%20%5Ctheta_k%20x%5Ek%20=%20%5Cboldsymbol%20%5Cphi(x)%5ET%5Cboldsymbol%5Ctheta%5C,,%5Cquad%0A%5Cboldsymbol%5Cphi(x)=%0A%5Cbegin%7Bbmatrix%7D%0Ax%5E0%5C%5C%0Ax%5E1%5C%5C%0A%5Cvdots%5C%5C%0Ax%5EK%0A%5Cend%7Bbmatrix%7D%5Cin%5Cmathbb%7BR%7D%5E%7BK+1%7D%5C,.%0A"> Here, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Cphi(x)"> is a nonlinear feature transformation of the inputs <img src="https://latex.codecogs.com/png.latex?x%5Cin%5Cmathbb%7BR%7D">.</p>
<p>Similar to the earlier case we can define a matrix that collects all the feature transformations of the training inputs: <img src="https://latex.codecogs.com/png.latex?%0A%5Cboldsymbol%5CPhi%20=%20%5Cbegin%7Bbmatrix%7D%0A%5Cboldsymbol%5Cphi(x_1)%20&amp;%20%5Cboldsymbol%5Cphi(x_2)%20&amp;%20%5Ccdots%20&amp;%20%5Cboldsymbol%5Cphi(x_n)%0A%5Cend%7Bbmatrix%7D%5ET%20%5Cin%5Cmathbb%7BR%7D%5E%7BN%5Ctimes%20K+1%7D%0A"></p>
<p>Let us start by computing the feature matrix <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20%5CPhi"></p>
<div id="cell-32" class="cell" data-execution_count="113">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> poly_features(X, p):</span>
<span id="cb17-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Returns a matrix with p columns containing the polynomial features of the input vector X."""</span></span>
<span id="cb17-3">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.flatten()</span>
<span id="cb17-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]).T</span></code></pre></div>
</div>
<p>With this feature matrix we get the maximum likelihood estimator as <img src="https://latex.codecogs.com/png.latex?%0A%5Cboldsymbol%20%5Ctheta%5E%5Ctext%7BML%7D%20=%20(%5Cboldsymbol%5CPhi%5ET%5Cboldsymbol%5CPhi)%5E%7B-1%7D%5Cboldsymbol%5CPhi%5ET%5Cboldsymbol%20y%0A"> For reasons of numerical stability, we often add a small diagonal “jitter” <img src="https://latex.codecogs.com/png.latex?%5Ckappa%3E0"> to <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5CPhi%5ET%5Cboldsymbol%5CPhi"> so that we can invert the matrix without significant problems so that the maximum likelihood estimate becomes <img src="https://latex.codecogs.com/png.latex?%0A%5Cboldsymbol%20%5Ctheta%5E%5Ctext%7BML%7D%20=%20(%5Cboldsymbol%5CPhi%5ET%5Cboldsymbol%5CPhi%20+%20%5Ckappa%5Cboldsymbol%20I)%5E%7B-1%7D%5Cboldsymbol%5CPhi%5ET%5Cboldsymbol%20y%0A"></p>
<div id="cell-34" class="cell" data-execution_count="114">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> nonlinear_features_maximum_likelihood(Phi, y):</span>
<span id="cb18-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Phi: features matrix for training inputs. Size of N x D</span></span>
<span id="cb18-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y: training targets. Size of N by 1</span></span>
<span id="cb18-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># returns: maximum likelihood estimator theta_ml. Size of D x 1</span></span>
<span id="cb18-5">    </span>
<span id="cb18-6">    kappa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-08</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'jitter' term; good for numerical stability</span></span>
<span id="cb18-7">    </span>
<span id="cb18-8">    D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Phi.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]  </span>
<span id="cb18-9">    </span>
<span id="cb18-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># maximum likelihood estimate</span></span>
<span id="cb18-11">    Pt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Phi.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> y <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Phi^T*y</span></span>
<span id="cb18-12">    PP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Phi.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> Phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> kappa<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.eye(D) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Phi^T*Phi + kappa*I</span></span>
<span id="cb18-13">        </span>
<span id="cb18-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># maximum likelihood estimate</span></span>
<span id="cb18-15">    C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scipy.linalg.cho_factor(PP)</span>
<span id="cb18-16">    theta_ml <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scipy.linalg.cho_solve(C, Pt) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inv(Phi^T*Phi)*Phi^T*y </span></span>
<span id="cb18-17">    </span>
<span id="cb18-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> theta_ml</span></code></pre></div>
</div>
<p>To make predictions at test inputs <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20X_%7B%5Ctext%7Btest%7D%7D%5Cin%5Cmathbb%7BR%7D">, we need to compute the features (nonlinear transformations) <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5CPhi_%7B%5Ctext%7Btest%7D%7D=%20%5Cboldsymbol%5Cphi(%5Cboldsymbol%20X_%7B%5Ctext%7Btest%7D%7D)"> of <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20X_%7B%5Ctext%7Btest%7D%7D"> to give us the predicted mean <img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%7BE%7D%5B%5Cboldsymbol%20y_%7B%5Ctext%7Btest%7D%7D%5D%20=%20%5Cboldsymbol%20%5CPhi_%7B%5Ctext%7Btest%7D%7D%5Cboldsymbol%5Ctheta%5E%7B%5Ctext%7BML%7D%7D%0A"></p>
<div id="cell-36" class="cell" data-execution_count="115">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb19-2">Phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poly_features(xn, p)</span>
<span id="cb19-3">theta_ml <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nonlinear_features_maximum_likelihood(Phi, yn)</span>
<span id="cb19-4">X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb19-5">Phi_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  poly_features(X_test, p)</span>
<span id="cb19-6">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Phi_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> theta_ml</span></code></pre></div>
</div>
<div id="cell-37" class="cell" data-execution_count="116">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the training set</span></span>
<span id="cb20-2">plt.figure()</span>
<span id="cb20-3">plt.plot(xn, yn, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+'</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb20-4">plt.plot(X_test, y_pred)</span>
<span id="cb20-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$x$"</span>)</span>
<span id="cb20-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$y$"</span>)</span>
<span id="cb20-7">plt.ylim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) </span>
<span id="cb20-8">plt.xlim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) </span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/blr_blog_files/figure-html/cell-18-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Now lets try different polynomial fits.</p>
<div id="cell-39" class="cell" data-execution_count="117">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Values of p to consider</span></span>
<span id="cb21-2">p_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a 2x3 grid of subplots</span></span>
<span id="cb21-5">fig, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(p_values):</span>
<span id="cb21-8"></span>
<span id="cb21-9">    Phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poly_features(xn, p)</span>
<span id="cb21-10">    theta_ml <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nonlinear_features_maximum_likelihood(Phi, yn)</span>
<span id="cb21-11">    Phi_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poly_features(X_test, p)</span>
<span id="cb21-12">    y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Phi_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> theta_ml</span>
<span id="cb21-13"></span>
<span id="cb21-14">    ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axs[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the correct subplot</span></span>
<span id="cb21-15">    ax.plot(xn, yn, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+'</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training data'</span>)</span>
<span id="cb21-16">    ax.plot(X_test, y_pred, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MLE'</span>)</span>
<span id="cb21-17">    ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$x$"</span>)</span>
<span id="cb21-18">    ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$y$"</span>)</span>
<span id="cb21-19">    ax.set_ylim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb21-20">    ax.set_xlim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb21-21">    ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"P = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb21-22">    ax.legend()</span>
<span id="cb21-23"></span>
<span id="cb21-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust the spacing between subplots</span></span>
<span id="cb21-25">plt.tight_layout()</span>
<span id="cb21-26"></span>
<span id="cb21-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the plot</span></span>
<span id="cb21-28">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/blr_blog_files/figure-html/cell-19-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>You can refer 9.1 and 9.2 section of <a href="https://mml-book.github.io/book/mml-book.pdf">Mathematics for Machine Learning</a> to understand in depth about probalistic approch to linear regression.</p>
</section>
</section>
</section>
<section id="bayesian-linear-regression" class="level1">
<h1>Bayesian Linear Regression</h1>
<p>Bayesian linear regression is the Bayesian interpretation of linear regression.</p>
<p>So far we computed point estimates of our parameters. For example, in linear regression we chose values for the weights and bias that minimized our mean squared error cost function.</p>
<p>In the Bayesian approach we don’t work with exact values but with probabilities. This allows us to model the uncertainty in our parameter estimates.</p>
<p>In nearly all real-world situations, our data and knowledge about the world is incomplete, indirect and noisy. Hence, uncertainty must be a fundamental part of our decision-making process. This is exactly what the Bayesian approach is about. It provides a formal and consistent way to reason in the presence of uncertainty.</p>
<section id="bayes-theroem" class="level2">
<h2 class="anchored" data-anchor-id="bayes-theroem">Bayes theroem</h2>
<p>The basis of bayesian linear regression is bayes theroem. - Bayes’ theorem looks as follows: <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bequation%7D%0Ap(%5Cboldsymbol%7B%5Ctheta%7D%20%7C%20%5Cmathbf%7Bx%7D,%20y)%20=%20%5Cfrac%7Bp(y%20%7C%20%5Cboldsymbol%7Bx%7D,%20%5Cboldsymbol%7B%5Ctheta%7D)p(%5Cboldsymbol%7B%5Ctheta%7D)%7D%7Bp(%5Cboldsymbol%7Bx%7D,%20y)%7D%0A%5Cend%7Bequation%7D%0A"> - <img src="https://latex.codecogs.com/png.latex?p(y%20%7C%20%5Cboldsymbol%7Bx%7D,%20%5Cboldsymbol%7B%5Ctheta%7D)"> is the <em>likelihood</em>. It describes the probability of the target values given the data and parameters. - <img src="https://latex.codecogs.com/png.latex?p(%5Cboldsymbol%7B%5Ctheta%7D)"> is the <em>prior</em>. It describes our initial knowledge about which parameter values are likely and unlikely. - <img src="https://latex.codecogs.com/png.latex?p(%5Cboldsymbol%7Bx%7D,%20y)"> is the <em>evidence</em>. It describes the joint probability of the data and targets.</p>
</section>
<section id="bayesian-inference" class="level2">
<h2 class="anchored" data-anchor-id="bayesian-inference">Bayesian inference</h2>
<p>In general, Bayesian inference works as follows: 1. We start with some prior belief about a hypothesis <img src="https://latex.codecogs.com/png.latex?p(h)"> 2. We observe some data, representating new evidence <img src="https://latex.codecogs.com/png.latex?e"> 3. We use Bayes’ theorem to update our belief given the new evidence: <img src="https://latex.codecogs.com/png.latex?p(h%7Ce)%20=%20%5Cfrac%7Bp(e%20%7Ch)p(h)%7D%7Bp(e)%7D"></p>
<p>Have a look at <a href="https://en.wikipedia.org/wiki/Bayesian_inference">Wiki</a></p>
</section>
<section id="bayeisan-approch" class="level2">
<h2 class="anchored" data-anchor-id="bayeisan-approch">Bayeisan approch</h2>
<p>Unlike linear regression where we computed point estimates of our parameters using maximum likelihood approach and make predictions, here in Bayesian linear regression we estimate</p>
<p>Following are the steps: 1. We assume a that we know standard deviation of the noise, mean and covariance of the prior. 2. We than calculate parameter posteriori 3. Based on that we make posteriori predictions on unseen data ie. test data.</p>
<p>Now lets see along with code</p>
<p>Here we have same assumptions that we took in linear regression <img src="https://latex.codecogs.com/png.latex?%0Ay%20=%20%5Cboldsymbol%20x%5ET%5Cboldsymbol%5Ctheta%20+%20%5Cepsilon%5C,,%5Cquad%20%5Cepsilon%20%5Csim%20%5Cmathcal%20N(0,%20%5Csigma%5E2)%0A"> Where epsilon is the noise from normal distribution with variance <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E2">. Training inputs in <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20X%20=%20%5C%7B%5Cboldsymbol%20x_1,%20%5Cldots,%20%5Cboldsymbol%20x_N%5C%7D"> and corresponding training targets <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20Y%20=%20%5C%7By_1,%20%5Cldots,%20y_N%5C%7D">, respectively.</p>
<p>Function</p>
<div id="cell-53" class="cell" data-execution_count="118">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> g(x, mu, sigma):   </span>
<span id="cb22-2">    epsilon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(mu, sigma, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(x.shape))</span>
<span id="cb22-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.cos(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> epsilon</span>
<span id="cb22-4">    </span></code></pre></div>
</div>
<p>We apply non linear feature transformation on feature matrix with polynomial of degree <img src="https://latex.codecogs.com/png.latex?K"> <img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bk=0%7D%5EK%20%5Ctheta_k%20x%5Ek%20=%20%5Cboldsymbol%20%5Cphi(x)%5ET%5Cboldsymbol%5Ctheta%5C,,%5Cquad%0A%5Cboldsymbol%5Cphi(x)=%0A%5Cbegin%7Bbmatrix%7D%0Ax%5E0%5C%5C%0Ax%5E1%5C%5C%0A%5Cvdots%5C%5C%0Ax%5EK%0A%5Cend%7Bbmatrix%7D%5Cin%5Cmathbb%7BR%7D%5E%7BK+1%7D%5C,.%0A"> Here, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Cphi(x)"> is a nonlinear feature transformation of the inputs <img src="https://latex.codecogs.com/png.latex?x%5Cin%5Cmathbb%7BR%7D">.</p>
<p>Similar to the earlier case we can define a matrix that collects all the feature transformations of the training inputs: <img src="https://latex.codecogs.com/png.latex?%0A%5Cboldsymbol%5CPhi%20=%20%5Cbegin%7Bbmatrix%7D%0A%5Cboldsymbol%5Cphi(x_1)%20&amp;%20%5Cboldsymbol%5Cphi(x_2)%20&amp;%20%5Ccdots%20&amp;%20%5Cboldsymbol%5Cphi(x_n)%0A%5Cend%7Bbmatrix%7D%5ET%20%5Cin%5Cmathbb%7BR%7D%5E%7BN%5Ctimes%20K+1%7D%0A"></p>
<p>Sample to see nonlinear transformation</p>
<div id="cell-56" class="cell" data-execution_count="119">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 5x1 vector, N=5, D=1</span></span></code></pre></div>
</div>
<div id="cell-57" class="cell" data-execution_count="120">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">poly_features(X, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># defined in linear regression section</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="120">
<pre><code>array([[  1.,  -3.,   9., -27.],
       [  1.,  -1.,   1.,  -1.],
       [  1.,   0.,   0.,   0.],
       [  1.,   1.,   1.,   1.],
       [  1.,   3.,   9.,  27.]])</code></pre>
</div>
</div>
</section>
<section id="known-entities" class="level2">
<h2 class="anchored" data-anchor-id="known-entities">Known entities</h2>
<div id="cell-59" class="cell" data-execution_count="121">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># standard deviation of the noise</span></span>
<span id="cb26-2">m0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mean of the prior</span></span>
<span id="cb26-3">S0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># covariance of the prior  </span></span>
<span id="cb26-4">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># order of the polynomial </span></span></code></pre></div>
</div>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cboxed%7B%5Cbegin%7Barray%7D%7Bl%7D%0A%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20m_%7B0%7D%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20S_%7B0%7D%5C%5C%0A%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5Csearrow%20%5C%20%5C%20%5C%20%5Cswarrow%20%5C%5C%0A%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5Ctheta%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5Csigma%20%5C%5C%0A%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5C%20%5Cdownarrow%20%5C%20%5C%20%5C%20%5Cswarrow%20%5C%5C%0A%5C%20%5C%20%5C%20%5C%20x_%7Bn%7D%20%5C%20%5C%20%5Crightarrow%20%5C%20%5C%20y_%7Bn%7D%20%5C%20%5C%20%5C%5C%0A%5C%20%5C%20%5C%20%5C%20n%5C%20=%5C%201,......,N%5C%20%5C%5C%0A%5Cend%7Barray%7D%7D%0A"> <img src="https://latex.codecogs.com/png.latex?%20Graphical%20%5C%20model%20%5C%20for%20%5C%20Bayeisan%20%5C%20linear%20%5C%20regression%20"></p>
<div id="cell-61" class="cell" data-execution_count="122">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of data points</span></span>
<span id="cb27-2">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, low<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(N,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># training inputs, size Nx1</span></span>
<span id="cb27-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> g(X, m0, sigma) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># training targets, size Nx1</span></span></code></pre></div>
</div>
</section>
<section id="posterior" class="level2">
<h2 class="anchored" data-anchor-id="posterior">Posterior</h2>
<section id="parameter-posteriori-in-closed-form" class="level3">
<h3 class="anchored" data-anchor-id="parameter-posteriori-in-closed-form">Parameter posteriori in closed form</h3>
<p>Calculating Parameter posterior: <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Ap(%5Cboldsymbol%7B%5Ctheta%7D%20%5Cmid%20%5Cmathcal%7BX%7D,%20%5Cmathcal%7BY%7D)%20&amp;=%5Cmathcal%7BN%7D%5Cleft(%5Cboldsymbol%7B%5Ctheta%7D%20%5Cmid%20%5Cboldsymbol%7Bm%7D_%7BN%7D,%20%5Cboldsymbol%7BS%7D_%7BN%7D%5Cright)%20%5C%5C%0A%5Cboldsymbol%7BS%7D_%7BN%7D%20&amp;=%5Cleft(%5Cboldsymbol%7BS%7D_%7B0%7D%5E%7B-1%7D+%5Csigma%5E%7B-2%7D%20%5Cboldsymbol%7B%5CPhi%7D%5E%7B%5Ctop%7D%20%5Cboldsymbol%7B%5CPhi%7D%5Cright)%5E%7B-1%7D%20%5C%5C%0A%5Cboldsymbol%7Bm%7D_%7BN%7D%20&amp;=%5Cboldsymbol%7BS%7D_%7BN%7D%5Cleft(%5Cboldsymbol%7BS%7D_%7B0%7D%5E%7B-1%7D%20%5Cboldsymbol%7Bm%7D_%7B0%7D+%5Csigma%5E%7B-2%7D%20%5Cboldsymbol%7B%5CPhi%7D%5E%7B%5Ctop%7D%20%5Cboldsymbol%7By%7D%5Cright)%0A%5Cend%7Baligned%7D%0A"></p>
<div id="cell-64" class="cell" data-execution_count="123">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> posterior(X, y, p, m0, S0, sigma):</span>
<span id="cb28-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Returns the posterior mean and covariance matrix of the weights given the training data."""</span></span>
<span id="cb28-3">    poly_X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poly_features(X, p)</span>
<span id="cb28-4"></span>
<span id="cb28-5">    SN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scipy.linalg.inv(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.eye(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> S0  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> poly_X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> poly_X)</span>
<span id="cb28-6">    mN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> (m0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> S0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> poly_X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> y)    </span>
<span id="cb28-7">    </span>
<span id="cb28-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> mN, SN</span></code></pre></div>
</div>
<div id="cell-65" class="cell" data-execution_count="124">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">mN , SN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> posterior(X, y, p ,m0, S0, sigma)</span></code></pre></div>
</div>
<div id="cell-66" class="cell" data-execution_count="125">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">Ntest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb30-2">Xtest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, Ntest).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test inputs</span></span>
<span id="cb30-3"></span>
<span id="cb30-4">poly_X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poly_features(Xtest, p)</span></code></pre></div>
</div>
</section>
<section id="posterior-predictive-distribution" class="level3">
<h3 class="anchored" data-anchor-id="posterior-predictive-distribution">Posterior Predictive distribution</h3>
<p>Now, let’s make predictions (ignoring the measurement noise). We obtain three predictors: <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A&amp;%5Ctext%7BBayesian:%20%7D%20p(f(%5Cboldsymbol%20X_%7B%5Ctext%7Btest%7D%7D)%20%5C,%20%7C%5C%20X,%20Y,%20%5Cboldsymbol%20X_%7B%5Ctext%7Btest%7D%7D)%20=%20%5Cmathcal%20N(f(%5Cboldsymbol%20X_%7B%5Ctext%7Btest%7D%7D)%20%5C,%7C%5C,%20%5Cboldsymbol%20%5Cphi(X_%7B%5Ctext%7Btest%7D%7D)%20%5Cboldsymbol%20M_%7B%5Ctext%7Bn%7D%7D,%5C,%20%5Cboldsymbol%5Cphi(X_%7B%5Ctext%7Btest%7D%7D)%20%5Cboldsymbol%20S_%7B%5Ctext%7BN%7D%7D%20%20%5Cboldsymbol%5Cphi(X_%7B%5Ctext%7Btest%7D%7D)%5E%5Ctop%20+%20%5Csigma%20%5E%202)%0A%5Cend%7Balign%7D%20"> We already computed all quantities. Write some code that implements all three predictors.</p>
<div id="cell-68" class="cell" data-execution_count="126">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">posterior_pred_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poly_X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> mN</span>
<span id="cb31-2"></span>
<span id="cb31-3">posterior_pred_uncertainty_para <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poly_X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> SN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> poly_X_test.T</span>
<span id="cb31-4"></span>
<span id="cb31-5">posterior_pred_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> posterior_pred_uncertainty_para</span></code></pre></div>
</div>
<div id="cell-69" class="cell" data-execution_count="129">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot the posterior</span></span>
<span id="cb32-2">plt.figure()</span>
<span id="cb32-3">plt.plot(X, y, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"+"</span>)</span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.plot(Xtest, m_mle_test)</span></span>
<span id="cb32-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.plot(Xtest, m_map_test)</span></span>
<span id="cb32-6">posterior_pred_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> posterior_pred_mean.flatten()</span>
<span id="cb32-7">var_blr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.diag(posterior_pred_uncertainty_para)</span>
<span id="cb32-8"></span>
<span id="cb32-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># conf_bound1 = np.sqrt(var_blr).flatten()</span></span>
<span id="cb32-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.fill_between(Xtest.flatten(), posterior_pred_mean + conf_bound1, posterior_pred_mean - conf_bound1, alpha = 0.1, color="k")</span></span>
<span id="cb32-11"></span>
<span id="cb32-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 95 % parameter uncertainity</span></span>
<span id="cb32-13">conf_bound2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.sqrt(var_blr).flatten()</span>
<span id="cb32-14">plt.fill_between(Xtest.flatten(), posterior_pred_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> conf_bound2, posterior_pred_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> conf_bound2, alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>)</span>
<span id="cb32-15"></span>
<span id="cb32-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 95 % total uncertainity ie. </span></span>
<span id="cb32-17">conf_bound3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.sqrt(var_blr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).flatten()</span>
<span id="cb32-18">plt.fill_between(Xtest.flatten(), posterior_pred_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> conf_bound3, posterior_pred_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> conf_bound3, alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span>)</span>
<span id="cb32-19"></span>
<span id="cb32-20">plt.legend([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Training data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'95% para uncertainity'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'95% total uncertainity'</span>])</span>
<span id="cb32-21">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$x$'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb32-22">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$y$'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/blr_blog_files/figure-html/cell-29-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>You can refer 9.3 section of <a href="https://mml-book.github.io/book/mml-book.pdf">Mathematics for Machine Learning</a> to understand in depth about bayesian linear regression.</p>
</section>
<section id="visulizing-the-parameter-posterior" class="level3">
<h3 class="anchored" data-anchor-id="visulizing-the-parameter-posterior">Visulizing the parameter Posterior</h3>
<p>In this section we will visualize the posterior and will see how it changes as it sees more data.</p>
<div id="cell-73" class="cell" data-execution_count="136">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> f(x, a): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x</span>
<span id="cb33-2"></span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_prior(m, S, liminf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, limsup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb33-5">    grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mgrid[liminf:limsup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> step:step, liminf:limsup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> step:step]</span>
<span id="cb33-6">    nx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb33-7">    z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> multivariate_normal.pdf(grid.T.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>m.ravel(), cov<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>S).reshape(nx, nx).T</span>
<span id="cb33-8">    </span>
<span id="cb33-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ax.contourf(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>grid, z, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb33-10"></span>
<span id="cb33-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_sample_w(mean, cov, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt):</span>
<span id="cb33-12">    w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.multivariate_normal(mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mean.ravel(), cov<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cov, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>size)</span>
<span id="cb33-13">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb33-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> wi <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> w:</span>
<span id="cb33-15">        ax.plot(x, f(x, wi), c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tab:blue"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>)</span>
<span id="cb33-16"></span>
<span id="cb33-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_likelihood_obs(X, T, ix, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt):</span>
<span id="cb33-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb33-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Plot the likelihood function of a single observation</span></span>
<span id="cb33-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb33-21">    W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mgrid[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>]</span>
<span id="cb33-22">    x, t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample_vals(X, T, ix) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ith row</span></span>
<span id="cb33-23">    mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> W.T.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> x.T</span>
<span id="cb33-24"></span>
<span id="cb33-25">    likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> norm.pdf(t, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mean, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sqrt(sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>).T</span>
<span id="cb33-26">    ax.contourf(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>W, likelihood)</span>
<span id="cb33-27">    ax.scatter(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"+"</span>)</span>
<span id="cb33-28"></span>
<span id="cb33-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sample_vals(X, T, ix):</span>
<span id="cb33-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb33-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb33-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb33-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb33-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Phi: The linear model transormation</span></span>
<span id="cb33-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    t: the target datapoint</span></span>
<span id="cb33-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    return ith data</span></span>
<span id="cb33-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb33-38">    x_in <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[ix]</span>
<span id="cb33-39">    Phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.c_[np.ones_like(x_in), x_in]</span>
<span id="cb33-40">    t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T[[ix]]</span>
<span id="cb33-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Phi, t</span>
<span id="cb33-42"></span>
<span id="cb33-43"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> posterior_w(phi, t, S0, m0):</span>
<span id="cb33-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb33-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Compute the posterior distribution of </span></span>
<span id="cb33-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    a Gaussian with known precision and conjugate</span></span>
<span id="cb33-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    prior a gaussian</span></span>
<span id="cb33-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb33-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb33-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb33-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    phi: np.array(N, M)</span></span>
<span id="cb33-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    t: np.array(N, 1)</span></span>
<span id="cb33-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    S0: np.array(M, M)</span></span>
<span id="cb33-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The prior covariance matrix</span></span>
<span id="cb33-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    m0: np.array(M, 1)</span></span>
<span id="cb33-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The prior mean vector</span></span>
<span id="cb33-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb33-58">    SN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inv(inv(S0) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sigma) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> phi.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> phi)</span>
<span id="cb33-59">    mN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> (inv(S0) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> m0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sigma) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> phi.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> t)</span>
<span id="cb33-60">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> SN, mN</span></code></pre></div>
</div>
<div id="cell-74" class="cell" data-execution_count="141">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">314</span>)</span>
<span id="cb34-2">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># true parameter values</span></span>
<span id="cb34-3">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb34-4">sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span></span>
<span id="cb34-5">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, (N, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb34-6">T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(X, a) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> randn(N, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sigma</span></code></pre></div>
</div>
<div id="cell-75" class="cell" data-execution_count="142">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># beta = (1 / sigma) ** 2 # precision</span></span>
<span id="cb35-2">alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span></span></code></pre></div>
</div>
<div id="cell-76" class="cell" data-execution_count="143">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">SN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.eye(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> alpha</span>
<span id="cb36-2">mN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb36-3">seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1643</span>)</span></code></pre></div>
</div>
<div id="cell-77" class="cell" data-execution_count="144">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">nobs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>]</span>
<span id="cb37-2">ix_fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb37-3">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nobs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>))</span>
<span id="cb37-4">plot_prior(mN, SN, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb37-5">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].scatter(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"+"</span>)</span>
<span id="cb37-6">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb37-7">plot_sample_w(mN, SN, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb37-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, N):</span>
<span id="cb37-9">    Phi, t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample_vals(X, T, i)</span>
<span id="cb37-10">    SN, mN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> posterior_w(Phi, t, SN, mN)</span>
<span id="cb37-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nobs:</span>
<span id="cb37-12">        plot_likelihood_obs(X, T, i, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax[ix_fig, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb37-13">        plot_prior(mN, SN, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax[ix_fig, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb37-14">        ax[ix_fig, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].scatter(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"+"</span>)</span>
<span id="cb37-15">        ax[ix_fig, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].scatter(X[:i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], T[:i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"crimson"</span>)</span>
<span id="cb37-16">        ax[ix_fig, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].set_xlim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb37-17">        ax[ix_fig, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].set_ylim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb37-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb37-19">            ax[ix_fig, l].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$$</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">heta_0$$"</span>)</span>
<span id="cb37-20">            ax[ix_fig, l].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$$</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">heta_1$$"</span>)</span>
<span id="cb37-21">        plot_sample_w(mN, SN, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax[ix_fig, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb37-22">        ix_fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb37-23"></span>
<span id="cb37-24">titles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"likelihood"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prior/posterior"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data space"</span>]</span>
<span id="cb37-25"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> axi, title <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], titles):</span>
<span id="cb37-26">    axi.set_title(title, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb37-27">plt.tight_layout()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/blr_blog_files/figure-html/cell-34-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We can see above as the model see more data, the posterior converges close the the true values at end. Refer to <a href="https://www.microsoft.com/en-us/research/uploads/prod/2006/01/Bishop-Pattern-Recognition-and-Machine-Learning-2006.pdf">Bishop - Pattern Recognition and Machine Learning fig 3.7</a> to understand above fig in detail.</p>


</section>
</section>
</section>

 ]]></description>
  <category>Regression</category>
  <category>Bayesian</category>
  <guid>https://jaiswalsuraj487.github.io/blogs/blogsData/blr_blog.html</guid>
  <pubDate>Sun, 18 Jun 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Plots for bayesian LR</title>
  <dc:creator>Suraj Jaiswal</dc:creator>
  <link>https://jaiswalsuraj487.github.io/blogs/blogsData/demo.html</link>
  <description><![CDATA[ 




<div id="cell-1" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> scipy</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> multivariate_normal, norm</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> numpy.random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seed, uniform, randn</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> numpy.linalg <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> inv</span></code></pre></div>
</div>
<p>9.3</p>
<p>$$ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\</p>
<p>x_{n} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y_{n} &nbsp;&nbsp;\</p>
<p>n&nbsp;=&nbsp;1,……,N&nbsp;\</p>
<p>\<br>
$$</p>
<p>figure 9.5</p>
<div id="cell-5" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb2-2">mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-3">sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-4"></span>
<span id="cb2-5">xn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, N)</span>
<span id="cb2-6">epsilon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(mu, sigma, N)</span>
<span id="cb2-7">yn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.sin(xn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.cos(xn) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> epsilon</span>
<span id="cb2-8">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.column_stack((xn, yn))</span>
<span id="cb2-9">xn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xn.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-10">yn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> yn.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the training set</span></span>
<span id="cb3-2">plt.figure()</span>
<span id="cb3-3">plt.plot(xn, yn, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+'</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb3-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$x$"</span>)</span>
<span id="cb3-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$y$"</span>)</span>
<span id="cb3-6">plt.ylim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) </span>
<span id="cb3-7">plt.xlim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) </span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/demo_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-7" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">N, D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xn.shape</span>
<span id="cb4-2">X_aug <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.hstack([np.ones((N,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)), xn]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># augmented training inputs of size N x (D+1)</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># theta_aug = np.zeros((D+1, 1)) # new theta vector of size (D+1) x 1</span></span></code></pre></div>
</div>
<div id="cell-8" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> max_lik_estimate(X, y):</span>
<span id="cb5-2">    </span>
<span id="cb5-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># X: N x D matrix of training inputs</span></span>
<span id="cb5-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y: N x 1 vector of training targets/observations</span></span>
<span id="cb5-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># returns: maximum likelihood parameters (D x 1)</span></span>
<span id="cb5-6">    </span>
<span id="cb5-7">    N, D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.shape</span>
<span id="cb5-8">    theta_ml <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.solve(X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> X, X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> y) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## &lt;-- SOLUTION</span></span>
<span id="cb5-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> theta_ml</span></code></pre></div>
</div>
<div id="cell-9" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">theta_aug_ml <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_lik_estimate(X_aug, yn)</span>
<span id="cb6-2">theta_aug_ml</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>array([[-0.2123287 ],
       [-0.18826531]])</code></pre>
</div>
</div>
<div id="cell-10" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">ml_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_aug <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> theta_aug_ml </span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># X: K x D matrix of test inputs</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># theta: D x 1 vector of parameters</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># returns: prediction of f(X); K x 1 vector</span></span></code></pre></div>
</div>
<div id="cell-11" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">ml_predictions.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>(10, 1)</code></pre>
</div>
</div>
<div id="cell-12" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the training set</span></span>
<span id="cb11-2">plt.figure()</span>
<span id="cb11-3">plt.plot(xn, yn, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+'</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb11-4">plt.plot(xn, ml_predictions)</span>
<span id="cb11-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$x$"</span>)</span>
<span id="cb11-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$y$"</span>)</span>
<span id="cb11-7">plt.ylim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) </span>
<span id="cb11-8">plt.xlim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) </span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/demo_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-13" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> poly_features(X, p):</span>
<span id="cb12-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Returns a matrix with p columns containing the polynomial features of the input vector X."""</span></span>
<span id="cb12-3">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.flatten()</span>
<span id="cb12-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]).T</span></code></pre></div>
</div>
<div id="cell-14" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> nonlinear_features_maximum_likelihood(Phi, y):</span>
<span id="cb13-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Phi: features matrix for training inputs. Size of N x D</span></span>
<span id="cb13-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y: training targets. Size of N by 1</span></span>
<span id="cb13-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># returns: maximum likelihood estimator theta_ml. Size of D x 1</span></span>
<span id="cb13-5">    </span>
<span id="cb13-6">    kappa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-08</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'jitter' term; good for numerical stability</span></span>
<span id="cb13-7">    </span>
<span id="cb13-8">    D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Phi.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]  </span>
<span id="cb13-9">    </span>
<span id="cb13-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># maximum likelihood estimate</span></span>
<span id="cb13-11">    Pt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Phi.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> y <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Phi^T*y</span></span>
<span id="cb13-12">    PP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Phi.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> Phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> kappa<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.eye(D) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Phi^T*Phi + kappa*I</span></span>
<span id="cb13-13">        </span>
<span id="cb13-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># maximum likelihood estimate</span></span>
<span id="cb13-15">    C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scipy.linalg.cho_factor(PP)</span>
<span id="cb13-16">    theta_ml <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scipy.linalg.cho_solve(C, Pt) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inv(Phi^T*Phi)*Phi^T*y </span></span>
<span id="cb13-17">    </span>
<span id="cb13-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> theta_ml</span></code></pre></div>
</div>
<div id="cell-15" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb14-2">Phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poly_features(xn, p)</span>
<span id="cb14-3">theta_ml <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nonlinear_features_maximum_likelihood(Phi, yn)</span>
<span id="cb14-4">X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-5">Phi_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  poly_features(X_test, p)</span>
<span id="cb14-6">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Phi_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> theta_ml</span></code></pre></div>
</div>
<div id="cell-16" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the training set</span></span>
<span id="cb15-2">plt.figure()</span>
<span id="cb15-3">plt.plot(xn, yn, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+'</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb15-4">plt.plot(X_test, y_pred)</span>
<span id="cb15-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$x$"</span>)</span>
<span id="cb15-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$y$"</span>)</span>
<span id="cb15-7">plt.ylim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) </span>
<span id="cb15-8">plt.xlim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) </span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/demo_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Figure 9.6</p>
<div id="cell-18" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Values of p to consider</span></span>
<span id="cb16-2">p_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a 2x3 grid of subplots</span></span>
<span id="cb16-5">fig, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(p_values):</span>
<span id="cb16-8"></span>
<span id="cb16-9">    Phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poly_features(xn, p)</span>
<span id="cb16-10">    theta_ml <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nonlinear_features_maximum_likelihood(Phi, yn)</span>
<span id="cb16-11">    Phi_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poly_features(X_test, p)</span>
<span id="cb16-12">    y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Phi_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> theta_ml</span>
<span id="cb16-13"></span>
<span id="cb16-14">    ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axs[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the correct subplot</span></span>
<span id="cb16-15">    ax.plot(xn, yn, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+'</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training data'</span>)</span>
<span id="cb16-16">    ax.plot(X_test, y_pred, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MLE'</span>)</span>
<span id="cb16-17">    ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$x$"</span>)</span>
<span id="cb16-18">    ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$y$"</span>)</span>
<span id="cb16-19">    ax.set_ylim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb16-20">    ax.set_xlim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb16-21">    ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"P = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-22">    ax.legend()</span>
<span id="cb16-23"></span>
<span id="cb16-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust the spacing between subplots</span></span>
<span id="cb16-25">plt.tight_layout()</span>
<span id="cb16-26"></span>
<span id="cb16-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the plot</span></span>
<span id="cb16-28">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/demo_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-19" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"retina"</span></span></code></pre></div>
</div>
<div id="cell-20" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> f(x, a): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x</span>
<span id="cb18-2"></span>
<span id="cb18-3"></span>
<span id="cb18-4"></span>
<span id="cb18-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_prior(m, S, liminf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, limsup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb18-6">    grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mgrid[liminf:limsup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> step:step, liminf:limsup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> step:step]</span>
<span id="cb18-7">    nx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb18-8">    z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> multivariate_normal.pdf(grid.T.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>m.ravel(), cov<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>S).reshape(nx, nx).T</span>
<span id="cb18-9">    </span>
<span id="cb18-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ax.contourf(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>grid, z, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb18-11"></span>
<span id="cb18-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_sample_w(mean, cov, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt):</span>
<span id="cb18-13">    w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.multivariate_normal(mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mean.ravel(), cov<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cov, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>size)</span>
<span id="cb18-14">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> wi <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> w:</span>
<span id="cb18-16">        ax.plot(x, f(x, wi), c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tab:blue"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>)</span>
<span id="cb18-17"></span>
<span id="cb18-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_likelihood_obs(X, T, ix, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt):</span>
<span id="cb18-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb18-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Plot the likelihood function of a single observation</span></span>
<span id="cb18-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb18-22">    W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mgrid[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>]</span>
<span id="cb18-23">    x, t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample_vals(X, T, ix) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ith row</span></span>
<span id="cb18-24">    mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> W.T.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> x.T</span>
<span id="cb18-25"></span>
<span id="cb18-26">    likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> norm.pdf(t, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mean, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> beta)).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>).T</span>
<span id="cb18-27">    ax.contourf(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>W, likelihood)</span>
<span id="cb18-28">    ax.scatter(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"+"</span>)</span>
<span id="cb18-29"></span>
<span id="cb18-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sample_vals(X, T, ix):</span>
<span id="cb18-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb18-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb18-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb18-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb18-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Phi: The linear model transormation</span></span>
<span id="cb18-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    t: the target datapoint</span></span>
<span id="cb18-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    return ith data</span></span>
<span id="cb18-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb18-39">    x_in <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X[ix]</span>
<span id="cb18-40">    Phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.c_[np.ones_like(x_in), x_in]</span>
<span id="cb18-41">    t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T[[ix]]</span>
<span id="cb18-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Phi, t</span>
<span id="cb18-43"></span>
<span id="cb18-44"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> posterior_w(phi, t, S0, m0):</span>
<span id="cb18-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb18-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Compute the posterior distribution of </span></span>
<span id="cb18-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    a Gaussian with known precision and conjugate</span></span>
<span id="cb18-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    prior a gaussian</span></span>
<span id="cb18-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb18-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb18-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb18-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    phi: np.array(N, M)</span></span>
<span id="cb18-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    t: np.array(N, 1)</span></span>
<span id="cb18-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    S0: np.array(M, M)</span></span>
<span id="cb18-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The prior covariance matrix</span></span>
<span id="cb18-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    m0: np.array(M, 1)</span></span>
<span id="cb18-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The prior mean vector</span></span>
<span id="cb18-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb18-59">    SN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inv(inv(S0) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> phi.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> phi)</span>
<span id="cb18-60">    mN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> (inv(S0) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> m0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> phi.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> t)</span>
<span id="cb18-61">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> SN, mN</span></code></pre></div>
</div>
<div id="cell-21" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">314</span>)</span>
<span id="cb19-2">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>])</span>
<span id="cb19-3">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb19-4">sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span></span>
<span id="cb19-5">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, (N, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb19-6">T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(X, a) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> randn(N, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sigma</span></code></pre></div>
</div>
<div id="cell-22" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sigma) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># precision</span></span>
<span id="cb20-2">alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span></span></code></pre></div>
</div>
<div id="cell-23" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">SN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.eye(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> alpha</span>
<span id="cb21-2">mN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb21-3">seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1643</span>)</span></code></pre></div>
</div>
<div id="cell-24" class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">nobs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>]</span>
<span id="cb22-2">ix_fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb22-3">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nobs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>))</span>
<span id="cb22-4">plot_prior(mN, SN, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb22-5">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].scatter(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"+"</span>)</span>
<span id="cb22-6">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb22-7">plot_sample_w(mN, SN, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb22-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, N):</span>
<span id="cb22-9">    Phi, t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample_vals(X, T, i)</span>
<span id="cb22-10">    SN, mN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> posterior_w(Phi, t, SN, mN)</span>
<span id="cb22-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nobs:</span>
<span id="cb22-12">        plot_likelihood_obs(X, T, i, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax[ix_fig, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb22-13">        plot_prior(mN, SN, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax[ix_fig, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb22-14">        ax[ix_fig, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].scatter(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"+"</span>)</span>
<span id="cb22-15">        ax[ix_fig, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].scatter(X[:i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], T[:i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"crimson"</span>)</span>
<span id="cb22-16">        ax[ix_fig, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].set_xlim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb22-17">        ax[ix_fig, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].set_ylim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb22-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb22-19">            ax[ix_fig, l].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$w_0$"</span>)</span>
<span id="cb22-20">            ax[ix_fig, l].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$w_1$"</span>)</span>
<span id="cb22-21">        plot_sample_w(mN, SN, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax[ix_fig, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb22-22">        ix_fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb22-23"></span>
<span id="cb22-24">titles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"likelihood"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prior/posterior"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data space"</span>]</span>
<span id="cb22-25"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> axi, title <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], titles):</span>
<span id="cb22-26">    axi.set_title(title, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb22-27">plt.tight_layout()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/demo_files/figure-html/cell-21-output-1.png" width="998" height="1190" class="figure-img"></p>
</figure>
</div>
</div>
</div>



 ]]></description>
  <guid>https://jaiswalsuraj487.github.io/blogs/blogsData/demo.html</guid>
  <pubDate>Mon, 12 Jun 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Baysian Linear Regression</title>
  <dc:creator>Suraj Jaiswal</dc:creator>
  <link>https://jaiswalsuraj487.github.io/blogs/blogsData/Bayesian_Lineara_Regressiondemo.html</link>
  <description><![CDATA[ 




<div id="cell-1" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> scipy</span></code></pre></div>
</div>
<section id="bayesian-linear-regression" class="level1">
<h1>Bayesian Linear Regression</h1>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay%20=%20%5Cboldsymbol%20x%5ET%5Cboldsymbol%5Ctheta%20+%20%5Cepsilon%5C,,%5Cquad%20%5Cepsilon%20%5Csim%20%5Cmathcal%20N(0,%20%5Csigma%5E2)%0A"> Where $ &nbsp;$ is the noise from normal distribution with variance <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E2">. Training inputs in <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20X%20=%20%5C%7B%5Cboldsymbol%20x_1,%20%5Cldots,%20%5Cboldsymbol%20x_N%5C%7D"> and corresponding training targets <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20Y%20=%20%5C%7By_1,%20%5Cldots,%20y_N%5C%7D">, respectively.</p>
<p>Function</p>
<div id="cell-5" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> g(x, sigma):   </span>
<span id="cb2-2">    mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-3">    epsilon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(mu, sigma, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(x.shape))</span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.cos(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> epsilon</span>
<span id="cb2-5">    </span></code></pre></div>
</div>
<p>We apply non linear feature transformation on feature matrix with polynomial of degree <img src="https://latex.codecogs.com/png.latex?P"> <img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bk=0%7D%5EK%20%5Ctheta_k%20x%5Ek%20=%20%5Cboldsymbol%20%5Cphi(x)%5ET%5Cboldsymbol%5Ctheta%5C,,%5Cquad%0A%5Cboldsymbol%5Cphi(x)=%0A%5Cbegin%7Bbmatrix%7D%0Ax%5E0%5C%5C%0Ax%5E1%5C%5C%0A%5Cvdots%5C%5C%0Ax%5EK%0A%5Cend%7Bbmatrix%7D%5Cin%5Cmathbb%7BR%7D%5E%7BK+1%7D%5C,.%0A"> Here, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Cphi(x)"> is a nonlinear feature transformation of the inputs <img src="https://latex.codecogs.com/png.latex?x%5Cin%5Cmathbb%7BR%7D">.</p>
<p>Similar to the earlier case we can define a matrix that collects all the feature transformations of the training inputs: <img src="https://latex.codecogs.com/png.latex?%0A%5Cboldsymbol%5CPhi%20=%20%5Cbegin%7Bbmatrix%7D%0A%5Cboldsymbol%5Cphi(x_1)%20&amp;%20%5Cboldsymbol%5Cphi(x_2)%20&amp;%20%5Ccdots%20&amp;%20%5Cboldsymbol%5Cphi(x_n)%0A%5Cend%7Bbmatrix%7D%5ET%20%5Cin%5Cmathbb%7BR%7D%5E%7BN%5Ctimes%20K+1%7D%0A"></p>
<div id="cell-7" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> poly_features(X, p):</span>
<span id="cb3-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Returns a matrix with p columns containing the polynomial features of the input vector X."""</span></span>
<span id="cb3-3">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.flatten()</span>
<span id="cb3-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]).T</span></code></pre></div>
</div>
<p>Sample to see nonlinear transformation</p>
<div id="cell-9" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 5x1 vector, N=5, D=1</span></span></code></pre></div>
</div>
<div id="cell-10" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">poly_features(X, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>array([[  1.,  -3.,   9., -27.],
       [  1.,  -1.,   1.,  -1.],
       [  1.,   0.,   0.,   0.],
       [  1.,   1.,   1.,   1.],
       [  1.,   3.,   9.,  27.]])</code></pre>
</div>
</div>
<section id="known-entities" class="level2">
<h2 class="anchored" data-anchor-id="known-entities">Known entities</h2>
<div id="cell-12" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># standard deviation of the noise</span></span>
<span id="cb7-2">m0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mean of the prior</span></span>
<span id="cb7-3">S0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># covariance of the prior  </span></span>
<span id="cb7-4">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># order of the polynomial </span></span></code></pre></div>
</div>
<div id="cell-13" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of data points</span></span>
<span id="cb8-2">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, low<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(N,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># training inputs, size Nx1</span></span>
<span id="cb8-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> g(X, sigma) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># training targets, size Nx1</span></span></code></pre></div>
</div>
</section>
<section id="posterior" class="level2">
<h2 class="anchored" data-anchor-id="posterior">Posterior</h2>
<p>Calculating</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A&amp;%5Ctext%7BParameter%20posterior:%20%7D%20p(%5Cboldsymbol%5Ctheta%7C%5Cmathcal%20X,%20%5Cmathcal%20Y)%20=%20%5Cmathcal%20N(%5Cboldsymbol%20%5Ctheta%20%5C,%7C%5C,%20Mn,%5C,%20Sn)%0A%5Cend%7Balign%7D"></p>
<div id="cell-16" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> posterior(X, y, p, m0, S0, sigma):</span>
<span id="cb9-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Returns the posterior mean and covariance matrix of the weights given the training data."""</span></span>
<span id="cb9-3">    poly_X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poly_features(X, p)</span>
<span id="cb9-4"></span>
<span id="cb9-5">    SN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scipy.linalg.inv(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.eye(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> S0  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> poly_X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> poly_X)</span>
<span id="cb9-6">    mN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> (m0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> S0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> poly_X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> y)    </span>
<span id="cb9-7">    </span>
<span id="cb9-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> mN, SN</span></code></pre></div>
</div>
<div id="cell-17" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">mN , SN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> posterior(X, y, p ,m0, S0, sigma)</span></code></pre></div>
</div>
<div id="cell-18" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">Ntest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb11-2">Xtest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, Ntest).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test inputs</span></span>
<span id="cb11-3"></span>
<span id="cb11-4">poly_X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poly_features(Xtest, p)</span></code></pre></div>
</div>
<p>Now, let’s make predictions (ignoring the measurement noise). We obtain three predictors: <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A&amp;%5Ctext%7BBayesian:%20%7D%20p(f(%5Cboldsymbol%20X_%7B%5Ctext%7Btest%7D%7D))%20=%20%5Cmathcal%20N(f(%5Cboldsymbol%20X_%7B%5Ctext%7Btest%7D%7D)%20%5C,%7C%5C,%20%5Cboldsymbol%20%5Cphi(X_%7B%5Ctext%7Btest%7D%7D)%20%5Cboldsymbol%5Ctheta_%7B%5Ctext%7Bmean%7D%7D,%5C,%20%5Cboldsymbol%5Cphi(X_%7B%5Ctext%7Btest%7D%7D)%20%5Cboldsymbol%5Ctheta_%7B%5Ctext%7Bvar%7D%7D%20%20%5Cboldsymbol%5Cphi(X_%7B%5Ctext%7Btest%7D%7D)%5E%5Ctop)%0A%5Cend%7Balign%7D"> We already computed all quantities. Write some code that implements all three predictors.</p>
<div id="cell-20" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">posterior_pred_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poly_X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> mN</span>
<span id="cb12-2"></span>
<span id="cb12-3">posterior_pred_uncertainty_para <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poly_X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> SN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> poly_X_test.T</span>
<span id="cb12-4"></span>
<span id="cb12-5">posterior_pred_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> posterior_pred_uncertainty_para</span></code></pre></div>
</div>
<div id="cell-21" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(posterior_pred_mean.shape)</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(posterior_pred_var.shape)</span></span></code></pre></div>
</div>
<div id="cell-22" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot the posterior</span></span>
<span id="cb14-2">plt.figure()</span>
<span id="cb14-3">plt.plot(X, y, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"+"</span>)</span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.plot(Xtest, m_mle_test)</span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.plot(Xtest, m_map_test)</span></span>
<span id="cb14-6">posterior_pred_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> posterior_pred_mean.flatten()</span>
<span id="cb14-7">var_blr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.diag(posterior_pred_uncertainty_para)</span>
<span id="cb14-8"></span>
<span id="cb14-9">conf_bound1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sqrt(var_blr).flatten()</span>
<span id="cb14-10">plt.fill_between(Xtest.flatten(), posterior_pred_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> conf_bound1, posterior_pred_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> conf_bound1, alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span>)</span>
<span id="cb14-11"></span>
<span id="cb14-12">conf_bound2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.sqrt(var_blr).flatten()</span>
<span id="cb14-13">plt.fill_between(Xtest.flatten(), posterior_pred_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> conf_bound2, posterior_pred_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> conf_bound2, alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span>)</span>
<span id="cb14-14"></span>
<span id="cb14-15">conf_bound3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.sqrt(var_blr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sigma).flatten()</span>
<span id="cb14-16">plt.fill_between(Xtest.flatten(), posterior_pred_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> conf_bound3, posterior_pred_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> conf_bound3, alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span>)</span>
<span id="cb14-17"></span>
<span id="cb14-18">plt.legend([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Training data"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BLR"</span>])</span>
<span id="cb14-19">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$x$'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-20">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$y$'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://jaiswalsuraj487.github.io/blogs/blogsData/Bayesian_Lineara_Regressiondemo_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>
</section>

 ]]></description>
  <guid>https://jaiswalsuraj487.github.io/blogs/blogsData/Bayesian_Lineara_Regressiondemo.html</guid>
  <pubDate>Mon, 05 Jun 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
